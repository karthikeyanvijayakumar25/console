@%:@! /bin/sh
@%:@ Guess values for system-dependent variables and create Makefiles.
@%:@ Generated by GNU Autoconf 2.69 for rtems-c-src-tests-sptests 5.1.0.
@%:@
@%:@ Report bugs to <https://devel.rtems.org/newticket>.
@%:@ 
@%:@ 
@%:@ Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@%:@ 
@%:@ 
@%:@ This configure script is free software; the Free Software Foundation
@%:@ gives unlimited permission to copy, distribute and modify it.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in @%:@(
  *posix*) :
    set -o posix ;; @%:@(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in @%:@(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in @%:@((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

# Use a proper internal environment variable to ensure we don't fall
  # into an infinite loop, continuously re-executing ourselves.
  if test x"${_as_can_reexec}" != xno && test "x$CONFIG_SHELL" != x; then
    _as_can_reexec=no; export _as_can_reexec;
    # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in @%:@ ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
as_fn_exit 255
  fi
  # We don't want this to propagate to other subprocesses.
          { _as_can_reexec=; unset _as_can_reexec;}
if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else
  case \`(set -o) 2>/dev/null\` in @%:@(
  *posix*) :
    set -o posix ;; @%:@(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :
  
else
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1
test -x / || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1"
  if (eval "$as_required") 2>/dev/null; then :
  as_have_required=yes
else
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null; then :
  
else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_found=:
  case $as_dir in @%:@(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir/$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$as_shell"; } 2>/dev/null; then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if { $as_echo "$as_bourne_compatible""$as_suggested" | as_run=a "$as_shell"; } 2>/dev/null; then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
$as_found || { if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$SHELL"; } 2>/dev/null; then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi; }
IFS=$as_save_IFS


      if test "x$CONFIG_SHELL" != x; then :
  export CONFIG_SHELL
             # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in @%:@ ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
exit 255
fi

    if test x$as_have_required = xno; then :
  $as_echo "$0: This script requires a shell more modern than all"
  $as_echo "$0: the shells that I found on your system."
  if test x${ZSH_VERSION+set} = xset ; then
    $as_echo "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    $as_echo "$0: be upgraded to zsh 4.3.4 or later."
  else
    $as_echo "$0: Please tell bug-autoconf@gnu.org and
$0: https://devel.rtems.org/newticket about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
@%:@ as_fn_unset VAR
@%:@ ---------------
@%:@ Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset

@%:@ as_fn_set_status STATUS
@%:@ -----------------------
@%:@ Set @S|@? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} @%:@ as_fn_set_status

@%:@ as_fn_exit STATUS
@%:@ -----------------
@%:@ Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} @%:@ as_fn_exit

@%:@ as_fn_mkdir_p
@%:@ -------------
@%:@ Create "@S|@as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} @%:@ as_fn_mkdir_p

@%:@ as_fn_executable_p FILE
@%:@ -----------------------
@%:@ Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} @%:@ as_fn_executable_p
@%:@ as_fn_append VAR VALUE
@%:@ ----------------------
@%:@ Append the text in VALUE to the end of the definition contained in VAR. Take
@%:@ advantage of any shell optimizations that allow amortized linear growth over
@%:@ repeated appends, instead of the typical quadratic growth present in naive
@%:@ implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

@%:@ as_fn_arith ARG...
@%:@ ------------------
@%:@ Perform arithmetic evaluation on the ARGs, and store the result in the
@%:@ global @S|@as_val. Take advantage of shells that can avoid forks. The arguments
@%:@ must be portable across @S|@(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


@%:@ as_fn_error STATUS ERROR [LINENO LOG_FD]
@%:@ ----------------------------------------
@%:@ Output "`basename @S|@0`: error: ERROR" to stderr. If LINENO and LOG_FD are
@%:@ provided, also output the error to LOG_FD, referencing LINENO. Then exit the
@%:@ script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} @%:@ as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have
  # already done that, so ensure we don't try to do so again and fall
  # in an infinite loop.  This has already happened in practice.
  _as_can_reexec=no; export _as_can_reexec
  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in @%:@(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


test -n "$DJDIR" || exec 7<&0 </dev/null
exec 6>&1

# Name of the host.
# hostname on some systems (SVR3.2, old GNU/Linux) returns a bogus exit status,
# so uname gets run too.
ac_hostname=`(hostname || uname -n) 2>/dev/null | sed 1q`

#
# Initializations.
#
ac_default_prefix=/usr/local
ac_clean_files=
ac_config_libobj_dir=.
LIB@&t@OBJS=
cross_compiling=no
subdirs=
MFLAGS=
MAKEFLAGS=

# Identity of this package.
PACKAGE_NAME='rtems-c-src-tests-sptests'
PACKAGE_TARNAME='rtems-c-src-tests-sptests'
PACKAGE_VERSION='5.1.0'
PACKAGE_STRING='rtems-c-src-tests-sptests 5.1.0'
PACKAGE_BUGREPORT='https://devel.rtems.org/newticket'
PACKAGE_URL=''

ac_unique_file="sp01"
enable_option_checking=no
ac_default_prefix=/opt/rtems-5
ac_subst_vars='am__EXEEXT_FALSE
am__EXEEXT_TRUE
LTLIBOBJS
LIB@&t@OBJS
TEST_FLAGS_spwkspace
TEST_spwkspace_FALSE
TEST_spwkspace_TRUE
TEST_FLAGS_spwatchdog
TEST_spwatchdog_FALSE
TEST_spwatchdog_TRUE
TEST_FLAGS_spversion01
TEST_spversion01_FALSE
TEST_spversion01_TRUE
TEST_FLAGS_sptls04
TEST_sptls04_FALSE
TEST_sptls04_TRUE
TEST_FLAGS_sptls03
TEST_sptls03_FALSE
TEST_sptls03_TRUE
TEST_FLAGS_sptls02
TEST_sptls02_FALSE
TEST_sptls02_TRUE
TEST_FLAGS_sptls01
TEST_sptls01_FALSE
TEST_sptls01_TRUE
TEST_FLAGS_sptimespec01
TEST_sptimespec01_FALSE
TEST_sptimespec01_TRUE
TEST_FLAGS_sptimerserver01
TEST_sptimerserver01_FALSE
TEST_sptimerserver01_TRUE
TEST_FLAGS_sptimer_err02
TEST_sptimer_err02_FALSE
TEST_sptimer_err02_TRUE
TEST_FLAGS_sptimer_err01
TEST_sptimer_err01_FALSE
TEST_sptimer_err01_TRUE
TEST_FLAGS_sptimecounter04
TEST_sptimecounter04_FALSE
TEST_sptimecounter04_TRUE
TEST_FLAGS_sptimecounter03
TEST_sptimecounter03_FALSE
TEST_sptimecounter03_TRUE
TEST_FLAGS_sptimecounter02
TEST_sptimecounter02_FALSE
TEST_sptimecounter02_TRUE
TEST_FLAGS_sptimecounter01
TEST_sptimecounter01_FALSE
TEST_sptimecounter01_TRUE
TEST_FLAGS_spthreadq01
TEST_spthreadq01_FALSE
TEST_spthreadq01_TRUE
TEST_FLAGS_spthreadlife01
TEST_spthreadlife01_FALSE
TEST_spthreadlife01_TRUE
TEST_FLAGS_spthread01
TEST_spthread01_FALSE
TEST_spthread01_TRUE
TEST_FLAGS_sptasknopreempt01
TEST_sptasknopreempt01_FALSE
TEST_sptasknopreempt01_TRUE
TEST_FLAGS_sptask_err04
TEST_sptask_err04_FALSE
TEST_sptask_err04_TRUE
TEST_FLAGS_sptask_err03
TEST_sptask_err03_FALSE
TEST_sptask_err03_TRUE
TEST_FLAGS_sptask_err02
TEST_sptask_err02_FALSE
TEST_sptask_err02_TRUE
TEST_FLAGS_sptask_err01
TEST_sptask_err01_FALSE
TEST_sptask_err01_TRUE
TEST_FLAGS_spsyslock01
TEST_spsyslock01_FALSE
TEST_spsyslock01_TRUE
TEST_FLAGS_spsysinit01
TEST_spsysinit01_FALSE
TEST_spsysinit01_TRUE
TEST_FLAGS_spstkalloc02
TEST_spstkalloc02_FALSE
TEST_spstkalloc02_TRUE
TEST_FLAGS_spstkalloc
TEST_spstkalloc_FALSE
TEST_spstkalloc_TRUE
TEST_FLAGS_spstdthreads01
TEST_spstdthreads01_FALSE
TEST_spstdthreads01_TRUE
TEST_FLAGS_spsize
TEST_spsize_FALSE
TEST_spsize_TRUE
TEST_FLAGS_spsimplesched03
TEST_spsimplesched03_FALSE
TEST_spsimplesched03_TRUE
TEST_FLAGS_spsimplesched02
TEST_spsimplesched02_FALSE
TEST_spsimplesched02_TRUE
TEST_FLAGS_spsimplesched01
TEST_spsimplesched01_FALSE
TEST_spsimplesched01_TRUE
TEST_FLAGS_spsignal_err01
TEST_spsignal_err01_FALSE
TEST_spsignal_err01_TRUE
TEST_FLAGS_spsem_err02
TEST_spsem_err02_FALSE
TEST_spsem_err02_TRUE
TEST_FLAGS_spsem_err01
TEST_spsem_err01_FALSE
TEST_spsem_err01_TRUE
TEST_FLAGS_spsem03
TEST_spsem03_FALSE
TEST_spsem03_TRUE
TEST_FLAGS_spsem02
TEST_spsem02_FALSE
TEST_spsem02_TRUE
TEST_FLAGS_spsem01
TEST_spsem01_FALSE
TEST_spsem01_TRUE
TEST_FLAGS_spscheduler01
TEST_spscheduler01_FALSE
TEST_spscheduler01_TRUE
TEST_FLAGS_sprmsched02
TEST_sprmsched02_FALSE
TEST_sprmsched02_TRUE
TEST_FLAGS_sprmsched01
TEST_sprmsched01_FALSE
TEST_sprmsched01_TRUE
TEST_FLAGS_spregion_err01
TEST_spregion_err01_FALSE
TEST_spregion_err01_TRUE
TEST_FLAGS_sprbtree01
TEST_sprbtree01_FALSE
TEST_sprbtree01_TRUE
TEST_FLAGS_spratemon_err01
TEST_spratemon_err01_FALSE
TEST_spratemon_err01_TRUE
TEST_FLAGS_spqreslib
TEST_spqreslib_FALSE
TEST_spqreslib_TRUE
TEST_FLAGS_spprofiling01
TEST_spprofiling01_FALSE
TEST_spprofiling01_TRUE
TEST_FLAGS_spprivenv01
TEST_spprivenv01_FALSE
TEST_spprivenv01_TRUE
TEST_FLAGS_spprintk
TEST_spprintk_FALSE
TEST_spprintk_TRUE
TEST_FLAGS_spport_err01
TEST_spport_err01_FALSE
TEST_spport_err01_TRUE
TEST_FLAGS_sppercpudata01
TEST_sppercpudata01_FALSE
TEST_sppercpudata01_TRUE
TEST_FLAGS_sppartition_err01
TEST_sppartition_err01_FALSE
TEST_sppartition_err01_TRUE
TEST_FLAGS_sppagesize
TEST_sppagesize_FALSE
TEST_sppagesize_TRUE
TEST_FLAGS_spobjgetnext
TEST_spobjgetnext_FALSE
TEST_spobjgetnext_TRUE
TEST_FLAGS_spnsext01
TEST_spnsext01_FALSE
TEST_spnsext01_TRUE
TEST_FLAGS_spmutex01
TEST_spmutex01_FALSE
TEST_spmutex01_TRUE
TEST_FLAGS_spmsgq_err02
TEST_spmsgq_err02_FALSE
TEST_spmsgq_err02_TRUE
TEST_FLAGS_spmsgq_err01
TEST_spmsgq_err01_FALSE
TEST_spmsgq_err01_TRUE
TEST_FLAGS_spmrsp01
TEST_spmrsp01_FALSE
TEST_spmrsp01_TRUE
TEST_FLAGS_spmountmgr01
TEST_spmountmgr01_FALSE
TEST_spmountmgr01_TRUE
TEST_FLAGS_spmisc01
TEST_spmisc01_FALSE
TEST_spmisc01_TRUE
TEST_FLAGS_spmkdir
TEST_spmkdir_FALSE
TEST_spmkdir_TRUE
TEST_FLAGS_splinkersets01
TEST_splinkersets01_FALSE
TEST_splinkersets01_TRUE
TEST_FLAGS_spintrcritical24
TEST_spintrcritical24_FALSE
TEST_spintrcritical24_TRUE
TEST_FLAGS_spintrcritical23
TEST_spintrcritical23_FALSE
TEST_spintrcritical23_TRUE
TEST_FLAGS_spintrcritical22
TEST_spintrcritical22_FALSE
TEST_spintrcritical22_TRUE
TEST_FLAGS_spintrcritical21
TEST_spintrcritical21_FALSE
TEST_spintrcritical21_TRUE
TEST_FLAGS_spintrcritical20
TEST_spintrcritical20_FALSE
TEST_spintrcritical20_TRUE
TEST_FLAGS_spintrcritical18
TEST_spintrcritical18_FALSE
TEST_spintrcritical18_TRUE
TEST_FLAGS_spintrcritical16
TEST_spintrcritical16_FALSE
TEST_spintrcritical16_TRUE
TEST_FLAGS_spintrcritical15
TEST_spintrcritical15_FALSE
TEST_spintrcritical15_TRUE
TEST_FLAGS_spintrcritical14
TEST_spintrcritical14_FALSE
TEST_spintrcritical14_TRUE
TEST_FLAGS_spintrcritical13
TEST_spintrcritical13_FALSE
TEST_spintrcritical13_TRUE
TEST_FLAGS_spintrcritical12
TEST_spintrcritical12_FALSE
TEST_spintrcritical12_TRUE
TEST_FLAGS_spintrcritical11
TEST_spintrcritical11_FALSE
TEST_spintrcritical11_TRUE
TEST_FLAGS_spintrcritical10
TEST_spintrcritical10_FALSE
TEST_spintrcritical10_TRUE
TEST_FLAGS_spintrcritical09
TEST_spintrcritical09_FALSE
TEST_spintrcritical09_TRUE
TEST_FLAGS_spintrcritical08
TEST_spintrcritical08_FALSE
TEST_spintrcritical08_TRUE
TEST_FLAGS_spintrcritical07
TEST_spintrcritical07_FALSE
TEST_spintrcritical07_TRUE
TEST_FLAGS_spintrcritical06
TEST_spintrcritical06_FALSE
TEST_spintrcritical06_TRUE
TEST_FLAGS_spintrcritical05
TEST_spintrcritical05_FALSE
TEST_spintrcritical05_TRUE
TEST_FLAGS_spintrcritical04
TEST_spintrcritical04_FALSE
TEST_spintrcritical04_TRUE
TEST_FLAGS_spintrcritical03
TEST_spintrcritical03_FALSE
TEST_spintrcritical03_TRUE
TEST_FLAGS_spintrcritical02
TEST_spintrcritical02_FALSE
TEST_spintrcritical02_TRUE
TEST_FLAGS_spintrcritical01
TEST_spintrcritical01_FALSE
TEST_spintrcritical01_TRUE
TEST_FLAGS_spintr_err01
TEST_spintr_err01_FALSE
TEST_spintr_err01_TRUE
TEST_FLAGS_spinternalerror02
TEST_spinternalerror02_FALSE
TEST_spinternalerror02_TRUE
TEST_FLAGS_spinternalerror01
TEST_spinternalerror01_FALSE
TEST_spinternalerror01_TRUE
TEST_FLAGS_spheapprot
TEST_spheapprot_FALSE
TEST_spheapprot_TRUE
TEST_FLAGS_spglobalcon02
TEST_spglobalcon02_FALSE
TEST_spglobalcon02_TRUE
TEST_FLAGS_spglobalcon01
TEST_spglobalcon01_FALSE
TEST_spglobalcon01_TRUE
TEST_FLAGS_spfreechain01
TEST_spfreechain01_FALSE
TEST_spfreechain01_TRUE
TEST_FLAGS_spfifo05
TEST_spfifo05_FALSE
TEST_spfifo05_TRUE
TEST_FLAGS_spfifo04
TEST_spfifo04_FALSE
TEST_spfifo04_TRUE
TEST_FLAGS_spfifo03
TEST_spfifo03_FALSE
TEST_spfifo03_TRUE
TEST_FLAGS_spfifo02
TEST_spfifo02_FALSE
TEST_spfifo02_TRUE
TEST_FLAGS_spfifo01
TEST_spfifo01_FALSE
TEST_spfifo01_TRUE
TEST_FLAGS_spfatal32
TEST_spfatal32_FALSE
TEST_spfatal32_TRUE
TEST_FLAGS_spfatal31
TEST_spfatal31_FALSE
TEST_spfatal31_TRUE
TEST_FLAGS_spfatal30
TEST_spfatal30_FALSE
TEST_spfatal30_TRUE
TEST_FLAGS_spfatal29
TEST_spfatal29_FALSE
TEST_spfatal29_TRUE
TEST_FLAGS_spfatal28
TEST_spfatal28_FALSE
TEST_spfatal28_TRUE
TEST_FLAGS_spfatal26
TEST_spfatal26_FALSE
TEST_spfatal26_TRUE
TEST_FLAGS_spfatal25
TEST_spfatal25_FALSE
TEST_spfatal25_TRUE
TEST_FLAGS_spfatal24
TEST_spfatal24_FALSE
TEST_spfatal24_TRUE
TEST_FLAGS_spfatal16
TEST_spfatal16_FALSE
TEST_spfatal16_TRUE
TEST_FLAGS_spfatal15
TEST_spfatal15_FALSE
TEST_spfatal15_TRUE
TEST_FLAGS_spfatal14
TEST_spfatal14_FALSE
TEST_spfatal14_TRUE
TEST_FLAGS_spfatal12
TEST_spfatal12_FALSE
TEST_spfatal12_TRUE
TEST_FLAGS_spfatal11
TEST_spfatal11_FALSE
TEST_spfatal11_TRUE
TEST_FLAGS_spfatal10
TEST_spfatal10_FALSE
TEST_spfatal10_TRUE
TEST_FLAGS_spfatal09
TEST_spfatal09_FALSE
TEST_spfatal09_TRUE
TEST_FLAGS_spfatal06
TEST_spfatal06_FALSE
TEST_spfatal06_TRUE
TEST_FLAGS_spfatal05
TEST_spfatal05_FALSE
TEST_spfatal05_TRUE
TEST_FLAGS_spfatal04
TEST_spfatal04_FALSE
TEST_spfatal04_TRUE
TEST_FLAGS_spfatal03
TEST_spfatal03_FALSE
TEST_spfatal03_TRUE
TEST_FLAGS_spfatal02
TEST_spfatal02_FALSE
TEST_spfatal02_TRUE
TEST_FLAGS_spfatal01
TEST_spfatal01_FALSE
TEST_spfatal01_TRUE
TEST_FLAGS_spextensions01
TEST_spextensions01_FALSE
TEST_spextensions01_TRUE
TEST_FLAGS_speventtransient01
TEST_speventtransient01_FALSE
TEST_speventtransient01_TRUE
TEST_FLAGS_speventsystem01
TEST_speventsystem01_FALSE
TEST_speventsystem01_TRUE
TEST_FLAGS_spevent_err03
TEST_spevent_err03_FALSE
TEST_spevent_err03_TRUE
TEST_FLAGS_sperror03
TEST_sperror03_FALSE
TEST_sperror03_TRUE
TEST_FLAGS_sperror02
TEST_sperror02_FALSE
TEST_sperror02_TRUE
TEST_FLAGS_sperror01
TEST_sperror01_FALSE
TEST_sperror01_TRUE
TEST_FLAGS_spedfsched04
TEST_spedfsched04_FALSE
TEST_spedfsched04_TRUE
TEST_FLAGS_spedfsched03
TEST_spedfsched03_FALSE
TEST_spedfsched03_TRUE
TEST_FLAGS_spedfsched02
TEST_spedfsched02_FALSE
TEST_spedfsched02_TRUE
TEST_FLAGS_spedfsched01
TEST_spedfsched01_FALSE
TEST_spedfsched01_TRUE
TEST_FLAGS_spcxx01
TEST_spcxx01_FALSE
TEST_spcxx01_TRUE
TEST_FLAGS_spcpuset01
TEST_spcpuset01_FALSE
TEST_spcpuset01_TRUE
TEST_FLAGS_spcpucounter01
TEST_spcpucounter01_FALSE
TEST_spcpucounter01_TRUE
TEST_FLAGS_spcoverage
TEST_spcoverage_FALSE
TEST_spcoverage_TRUE
TEST_FLAGS_spcontext01
TEST_spcontext01_FALSE
TEST_spcontext01_TRUE
TEST_FLAGS_spconsole01
TEST_spconsole01_FALSE
TEST_spconsole01_TRUE
TEST_FLAGS_spconfig02
TEST_spconfig02_FALSE
TEST_spconfig02_TRUE
TEST_FLAGS_spconfig01
TEST_spconfig01_FALSE
TEST_spconfig01_TRUE
TEST_FLAGS_spclock_todhook01
TEST_spclock_todhook01_FALSE
TEST_spclock_todhook01_TRUE
TEST_FLAGS_spclock_err02
TEST_spclock_err02_FALSE
TEST_spclock_err02_TRUE
TEST_FLAGS_spclock_err01
TEST_spclock_err01_FALSE
TEST_spclock_err01_TRUE
TEST_FLAGS_spchain
TEST_spchain_FALSE
TEST_spchain_TRUE
TEST_FLAGS_spcbssched03
TEST_spcbssched03_FALSE
TEST_spcbssched03_TRUE
TEST_FLAGS_spcbssched02
TEST_spcbssched02_FALSE
TEST_spcbssched02_TRUE
TEST_FLAGS_spcbssched01
TEST_spcbssched01_FALSE
TEST_spcbssched01_TRUE
TEST_FLAGS_spcache01
TEST_spcache01_FALSE
TEST_spcache01_TRUE
TEST_FLAGS_spatomic01
TEST_spatomic01_FALSE
TEST_spatomic01_TRUE
TEST_FLAGS_spassoc01
TEST_spassoc01_FALSE
TEST_spassoc01_TRUE
TEST_FLAGS_sp77
TEST_sp77_FALSE
TEST_sp77_TRUE
TEST_FLAGS_sp76
TEST_sp76_FALSE
TEST_sp76_TRUE
TEST_FLAGS_sp75
TEST_sp75_FALSE
TEST_sp75_TRUE
TEST_FLAGS_sp74
TEST_sp74_FALSE
TEST_sp74_TRUE
TEST_FLAGS_sp73
TEST_sp73_FALSE
TEST_sp73_TRUE
TEST_FLAGS_sp72
TEST_sp72_FALSE
TEST_sp72_TRUE
TEST_FLAGS_sp71
TEST_sp71_FALSE
TEST_sp71_TRUE
TEST_FLAGS_sp70
TEST_sp70_FALSE
TEST_sp70_TRUE
TEST_FLAGS_sp69
TEST_sp69_FALSE
TEST_sp69_TRUE
TEST_FLAGS_sp68
TEST_sp68_FALSE
TEST_sp68_TRUE
TEST_FLAGS_sp67
TEST_sp67_FALSE
TEST_sp67_TRUE
TEST_FLAGS_sp66
TEST_sp66_FALSE
TEST_sp66_TRUE
TEST_FLAGS_sp65
TEST_sp65_FALSE
TEST_sp65_TRUE
TEST_FLAGS_sp64
TEST_sp64_FALSE
TEST_sp64_TRUE
TEST_FLAGS_sp63
TEST_sp63_FALSE
TEST_sp63_TRUE
TEST_FLAGS_sp62
TEST_sp62_FALSE
TEST_sp62_TRUE
TEST_FLAGS_sp60
TEST_sp60_FALSE
TEST_sp60_TRUE
TEST_FLAGS_sp59
TEST_sp59_FALSE
TEST_sp59_TRUE
TEST_FLAGS_sp58
TEST_sp58_FALSE
TEST_sp58_TRUE
TEST_FLAGS_sp57
TEST_sp57_FALSE
TEST_sp57_TRUE
TEST_FLAGS_sp56
TEST_sp56_FALSE
TEST_sp56_TRUE
TEST_FLAGS_sp55
TEST_sp55_FALSE
TEST_sp55_TRUE
TEST_FLAGS_sp54
TEST_sp54_FALSE
TEST_sp54_TRUE
TEST_FLAGS_sp53
TEST_sp53_FALSE
TEST_sp53_TRUE
TEST_FLAGS_sp52
TEST_sp52_FALSE
TEST_sp52_TRUE
TEST_FLAGS_sp51
TEST_sp51_FALSE
TEST_sp51_TRUE
TEST_FLAGS_sp50
TEST_sp50_FALSE
TEST_sp50_TRUE
TEST_FLAGS_sp49
TEST_sp49_FALSE
TEST_sp49_TRUE
TEST_FLAGS_sp48
TEST_sp48_FALSE
TEST_sp48_TRUE
TEST_FLAGS_sp47
TEST_sp47_FALSE
TEST_sp47_TRUE
TEST_FLAGS_sp46
TEST_sp46_FALSE
TEST_sp46_TRUE
TEST_FLAGS_sp45
TEST_sp45_FALSE
TEST_sp45_TRUE
TEST_FLAGS_sp44
TEST_sp44_FALSE
TEST_sp44_TRUE
TEST_FLAGS_sp43
TEST_sp43_FALSE
TEST_sp43_TRUE
TEST_FLAGS_sp42
TEST_sp42_FALSE
TEST_sp42_TRUE
TEST_FLAGS_sp41
TEST_sp41_FALSE
TEST_sp41_TRUE
TEST_FLAGS_sp40
TEST_sp40_FALSE
TEST_sp40_TRUE
TEST_FLAGS_sp38
TEST_sp38_FALSE
TEST_sp38_TRUE
TEST_FLAGS_sp37
TEST_sp37_FALSE
TEST_sp37_TRUE
TEST_FLAGS_sp35
TEST_sp35_FALSE
TEST_sp35_TRUE
TEST_FLAGS_sp34
TEST_sp34_FALSE
TEST_sp34_TRUE
TEST_FLAGS_sp33
TEST_sp33_FALSE
TEST_sp33_TRUE
TEST_FLAGS_sp32
TEST_sp32_FALSE
TEST_sp32_TRUE
TEST_FLAGS_sp31
TEST_sp31_FALSE
TEST_sp31_TRUE
TEST_FLAGS_sp30
TEST_sp30_FALSE
TEST_sp30_TRUE
TEST_FLAGS_sp29
TEST_sp29_FALSE
TEST_sp29_TRUE
TEST_FLAGS_sp27a
TEST_sp27a_FALSE
TEST_sp27a_TRUE
TEST_FLAGS_sp27
TEST_sp27_FALSE
TEST_sp27_TRUE
TEST_FLAGS_sp26
TEST_sp26_FALSE
TEST_sp26_TRUE
TEST_FLAGS_sp25
TEST_sp25_FALSE
TEST_sp25_TRUE
TEST_FLAGS_sp24
TEST_sp24_FALSE
TEST_sp24_TRUE
TEST_FLAGS_sp23
TEST_sp23_FALSE
TEST_sp23_TRUE
TEST_FLAGS_sp22
TEST_sp22_FALSE
TEST_sp22_TRUE
TEST_FLAGS_sp21
TEST_sp21_FALSE
TEST_sp21_TRUE
TEST_FLAGS_sp2038
TEST_sp2038_FALSE
TEST_sp2038_TRUE
TEST_FLAGS_sp20
TEST_sp20_FALSE
TEST_sp20_TRUE
TEST_FLAGS_sp19
TEST_sp19_FALSE
TEST_sp19_TRUE
TEST_FLAGS_sp18
TEST_sp18_FALSE
TEST_sp18_TRUE
TEST_FLAGS_sp17
TEST_sp17_FALSE
TEST_sp17_TRUE
TEST_FLAGS_sp16
TEST_sp16_FALSE
TEST_sp16_TRUE
TEST_FLAGS_sp15
TEST_sp15_FALSE
TEST_sp15_TRUE
TEST_FLAGS_sp14
TEST_sp14_FALSE
TEST_sp14_TRUE
TEST_FLAGS_sp13
TEST_sp13_FALSE
TEST_sp13_TRUE
TEST_FLAGS_sp12
TEST_sp12_FALSE
TEST_sp12_TRUE
TEST_FLAGS_sp11
TEST_sp11_FALSE
TEST_sp11_TRUE
TEST_FLAGS_sp08
TEST_sp08_FALSE
TEST_sp08_TRUE
TEST_FLAGS_sp07
TEST_sp07_FALSE
TEST_sp07_TRUE
TEST_FLAGS_sp06
TEST_sp06_FALSE
TEST_sp06_TRUE
TEST_FLAGS_sp05
TEST_sp05_FALSE
TEST_sp05_TRUE
TEST_FLAGS_sp04
TEST_sp04_FALSE
TEST_sp04_TRUE
TEST_FLAGS_sp03
TEST_sp03_FALSE
TEST_sp03_TRUE
TEST_FLAGS_sp02
TEST_sp02_FALSE
TEST_sp02_TRUE
TEST_FLAGS_sp01
TEST_sp01_FALSE
TEST_sp01_TRUE
HAS_SMP_FALSE
HAS_SMP_TRUE
NO_SMP_FALSE
NO_SMP_TRUE
HAS_CPLUSPLUS_FALSE
HAS_CPLUSPLUS_TRUE
HAS_CPLUSPLUS
SIZE
OBJCOPY
RANLIB
NM
LD
AS
AR
CXXCPP
CXXDEPMODE
ac_ct_CXX
CXXFLAGS
am__fastdepCXX_FALSE
am__fastdepCXX_TRUE
CXX
RTEMS_BSP_LIBBSP_PATH
RTEMS_BSP_ARCH_LINKCMDS_PATH
RTEMS_BSP_CPPFLAGS
RTEMS_CPPFLAGS
GCCSPECS
CPP
am__fastdepCC_FALSE
am__fastdepCC_TRUE
CCDEPMODE
am__nodep
AMDEPBACKSLASH
AMDEP_FALSE
AMDEP_TRUE
am__quote
am__include
DEPDIR
OBJEXT
EXEEXT
ac_ct_CC
CPPFLAGS
LDFLAGS
CFLAGS
CC
BIN2C
PROJECT_RELEASE
PROJECT_LIB
PROJECT_INCLUDE
RTEMS_BSP
RTEMS_BSP_FAMILY
MAINT
MAINTAINER_MODE_FALSE
MAINTAINER_MODE_TRUE
am__untar
am__tar
AMTAR
SET_MAKE
AWK
mkdir_p
MKDIR_P
INSTALL_STRIP_PROGRAM
STRIP
install_sh
MAKEINFO
AUTOHEADER
AUTOMAKE
AUTOCONF
ACLOCAL
VERSION
PACKAGE
CYGPATH_W
am__isrc
INSTALL_DATA
INSTALL_SCRIPT
INSTALL_PROGRAM
RTEMS_CPU
host_os
host_vendor
host_cpu
host
build_os
build_vendor
build_cpu
build
RTEMS_BUILD_ROOT
RTEMS_SOURCE_ROOT
PROJECT_ROOT
CPUKIT_ROOT
PROJECT_TOPdir
RTEMS_ROOT
RTEMS_TOPdir
ENDIF
MAKE
am__leading_dot
target_alias
host_alias
build_alias
LIBS
ECHO_T
ECHO_N
ECHO_C
DEFS
mandir
localedir
libdir
psdir
pdfdir
dvidir
htmldir
infodir
docdir
oldincludedir
includedir
localstatedir
sharedstatedir
sysconfdir
datadir
datarootdir
libexecdir
sbindir
bindir
program_transform_name
prefix
exec_prefix
PACKAGE_URL
PACKAGE_BUGREPORT
PACKAGE_STRING
PACKAGE_VERSION
PACKAGE_TARNAME
PACKAGE_NAME
PATH_SEPARATOR
SHELL'
ac_subst_files=''
ac_user_opts='
enable_option_checking
enable_rtems_root
enable_cpukit_root
enable_project_root
enable_maintainer_mode
enable_cxx
enable_dependency_tracking
'
      ac_precious_vars='build_alias
host_alias
target_alias
RTEMS_BSP_FAMILY
RTEMS_BSP
CC
CFLAGS
LDFLAGS
LIBS
CPPFLAGS
CPP
CXX
CXXFLAGS
CCC
CXXCPP'


# Initialize some variables set by options.
ac_init_help=
ac_init_version=false
ac_unrecognized_opts=
ac_unrecognized_sep=
# The variables have the same names as the options, with
# dashes changed to underlines.
cache_file=/dev/null
exec_prefix=NONE
no_create=
no_recursion=
prefix=NONE
program_prefix=NONE
program_suffix=NONE
program_transform_name=s,x,x,
silent=
site=
srcdir=
verbose=
x_includes=NONE
x_libraries=NONE

# Installation directory options.
# These are left unexpanded so users can "make install exec_prefix=/foo"
# and all the variables that are supposed to be based on exec_prefix
# by default will actually change.
# Use braces instead of parens because sh, perl, etc. also accept them.
# (The list follows the same order as the GNU Coding Standards.)
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
libexecdir='${exec_prefix}/libexec'
datarootdir='${prefix}/share'
datadir='${datarootdir}'
sysconfdir='${prefix}/etc'
sharedstatedir='${prefix}/com'
localstatedir='${prefix}/var'
includedir='${prefix}/include'
oldincludedir='/usr/include'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
infodir='${datarootdir}/info'
htmldir='${docdir}'
dvidir='${docdir}'
pdfdir='${docdir}'
psdir='${docdir}'
libdir='${exec_prefix}/lib'
localedir='${datarootdir}/locale'
mandir='${datarootdir}/man'

ac_prev=
ac_dashdash=
for ac_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$ac_prev"; then
    eval $ac_prev=\$ac_option
    ac_prev=
    continue
  fi

  case $ac_option in
  *=?*) ac_optarg=`expr "X$ac_option" : '[^=]*=\(.*\)'` ;;
  *=)   ac_optarg= ;;
  *)    ac_optarg=yes ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $ac_dashdash$ac_option in
  --)
    ac_dashdash=yes ;;

  -bindir | --bindir | --bindi | --bind | --bin | --bi)
    ac_prev=bindir ;;
  -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)
    bindir=$ac_optarg ;;

  -build | --build | --buil | --bui | --bu)
    ac_prev=build_alias ;;
  -build=* | --build=* | --buil=* | --bui=* | --bu=*)
    build_alias=$ac_optarg ;;

  -cache-file | --cache-file | --cache-fil | --cache-fi \
  | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)
    ac_prev=cache_file ;;
  -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
  | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)
    cache_file=$ac_optarg ;;

  --config-cache | -C)
    cache_file=config.cache ;;

  -datadir | --datadir | --datadi | --datad)
    ac_prev=datadir ;;
  -datadir=* | --datadir=* | --datadi=* | --datad=*)
    datadir=$ac_optarg ;;

  -datarootdir | --datarootdir | --datarootdi | --datarootd | --dataroot \
  | --dataroo | --dataro | --datar)
    ac_prev=datarootdir ;;
  -datarootdir=* | --datarootdir=* | --datarootdi=* | --datarootd=* \
  | --dataroot=* | --dataroo=* | --dataro=* | --datar=*)
    datarootdir=$ac_optarg ;;

  -disable-* | --disable-*)
    ac_useropt=`expr "x$ac_option" : 'x-*disable-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid feature name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"enable_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--disable-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval enable_$ac_useropt=no ;;

  -docdir | --docdir | --docdi | --doc | --do)
    ac_prev=docdir ;;
  -docdir=* | --docdir=* | --docdi=* | --doc=* | --do=*)
    docdir=$ac_optarg ;;

  -dvidir | --dvidir | --dvidi | --dvid | --dvi | --dv)
    ac_prev=dvidir ;;
  -dvidir=* | --dvidir=* | --dvidi=* | --dvid=* | --dvi=* | --dv=*)
    dvidir=$ac_optarg ;;

  -enable-* | --enable-*)
    ac_useropt=`expr "x$ac_option" : 'x-*enable-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid feature name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"enable_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--enable-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval enable_$ac_useropt=\$ac_optarg ;;

  -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \
  | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \
  | --exec | --exe | --ex)
    ac_prev=exec_prefix ;;
  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \
  | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \
  | --exec=* | --exe=* | --ex=*)
    exec_prefix=$ac_optarg ;;

  -gas | --gas | --ga | --g)
    # Obsolete; use --with-gas.
    with_gas=yes ;;

  -help | --help | --hel | --he | -h)
    ac_init_help=long ;;
  -help=r* | --help=r* | --hel=r* | --he=r* | -hr*)
    ac_init_help=recursive ;;
  -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
    ac_init_help=short ;;

  -host | --host | --hos | --ho)
    ac_prev=host_alias ;;
  -host=* | --host=* | --hos=* | --ho=*)
    host_alias=$ac_optarg ;;

  -htmldir | --htmldir | --htmldi | --htmld | --html | --htm | --ht)
    ac_prev=htmldir ;;
  -htmldir=* | --htmldir=* | --htmldi=* | --htmld=* | --html=* | --htm=* \
  | --ht=*)
    htmldir=$ac_optarg ;;

  -includedir | --includedir | --includedi | --included | --include \
  | --includ | --inclu | --incl | --inc)
    ac_prev=includedir ;;
  -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \
  | --includ=* | --inclu=* | --incl=* | --inc=*)
    includedir=$ac_optarg ;;

  -infodir | --infodir | --infodi | --infod | --info | --inf)
    ac_prev=infodir ;;
  -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)
    infodir=$ac_optarg ;;

  -libdir | --libdir | --libdi | --libd)
    ac_prev=libdir ;;
  -libdir=* | --libdir=* | --libdi=* | --libd=*)
    libdir=$ac_optarg ;;

  -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \
  | --libexe | --libex | --libe)
    ac_prev=libexecdir ;;
  -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \
  | --libexe=* | --libex=* | --libe=*)
    libexecdir=$ac_optarg ;;

  -localedir | --localedir | --localedi | --localed | --locale)
    ac_prev=localedir ;;
  -localedir=* | --localedir=* | --localedi=* | --localed=* | --locale=*)
    localedir=$ac_optarg ;;

  -localstatedir | --localstatedir | --localstatedi | --localstated \
  | --localstate | --localstat | --localsta | --localst | --locals)
    ac_prev=localstatedir ;;
  -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \
  | --localstate=* | --localstat=* | --localsta=* | --localst=* | --locals=*)
    localstatedir=$ac_optarg ;;

  -mandir | --mandir | --mandi | --mand | --man | --ma | --m)
    ac_prev=mandir ;;
  -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)
    mandir=$ac_optarg ;;

  -nfp | --nfp | --nf)
    # Obsolete; use --without-fp.
    with_fp=no ;;

  -no-create | --no-create | --no-creat | --no-crea | --no-cre \
  | --no-cr | --no-c | -n)
    no_create=yes ;;

  -no-recursion | --no-recursion | --no-recursio | --no-recursi \
  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)
    no_recursion=yes ;;

  -oldincludedir | --oldincludedir | --oldincludedi | --oldincluded \
  | --oldinclude | --oldinclud | --oldinclu | --oldincl | --oldinc \
  | --oldin | --oldi | --old | --ol | --o)
    ac_prev=oldincludedir ;;
  -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \
  | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \
  | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)
    oldincludedir=$ac_optarg ;;

  -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
    ac_prev=prefix ;;
  -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
    prefix=$ac_optarg ;;

  -program-prefix | --program-prefix | --program-prefi | --program-pref \
  | --program-pre | --program-pr | --program-p)
    ac_prev=program_prefix ;;
  -program-prefix=* | --program-prefix=* | --program-prefi=* \
  | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)
    program_prefix=$ac_optarg ;;

  -program-suffix | --program-suffix | --program-suffi | --program-suff \
  | --program-suf | --program-su | --program-s)
    ac_prev=program_suffix ;;
  -program-suffix=* | --program-suffix=* | --program-suffi=* \
  | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)
    program_suffix=$ac_optarg ;;

  -program-transform-name | --program-transform-name \
  | --program-transform-nam | --program-transform-na \
  | --program-transform-n | --program-transform- \
  | --program-transform | --program-transfor \
  | --program-transfo | --program-transf \
  | --program-trans | --program-tran \
  | --progr-tra | --program-tr | --program-t)
    ac_prev=program_transform_name ;;
  -program-transform-name=* | --program-transform-name=* \
  | --program-transform-nam=* | --program-transform-na=* \
  | --program-transform-n=* | --program-transform-=* \
  | --program-transform=* | --program-transfor=* \
  | --program-transfo=* | --program-transf=* \
  | --program-trans=* | --program-tran=* \
  | --progr-tra=* | --program-tr=* | --program-t=*)
    program_transform_name=$ac_optarg ;;

  -pdfdir | --pdfdir | --pdfdi | --pdfd | --pdf | --pd)
    ac_prev=pdfdir ;;
  -pdfdir=* | --pdfdir=* | --pdfdi=* | --pdfd=* | --pdf=* | --pd=*)
    pdfdir=$ac_optarg ;;

  -psdir | --psdir | --psdi | --psd | --ps)
    ac_prev=psdir ;;
  -psdir=* | --psdir=* | --psdi=* | --psd=* | --ps=*)
    psdir=$ac_optarg ;;

  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil)
    silent=yes ;;

  -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
    ac_prev=sbindir ;;
  -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
  | --sbi=* | --sb=*)
    sbindir=$ac_optarg ;;

  -sharedstatedir | --sharedstatedir | --sharedstatedi \
  | --sharedstated | --sharedstate | --sharedstat | --sharedsta \
  | --sharedst | --shareds | --shared | --share | --shar \
  | --sha | --sh)
    ac_prev=sharedstatedir ;;
  -sharedstatedir=* | --sharedstatedir=* | --sharedstatedi=* \
  | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \
  | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \
  | --sha=* | --sh=*)
    sharedstatedir=$ac_optarg ;;

  -site | --site | --sit)
    ac_prev=site ;;
  -site=* | --site=* | --sit=*)
    site=$ac_optarg ;;

  -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
    ac_prev=srcdir ;;
  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
    srcdir=$ac_optarg ;;

  -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \
  | --syscon | --sysco | --sysc | --sys | --sy)
    ac_prev=sysconfdir ;;
  -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \
  | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)
    sysconfdir=$ac_optarg ;;

  -target | --target | --targe | --targ | --tar | --ta | --t)
    ac_prev=target_alias ;;
  -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)
    target_alias=$ac_optarg ;;

  -v | -verbose | --verbose | --verbos | --verbo | --verb)
    verbose=yes ;;

  -version | --version | --versio | --versi | --vers | -V)
    ac_init_version=: ;;

  -with-* | --with-*)
    ac_useropt=`expr "x$ac_option" : 'x-*with-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid package name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"with_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--with-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval with_$ac_useropt=\$ac_optarg ;;

  -without-* | --without-*)
    ac_useropt=`expr "x$ac_option" : 'x-*without-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid package name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"with_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--without-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval with_$ac_useropt=no ;;

  --x)
    # Obsolete; use --with-x.
    with_x=yes ;;

  -x-includes | --x-includes | --x-include | --x-includ | --x-inclu \
  | --x-incl | --x-inc | --x-in | --x-i)
    ac_prev=x_includes ;;
  -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \
  | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)
    x_includes=$ac_optarg ;;

  -x-libraries | --x-libraries | --x-librarie | --x-librari \
  | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)
    ac_prev=x_libraries ;;
  -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \
  | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)
    x_libraries=$ac_optarg ;;

  -*) as_fn_error $? "unrecognized option: \`$ac_option'
Try \`$0 --help' for more information"
    ;;

  *=*)
    ac_envvar=`expr "x$ac_option" : 'x\([^=]*\)='`
    # Reject names that are not valid shell variable names.
    case $ac_envvar in #(
      '' | [0-9]* | *[!_$as_cr_alnum]* )
      as_fn_error $? "invalid variable name: \`$ac_envvar'" ;;
    esac
    eval $ac_envvar=\$ac_optarg
    export $ac_envvar ;;

  *)
    # FIXME: should be removed in autoconf 3.0.
    $as_echo "$as_me: WARNING: you should use --build, --host, --target" >&2
    expr "x$ac_option" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      $as_echo "$as_me: WARNING: invalid host type: $ac_option" >&2
    : "${build_alias=$ac_option} ${host_alias=$ac_option} ${target_alias=$ac_option}"
    ;;

  esac
done

if test -n "$ac_prev"; then
  ac_option=--`echo $ac_prev | sed 's/_/-/g'`
  as_fn_error $? "missing argument to $ac_option"
fi

if test -n "$ac_unrecognized_opts"; then
  case $enable_option_checking in
    no) ;;
    fatal) as_fn_error $? "unrecognized options: $ac_unrecognized_opts" ;;
    *)     $as_echo "$as_me: WARNING: unrecognized options: $ac_unrecognized_opts" >&2 ;;
  esac
fi

# Check all directory arguments for consistency.
for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
		datadir sysconfdir sharedstatedir localstatedir includedir \
		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
		libdir localedir mandir
do
  eval ac_val=\$$ac_var
  # Remove trailing slashes.
  case $ac_val in
    */ )
      ac_val=`expr "X$ac_val" : 'X\(.*[^/]\)' \| "X$ac_val" : 'X\(.*\)'`
      eval $ac_var=\$ac_val;;
  esac
  # Be sure to have absolute directory names.
  case $ac_val in
    [\\/$]* | ?:[\\/]* )  continue;;
    NONE | '' ) case $ac_var in *prefix ) continue;; esac;;
  esac
  as_fn_error $? "expected an absolute directory name for --$ac_var: $ac_val"
done

# There might be people who depend on the old broken behavior: `$host'
# used to hold the argument of --host etc.
# FIXME: To remove some day.
build=$build_alias
host=$host_alias
target=$target_alias

# FIXME: To remove some day.
if test "x$host_alias" != x; then
  if test "x$build_alias" = x; then
    cross_compiling=maybe
  elif test "x$build_alias" != "x$host_alias"; then
    cross_compiling=yes
  fi
fi

ac_tool_prefix=
test -n "$host_alias" && ac_tool_prefix=$host_alias-

test "$silent" = yes && exec 6>/dev/null


ac_pwd=`pwd` && test -n "$ac_pwd" &&
ac_ls_di=`ls -di .` &&
ac_pwd_ls_di=`cd "$ac_pwd" && ls -di .` ||
  as_fn_error $? "working directory cannot be determined"
test "X$ac_ls_di" = "X$ac_pwd_ls_di" ||
  as_fn_error $? "pwd does not report name of working directory"


# Find the source files, if location was not specified.
if test -z "$srcdir"; then
  ac_srcdir_defaulted=yes
  # Try the directory containing this script, then the parent directory.
  ac_confdir=`$as_dirname -- "$as_myself" ||
$as_expr X"$as_myself" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_myself" : 'X\(//\)[^/]' \| \
	 X"$as_myself" : 'X\(//\)$' \| \
	 X"$as_myself" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_myself" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  srcdir=$ac_confdir
  if test ! -r "$srcdir/$ac_unique_file"; then
    srcdir=..
  fi
else
  ac_srcdir_defaulted=no
fi
if test ! -r "$srcdir/$ac_unique_file"; then
  test "$ac_srcdir_defaulted" = yes && srcdir="$ac_confdir or .."
  as_fn_error $? "cannot find sources ($ac_unique_file) in $srcdir"
fi
ac_msg="sources are in $srcdir, but \`cd $srcdir' does not work"
ac_abs_confdir=`(
	cd "$srcdir" && test -r "./$ac_unique_file" || as_fn_error $? "$ac_msg"
	pwd)`
# When building in place, set srcdir=.
if test "$ac_abs_confdir" = "$ac_pwd"; then
  srcdir=.
fi
# Remove unnecessary trailing slashes from srcdir.
# Double slashes in file names in object file debugging info
# mess up M-x gdb in Emacs.
case $srcdir in
*/) srcdir=`expr "X$srcdir" : 'X\(.*[^/]\)' \| "X$srcdir" : 'X\(.*\)'`;;
esac
for ac_var in $ac_precious_vars; do
  eval ac_env_${ac_var}_set=\${${ac_var}+set}
  eval ac_env_${ac_var}_value=\$${ac_var}
  eval ac_cv_env_${ac_var}_set=\${${ac_var}+set}
  eval ac_cv_env_${ac_var}_value=\$${ac_var}
done

#
# Report the --help message.
#
if test "$ac_init_help" = "long"; then
  # Omit some internal or obsolete options to make the list less imposing.
  # This message is too long to be a string in the A/UX 3.1 sh.
  cat <<_ACEOF
\`configure' configures rtems-c-src-tests-sptests 5.1.0 to adapt to many kinds of systems.

Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print \`checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for \`--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or \`..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          @<:@@S|@ac_default_prefix@:>@
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          @<:@PREFIX@:>@

By default, \`make install' will install all the files in
\`$ac_default_prefix/bin', \`$ac_default_prefix/lib' etc.  You can specify
an installation prefix other than \`$ac_default_prefix' using \`--prefix',
for instance \`--prefix=\$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root
                          @<:@DATAROOTDIR/doc/rtems-c-src-tests-sptests@:>@
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]
_ACEOF

  cat <<\_ACEOF

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
_ACEOF
fi

if test -n "$ac_init_help"; then
  case $ac_init_help in
     short | recursive ) echo "Configuration of rtems-c-src-tests-sptests 5.1.0:";;
   esac
  cat <<\_ACEOF

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]

  --enable-rtems-root     directory containing make/custom

  --enable-cpukit-root    directory containing lib/librtemscpu.a

  --enable-project-root   directory containing lib/librtemsbsp.a
  --enable-maintainer-mode 
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-cxx            enable C++ support
  --enable-dependency-tracking 
                          do not reject slow dependency extractors
  --disable-dependency-tracking 
                          speeds up one-time build

Some influential environment variables:
  RTEMS_BSP_FAMILY 
              RTEMS's BSP directory
  RTEMS_BSP   RTEMS_BSP to build
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <https://devel.rtems.org/newticket>.
_ACEOF
ac_status=$?
fi

if test "$ac_init_help" = "recursive"; then
  # If there are subdirs, report their specific --help.
  for ac_dir in : $ac_subdirs_all; do test "x$ac_dir" = x: && continue
    test -d "$ac_dir" ||
      { cd "$srcdir" && ac_pwd=`pwd` && srcdir=. && test -d "$ac_dir"; } ||
      continue
    ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix

    cd "$ac_dir" || { ac_status=$?; continue; }
    # Check for guested configure.
    if test -f "$ac_srcdir/configure.gnu"; then
      echo &&
      $SHELL "$ac_srcdir/configure.gnu" --help=recursive
    elif test -f "$ac_srcdir/configure"; then
      echo &&
      $SHELL "$ac_srcdir/configure" --help=recursive
    else
      $as_echo "$as_me: WARNING: no configuration information is in $ac_dir" >&2
    fi || ac_status=$?
    cd "$ac_pwd" || { ac_status=$?; break; }
  done
fi

test -n "$ac_init_help" && exit $ac_status
if $ac_init_version; then
  cat <<\_ACEOF
rtems-c-src-tests-sptests configure 5.1.0
generated by GNU Autoconf 2.69

Copyright (C) 2012 Free Software Foundation, Inc.
This configure script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it.
_ACEOF
  exit
fi

## ------------------------ ##
## Autoconf initialization. ##
## ------------------------ ##

@%:@ ac_fn_c_try_compile LINENO
@%:@ --------------------------
@%:@ Try to compile conftest.@S|@ac_ext, and return whether this succeeded.
ac_fn_c_try_compile ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext
  if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_c_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest.$ac_objext; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} @%:@ ac_fn_c_try_compile

@%:@ ac_fn_c_try_cpp LINENO
@%:@ ----------------------
@%:@ Try to preprocess conftest.@S|@ac_ext, and return whether this succeeded.
ac_fn_c_try_cpp ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  if { { ac_try="$ac_cpp conftest.$ac_ext"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } > conftest.i && {
	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
	 test ! -s conftest.err
       }; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

    ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} @%:@ ac_fn_c_try_cpp

@%:@ ac_fn_cxx_try_compile LINENO
@%:@ ----------------------------
@%:@ Try to compile conftest.@S|@ac_ext, and return whether this succeeded.
ac_fn_cxx_try_compile ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext
  if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_cxx_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest.$ac_objext; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} @%:@ ac_fn_cxx_try_compile

@%:@ ac_fn_cxx_try_cpp LINENO
@%:@ ------------------------
@%:@ Try to preprocess conftest.@S|@ac_ext, and return whether this succeeded.
ac_fn_cxx_try_cpp ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  if { { ac_try="$ac_cpp conftest.$ac_ext"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } > conftest.i && {
	 test -z "$ac_cxx_preproc_warn_flag$ac_cxx_werror_flag" ||
	 test ! -s conftest.err
       }; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

    ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} @%:@ ac_fn_cxx_try_cpp
cat >config.log <<_ACEOF
This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by rtems-c-src-tests-sptests $as_me 5.1.0, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ $0 $@

_ACEOF
exec 5>>config.log
{
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    $as_echo "PATH: $as_dir"
  done
IFS=$as_save_IFS

} >&5

cat >&5 <<_ACEOF


## ----------- ##
## Core tests. ##
## ----------- ##

_ACEOF


# Keep a trace of the command line.
# Strip out --no-create and --no-recursion so they do not pile up.
# Strip out --silent because we don't want to record it for future runs.
# Also quote any args containing shell meta-characters.
# Make two passes to allow for proper duplicate-argument suppression.
ac_configure_args=
ac_configure_args0=
ac_configure_args1=
ac_must_keep_next=false
for ac_pass in 1 2
do
  for ac_arg
  do
    case $ac_arg in
    -no-create | --no-c* | -n | -no-recursion | --no-r*) continue ;;
    -q | -quiet | --quiet | --quie | --qui | --qu | --q \
    | -silent | --silent | --silen | --sile | --sil)
      continue ;;
    *\'*)
      ac_arg=`$as_echo "$ac_arg" | sed "s/'/'\\\\\\\\''/g"` ;;
    esac
    case $ac_pass in
    1) as_fn_append ac_configure_args0 " '$ac_arg'" ;;
    2)
      as_fn_append ac_configure_args1 " '$ac_arg'"
      if test $ac_must_keep_next = true; then
	ac_must_keep_next=false # Got value, back to normal.
      else
	case $ac_arg in
	  *=* | --config-cache | -C | -disable-* | --disable-* \
	  | -enable-* | --enable-* | -gas | --g* | -nfp | --nf* \
	  | -q | -quiet | --q* | -silent | --sil* | -v | -verb* \
	  | -with-* | --with-* | -without-* | --without-* | --x)
	    case "$ac_configure_args0 " in
	      "$ac_configure_args1"*" '$ac_arg' "* ) continue ;;
	    esac
	    ;;
	  -* ) ac_must_keep_next=true ;;
	esac
      fi
      as_fn_append ac_configure_args " '$ac_arg'"
      ;;
    esac
  done
done
{ ac_configure_args0=; unset ac_configure_args0;}
{ ac_configure_args1=; unset ac_configure_args1;}

# When interrupted or exit'd, cleanup temporary files, and complete
# config.log.  We remove comments because anyway the quotes in there
# would cause problems or look ugly.
# WARNING: Use '\'' to represent an apostrophe within the trap.
# WARNING: Do not start the trap code with a newline, due to a FreeBSD 4.0 bug.
trap 'exit_status=$?
  # Save into config.log some information that might help in debugging.
  {
    echo

    $as_echo "## ---------------- ##
## Cache variables. ##
## ---------------- ##"
    echo
    # The following way of writing the cache mishandles newlines in values,
(
  for ac_var in `(set) 2>&1 | sed -n '\''s/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'\''`; do
    eval ac_val=\$$ac_var
    case $ac_val in #(
    *${as_nl}*)
      case $ac_var in #(
      *_cv_*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline" >&5
$as_echo "$as_me: WARNING: cache variable $ac_var contains a newline" >&2;} ;;
      esac
      case $ac_var in #(
      _ | IFS | as_nl) ;; #(
      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(
      *) { eval $ac_var=; unset $ac_var;} ;;
      esac ;;
    esac
  done
  (set) 2>&1 |
    case $as_nl`(ac_space='\'' '\''; set) 2>&1` in #(
    *${as_nl}ac_space=\ *)
      sed -n \
	"s/'\''/'\''\\\\'\'''\''/g;
	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\''\\2'\''/p"
      ;; #(
    *)
      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
      ;;
    esac |
    sort
)
    echo

    $as_echo "## ----------------- ##
## Output variables. ##
## ----------------- ##"
    echo
    for ac_var in $ac_subst_vars
    do
      eval ac_val=\$$ac_var
      case $ac_val in
      *\'\''*) ac_val=`$as_echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
      esac
      $as_echo "$ac_var='\''$ac_val'\''"
    done | sort
    echo

    if test -n "$ac_subst_files"; then
      $as_echo "## ------------------- ##
## File substitutions. ##
## ------------------- ##"
      echo
      for ac_var in $ac_subst_files
      do
	eval ac_val=\$$ac_var
	case $ac_val in
	*\'\''*) ac_val=`$as_echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
	esac
	$as_echo "$ac_var='\''$ac_val'\''"
      done | sort
      echo
    fi

    if test -s confdefs.h; then
      $as_echo "## ----------- ##
## confdefs.h. ##
## ----------- ##"
      echo
      cat confdefs.h
      echo
    fi
    test "$ac_signal" != 0 &&
      $as_echo "$as_me: caught signal $ac_signal"
    $as_echo "$as_me: exit $exit_status"
  } >&5
  rm -f core *.core core.conftest.* &&
    rm -f -r conftest* confdefs* conf$$* $ac_clean_files &&
    exit $exit_status
' 0
for ac_signal in 1 2 13 15; do
  trap 'ac_signal='$ac_signal'; as_fn_exit 1' $ac_signal
done
ac_signal=0

# confdefs.h avoids OS command line length limits that DEFS can exceed.
rm -f -r conftest* confdefs.h

$as_echo "/* confdefs.h */" > confdefs.h

# Predefined preprocessor variables.

cat >>confdefs.h <<_ACEOF
@%:@define PACKAGE_NAME "$PACKAGE_NAME"
_ACEOF

cat >>confdefs.h <<_ACEOF
@%:@define PACKAGE_TARNAME "$PACKAGE_TARNAME"
_ACEOF

cat >>confdefs.h <<_ACEOF
@%:@define PACKAGE_VERSION "$PACKAGE_VERSION"
_ACEOF

cat >>confdefs.h <<_ACEOF
@%:@define PACKAGE_STRING "$PACKAGE_STRING"
_ACEOF

cat >>confdefs.h <<_ACEOF
@%:@define PACKAGE_BUGREPORT "$PACKAGE_BUGREPORT"
_ACEOF

cat >>confdefs.h <<_ACEOF
@%:@define PACKAGE_URL "$PACKAGE_URL"
_ACEOF


# Let the site file select an alternate cache file if it wants to.
# Prefer an explicitly selected file to automatically selected ones.
ac_site_file1=NONE
ac_site_file2=NONE
if test -n "$CONFIG_SITE"; then
  # We do not want a PATH search for config.site.
  case $CONFIG_SITE in @%:@((
    -*)  ac_site_file1=./$CONFIG_SITE;;
    */*) ac_site_file1=$CONFIG_SITE;;
    *)   ac_site_file1=./$CONFIG_SITE;;
  esac
elif test "x$prefix" != xNONE; then
  ac_site_file1=$prefix/share/config.site
  ac_site_file2=$prefix/etc/config.site
else
  ac_site_file1=$ac_default_prefix/share/config.site
  ac_site_file2=$ac_default_prefix/etc/config.site
fi
for ac_site_file in "$ac_site_file1" "$ac_site_file2"
do
  test "x$ac_site_file" = xNONE && continue
  if test /dev/null != "$ac_site_file" && test -r "$ac_site_file"; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: loading site script $ac_site_file" >&5
$as_echo "$as_me: loading site script $ac_site_file" >&6;}
    sed 's/^/| /' "$ac_site_file" >&5
    . "$ac_site_file" \
      || { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "failed to load site script $ac_site_file
See \`config.log' for more details" "$LINENO" 5; }
  fi
done

if test -r "$cache_file"; then
  # Some versions of bash will fail to source /dev/null (special files
  # actually), so we avoid doing that.  DJGPP emulates it as a regular file.
  if test /dev/null != "$cache_file" && test -f "$cache_file"; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: loading cache $cache_file" >&5
$as_echo "$as_me: loading cache $cache_file" >&6;}
    case $cache_file in
      [\\/]* | ?:[\\/]* ) . "$cache_file";;
      *)                      . "./$cache_file";;
    esac
  fi
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: creating cache $cache_file" >&5
$as_echo "$as_me: creating cache $cache_file" >&6;}
  >$cache_file
fi

# Check that the precious variables saved in the cache have kept the same
# value.
ac_cache_corrupted=false
for ac_var in $ac_precious_vars; do
  eval ac_old_set=\$ac_cv_env_${ac_var}_set
  eval ac_new_set=\$ac_env_${ac_var}_set
  eval ac_old_val=\$ac_cv_env_${ac_var}_value
  eval ac_new_val=\$ac_env_${ac_var}_value
  case $ac_old_set,$ac_new_set in
    set,)
      { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&5
$as_echo "$as_me: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,set)
      { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' was not set in the previous run" >&5
$as_echo "$as_me: error: \`$ac_var' was not set in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,);;
    *)
      if test "x$ac_old_val" != "x$ac_new_val"; then
	# differences in whitespace do not lead to failure.
	ac_old_val_w=`echo x $ac_old_val`
	ac_new_val_w=`echo x $ac_new_val`
	if test "$ac_old_val_w" != "$ac_new_val_w"; then
	  { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' has changed since the previous run:" >&5
$as_echo "$as_me: error: \`$ac_var' has changed since the previous run:" >&2;}
	  ac_cache_corrupted=:
	else
	  { $as_echo "$as_me:${as_lineno-$LINENO}: warning: ignoring whitespace changes in \`$ac_var' since the previous run:" >&5
$as_echo "$as_me: warning: ignoring whitespace changes in \`$ac_var' since the previous run:" >&2;}
	  eval $ac_var=\$ac_old_val
	fi
	{ $as_echo "$as_me:${as_lineno-$LINENO}:   former value:  \`$ac_old_val'" >&5
$as_echo "$as_me:   former value:  \`$ac_old_val'" >&2;}
	{ $as_echo "$as_me:${as_lineno-$LINENO}:   current value: \`$ac_new_val'" >&5
$as_echo "$as_me:   current value: \`$ac_new_val'" >&2;}
      fi;;
  esac
  # Pass precious variables to config.status.
  if test "$ac_new_set" = set; then
    case $ac_new_val in
    *\'*) ac_arg=$ac_var=`$as_echo "$ac_new_val" | sed "s/'/'\\\\\\\\''/g"` ;;
    *) ac_arg=$ac_var=$ac_new_val ;;
    esac
    case " $ac_configure_args " in
      *" '$ac_arg' "*) ;; # Avoid dups.  Use of quotes ensures accuracy.
      *) as_fn_append ac_configure_args " '$ac_arg'" ;;
    esac
  fi
done
if $ac_cache_corrupted; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: error: changes in the environment can compromise the build" >&5
$as_echo "$as_me: error: changes in the environment can compromise the build" >&2;}
  as_fn_error $? "run \`make distclean' and/or \`rm $cache_file' and start over" "$LINENO" 5
fi
## -------------------- ##
## Main body of script. ##
## -------------------- ##

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu



ac_config_headers="$ac_config_headers config.h"


rm -rf .tst 2>/dev/null
mkdir .tst 2>/dev/null
if test -d .tst; then
  am__leading_dot=.
else
  am__leading_dot=_
fi
rmdir .tst 2>/dev/null






ac_aux_dir=
for ac_dir in ../.. "$srcdir"/../..; do
  if test -f "$ac_dir/install-sh"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install-sh -c"
    break
  elif test -f "$ac_dir/install.sh"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install.sh -c"
    break
  elif test -f "$ac_dir/shtool"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/shtool install -c"
    break
  fi
done
if test -z "$ac_aux_dir"; then
  as_fn_error $? "cannot find install-sh, install.sh, or shtool in ../.. \"$srcdir\"/../.." "$LINENO" 5
fi

# These three variables are undocumented and unsupported,
# and are intended to be withdrawn in a future Autoconf release.
# They can cause serious problems if a builder's source tree is in a directory
# whose full name contains unusual characters.
ac_config_guess="$SHELL $ac_aux_dir/config.guess"  # Please don't use this var.
ac_config_sub="$SHELL $ac_aux_dir/config.sub"  # Please don't use this var.
ac_configure="$SHELL $ac_aux_dir/configure"  # Please don't use this var.


for ac_prog in gmake make
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_MAKE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$MAKE"; then
  ac_cv_prog_MAKE="$MAKE" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_MAKE="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
MAKE=$ac_cv_prog_MAKE
if test -n "$MAKE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $MAKE" >&5
$as_echo "$MAKE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$MAKE" && break
done




## HACK to allow gnu-make conditionals in automake-Makefiles.
ENDIF=endif


RTEMS_TOPdir="../.."


rtems_updir=../

@%:@ Check whether --enable-rtems-root was given.
if test "${enable_rtems_root+set}" = set; then :
  enableval=$enable_rtems_root; case ${enable_rtems_root} in
  [\\/$]* | ?:[\\/]* ) # absolute directory
   rtems_rootdir=${enable_rtems_root}
   RTEMS_ROOT=${enable_rtems_root}
   ;;
  *) # relative directory
   rtems_rootdir=${rtems_updir}${enable_rtems_root}
   RTEMS_ROOT='$(top_builddir)'/${rtems_updir}${enable_rtems_root}
   ;;
esac
else
  
rtems_rootdir=${rtems_updir}
RTEMS_ROOT='$(top_builddir)'/${rtems_updir}

fi



if test -n "${with_target_subdir}"; then :
  project_top="../${with_project_top}"
else
  project_top="${with_project_top}"
fi
PROJECT_TOPdir=${project_top}${rtems_updir}'$(top_builddir)'


@%:@ Check whether --enable-cpukit-root was given.
if test "${enable_cpukit_root+set}" = set; then :
  enableval=$enable_cpukit_root; case ${enable_cpukit_root} in
  [\\/$]* | ?:[\\/]* ) # absolute directory
   cpukit_rootdir=${enable_cpukit_root}
   CPUKIT_ROOT=${enable_cpukit_root}
   ;;
  *) # relative directory
   cpukit_rootdir=${rtems_updir}${enable_cpukit_root}
   CPUKIT_ROOT='$(top_builddir)'/${rtems_updir}${enable_cpukit_root}
   ;;
esac
else
  
cpukit_rootdir=
CPUKIT_ROOT=

fi



@%:@ Check whether --enable-project-root was given.
if test "${enable_project_root+set}" = set; then :
  enableval=$enable_project_root; case ${enable_project_root} in
  [\\/$]* | ?:[\\/]* ) # absolute directory
   project_rootdir=${enable_project_root}
   PROJECT_ROOT=${enable_project_root}
   ;;
  *) # relative directory
   project_rootdir=${rtems_updir}${enable_project_root}
   PROJECT_ROOT='$(top_builddir)'/${rtems_updir}${enable_project_root}
   ;;
esac
else
  
project_rootdir=
PROJECT_ROOT=

fi



RTEMS_SOURCE_ROOT="${with_rtems_source_top}"


#
# This is a copy of the horrible hack in rtems-top.m4 and it is simpler to
# copy it that attempt to clean this crap up.
#
RTEMS_BUILD_ROOT="${with_rtems_build_top}"



# Make sure we can run config.sub.
$SHELL "$ac_aux_dir/config.sub" sun4 >/dev/null 2>&1 ||
  as_fn_error $? "cannot run $SHELL $ac_aux_dir/config.sub" "$LINENO" 5

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking build system type" >&5
$as_echo_n "checking build system type... " >&6; }
if ${ac_cv_build+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_build_alias=$build_alias
test "x$ac_build_alias" = x &&
  ac_build_alias=`$SHELL "$ac_aux_dir/config.guess"`
test "x$ac_build_alias" = x &&
  as_fn_error $? "cannot guess build type; you must specify one" "$LINENO" 5
ac_cv_build=`$SHELL "$ac_aux_dir/config.sub" $ac_build_alias` ||
  as_fn_error $? "$SHELL $ac_aux_dir/config.sub $ac_build_alias failed" "$LINENO" 5

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_build" >&5
$as_echo "$ac_cv_build" >&6; }
case $ac_cv_build in
*-*-*) ;;
*) as_fn_error $? "invalid value of canonical build" "$LINENO" 5;;
esac
build=$ac_cv_build
ac_save_IFS=$IFS; IFS='-'
set x $ac_cv_build
shift
build_cpu=$1
build_vendor=$2
shift; shift
# Remember, the first character of IFS is used to create $*,
# except with old shells:
build_os=$*
IFS=$ac_save_IFS
case $build_os in *\ *) build_os=`echo "$build_os" | sed 's/ /-/g'`;; esac


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking host system type" >&5
$as_echo_n "checking host system type... " >&6; }
if ${ac_cv_host+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test "x$host_alias" = x; then
  ac_cv_host=$ac_cv_build
else
  ac_cv_host=`$SHELL "$ac_aux_dir/config.sub" $host_alias` ||
    as_fn_error $? "$SHELL $ac_aux_dir/config.sub $host_alias failed" "$LINENO" 5
fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_host" >&5
$as_echo "$ac_cv_host" >&6; }
case $ac_cv_host in
*-*-*) ;;
*) as_fn_error $? "invalid value of canonical host" "$LINENO" 5;;
esac
host=$ac_cv_host
ac_save_IFS=$IFS; IFS='-'
set x $ac_cv_host
shift
host_cpu=$1
host_vendor=$2
shift; shift
# Remember, the first character of IFS is used to create $*,
# except with old shells:
host_os=$*
IFS=$ac_save_IFS
case $host_os in *\ *) host_os=`echo "$host_os" | sed 's/ /-/g'`;; esac



{ $as_echo "$as_me:${as_lineno-$LINENO}: checking rtems target cpu" >&5
$as_echo_n "checking rtems target cpu... " >&6; }
case "${host}" in
riscv*-*-rtems*)
	RTEMS_CPU=riscv;;
*-*-rtems*)
	RTEMS_CPU="$host_cpu";;
*)
	;;
esac
if test -n "$RTEMS_CPU"; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $RTEMS_CPU" >&5
$as_echo "$RTEMS_CPU" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: <none>" >&5
$as_echo "<none>" >&6; }
as_fn_error $? "unsupported host $host" "$LINENO" 5
fi



am__api_version='1.12'

# Find a good install program.  We prefer a C program (faster),
# so one script is as good as another.  But avoid the broken or
# incompatible versions:
# SysV /etc/install, /usr/sbin/install
# SunOS /usr/etc/install
# IRIX /sbin/install
# AIX /bin/install
# AmigaOS /C/install, which installs bootblocks on floppy discs
# AIX 4 /usr/bin/installbsd, which doesn't work without a -g flag
# AFS /usr/afsws/bin/install, which mishandles nonexistent args
# SVR4 /usr/ucb/install, which tries to use the nonexistent group "staff"
# OS/2's system install, which has a completely different semantic
# ./install, which can be erroneously created by make from ./install.sh.
# Reject install programs that cannot install multiple files.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for a BSD-compatible install" >&5
$as_echo_n "checking for a BSD-compatible install... " >&6; }
if test -z "$INSTALL"; then
if ${ac_cv_path_install+:} false; then :
  $as_echo_n "(cached) " >&6
else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    # Account for people who put trailing slashes in PATH elements.
case $as_dir/ in @%:@((
  ./ | .// | /[cC]/* | \
  /etc/* | /usr/sbin/* | /usr/etc/* | /sbin/* | /usr/afsws/bin/* | \
  ?:[\\/]os2[\\/]install[\\/]* | ?:[\\/]OS2[\\/]INSTALL[\\/]* | \
  /usr/ucb/* ) ;;
  *)
    # OSF1 and SCO ODT 3.0 have their own names for install.
    # Don't use installbsd from OSF since it installs stuff as root
    # by default.
    for ac_prog in ginstall scoinst install; do
      for ac_exec_ext in '' $ac_executable_extensions; do
	if as_fn_executable_p "$as_dir/$ac_prog$ac_exec_ext"; then
	  if test $ac_prog = install &&
	    grep dspmsg "$as_dir/$ac_prog$ac_exec_ext" >/dev/null 2>&1; then
	    # AIX install.  It has an incompatible calling convention.
	    :
	  elif test $ac_prog = install &&
	    grep pwplus "$as_dir/$ac_prog$ac_exec_ext" >/dev/null 2>&1; then
	    # program-specific install script used by HP pwplus--don't use.
	    :
	  else
	    rm -rf conftest.one conftest.two conftest.dir
	    echo one > conftest.one
	    echo two > conftest.two
	    mkdir conftest.dir
	    if "$as_dir/$ac_prog$ac_exec_ext" -c conftest.one conftest.two "`pwd`/conftest.dir" &&
	      test -s conftest.one && test -s conftest.two &&
	      test -s conftest.dir/conftest.one &&
	      test -s conftest.dir/conftest.two
	    then
	      ac_cv_path_install="$as_dir/$ac_prog$ac_exec_ext -c"
	      break 3
	    fi
	  fi
	fi
      done
    done
    ;;
esac

  done
IFS=$as_save_IFS

rm -rf conftest.one conftest.two conftest.dir

fi
  if test "${ac_cv_path_install+set}" = set; then
    INSTALL=$ac_cv_path_install
  else
    # As a last resort, use the slow shell script.  Don't cache a
    # value for INSTALL within a source directory, because that will
    # break other packages using the cache if that directory is
    # removed, or if the value is a relative name.
    INSTALL=$ac_install_sh
  fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $INSTALL" >&5
$as_echo "$INSTALL" >&6; }

# Use test -z because SunOS4 sh mishandles braces in ${var-val}.
# It thinks the first close brace ends the variable substitution.
test -z "$INSTALL_PROGRAM" && INSTALL_PROGRAM='${INSTALL}'

test -z "$INSTALL_SCRIPT" && INSTALL_SCRIPT='${INSTALL}'

test -z "$INSTALL_DATA" && INSTALL_DATA='${INSTALL} -m 644'

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether build environment is sane" >&5
$as_echo_n "checking whether build environment is sane... " >&6; }
# Reject unsafe characters in $srcdir or the absolute working directory
# name.  Accept space and tab only in the latter.
am_lf='
'
case `pwd` in
  *[\\\"\#\$\&\'\`$am_lf]*)
    as_fn_error $? "unsafe absolute working directory name" "$LINENO" 5;;
esac
case $srcdir in
  *[\\\"\#\$\&\'\`$am_lf\ \	]*)
    as_fn_error $? "unsafe srcdir value: '$srcdir'" "$LINENO" 5;;
esac

# Do 'set' in a subshell so we don't clobber the current shell's
# arguments.  Must try -L first in case configure is actually a
# symlink; some systems play weird games with the mod time of symlinks
# (eg FreeBSD returns the mod time of the symlink's containing
# directory).
if (
   am_has_slept=no
   for am_try in 1 2; do
     echo "timestamp, slept: $am_has_slept" > conftest.file
     set X `ls -Lt "$srcdir/configure" conftest.file 2> /dev/null`
     if test "$*" = "X"; then
	# -L didn't work.
	set X `ls -t "$srcdir/configure" conftest.file`
     fi
     if test "$*" != "X $srcdir/configure conftest.file" \
	&& test "$*" != "X conftest.file $srcdir/configure"; then

	# If neither matched, then we have a broken ls.  This can happen
	# if, for instance, CONFIG_SHELL is bash and it inherits a
	# broken ls alias from the environment.  This has actually
	# happened.  Such a system could not be considered "sane".
	as_fn_error $? "ls -t appears to fail.  Make sure there is not a broken
  alias in your environment" "$LINENO" 5
     fi
     if test "$2" = conftest.file || test $am_try -eq 2; then
       break
     fi
     # Just in case.
     sleep 1
     am_has_slept=yes
   done
   test "$2" = conftest.file
   )
then
   # Ok.
   :
else
   as_fn_error $? "newly created file is older than distributed files!
Check your system clock" "$LINENO" 5
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }
# If we didn't sleep, we still need to ensure time stamps of config.status and
# generated files are strictly newer.
am_sleep_pid=
if grep 'slept: no' conftest.file >/dev/null 2>&1; then
  ( sleep 1 ) &
  am_sleep_pid=$!
fi

rm -f conftest.file

test "$program_prefix" != NONE &&
  program_transform_name="s&^&$program_prefix&;$program_transform_name"
# Use a double $ so make ignores it.
test "$program_suffix" != NONE &&
  program_transform_name="s&\$&$program_suffix&;$program_transform_name"
# Double any \ or $.
# By default was `s,x,x', remove it if useless.
ac_script='s/[\\$]/&&/g;s/;s,x,x,$//'
program_transform_name=`$as_echo "$program_transform_name" | sed "$ac_script"`

# expand $ac_aux_dir to an absolute path
am_aux_dir=`cd $ac_aux_dir && pwd`

if test x"${MISSING+set}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    MISSING="\${SHELL} \"$am_aux_dir/missing\"" ;;
  *)
    MISSING="\${SHELL} $am_aux_dir/missing" ;;
  esac
fi
# Use eval to expand $SHELL
if eval "$MISSING --run true"; then
  am_missing_run="$MISSING --run "
else
  am_missing_run=
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: 'missing' script is too old or missing" >&5
$as_echo "$as_me: WARNING: 'missing' script is too old or missing" >&2;}
fi

if test x"${install_sh}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    install_sh="\${SHELL} '$am_aux_dir/install-sh'" ;;
  *)
    install_sh="\${SHELL} $am_aux_dir/install-sh"
  esac
fi

# Installed binaries are usually stripped using 'strip' when the user
# run "make install-strip".  However 'strip' might not be the right
# tool to use in cross-compilation environments, therefore Automake
# will honor the 'STRIP' environment variable to overrule this program.
if test "$cross_compiling" != no; then
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}strip", so it can be a program name with args.
set dummy ${ac_tool_prefix}strip; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_STRIP+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$STRIP"; then
  ac_cv_prog_STRIP="$STRIP" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_STRIP="${ac_tool_prefix}strip"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
STRIP=$ac_cv_prog_STRIP
if test -n "$STRIP"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $STRIP" >&5
$as_echo "$STRIP" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_prog_STRIP"; then
  ac_ct_STRIP=$STRIP
  # Extract the first word of "strip", so it can be a program name with args.
set dummy strip; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_STRIP+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_STRIP"; then
  ac_cv_prog_ac_ct_STRIP="$ac_ct_STRIP" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_STRIP="strip"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_STRIP=$ac_cv_prog_ac_ct_STRIP
if test -n "$ac_ct_STRIP"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_STRIP" >&5
$as_echo "$ac_ct_STRIP" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_ct_STRIP" = x; then
    STRIP=":"
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    STRIP=$ac_ct_STRIP
  fi
else
  STRIP="$ac_cv_prog_STRIP"
fi

fi
INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for a thread-safe mkdir -p" >&5
$as_echo_n "checking for a thread-safe mkdir -p... " >&6; }
if test -z "$MKDIR_P"; then
  if ${ac_cv_path_mkdir+:} false; then :
  $as_echo_n "(cached) " >&6
else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH$PATH_SEPARATOR/opt/sfw/bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_prog in mkdir gmkdir; do
	 for ac_exec_ext in '' $ac_executable_extensions; do
	   as_fn_executable_p "$as_dir/$ac_prog$ac_exec_ext" || continue
	   case `"$as_dir/$ac_prog$ac_exec_ext" --version 2>&1` in #(
	     'mkdir (GNU coreutils) '* | \
	     'mkdir (coreutils) '* | \
	     'mkdir (fileutils) '4.1*)
	       ac_cv_path_mkdir=$as_dir/$ac_prog$ac_exec_ext
	       break 3;;
	   esac
	 done
       done
  done
IFS=$as_save_IFS

fi

  test -d ./--version && rmdir ./--version
  if test "${ac_cv_path_mkdir+set}" = set; then
    MKDIR_P="$ac_cv_path_mkdir -p"
  else
    # As a last resort, use the slow shell script.  Don't cache a
    # value for MKDIR_P within a source directory, because that will
    # break other packages using the cache if that directory is
    # removed, or if the value is a relative name.
    MKDIR_P="$ac_install_sh -d"
  fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $MKDIR_P" >&5
$as_echo "$MKDIR_P" >&6; }

for ac_prog in gawk mawk nawk awk
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_AWK+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$AWK"; then
  ac_cv_prog_AWK="$AWK" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_AWK="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
AWK=$ac_cv_prog_AWK
if test -n "$AWK"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $AWK" >&5
$as_echo "$AWK" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$AWK" && break
done

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether ${MAKE-make} sets \$(MAKE)" >&5
$as_echo_n "checking whether ${MAKE-make} sets \$(MAKE)... " >&6; }
set x ${MAKE-make}
ac_make=`$as_echo "$2" | sed 's/+/p/g; s/[^a-zA-Z0-9_]/_/g'`
if eval \${ac_cv_prog_make_${ac_make}_set+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat >conftest.make <<\_ACEOF
SHELL = /bin/sh
all:
	@echo '@@@%%%=$(MAKE)=@@@%%%'
_ACEOF
# GNU make sometimes prints "make[1]: Entering ...", which would confuse us.
case `${MAKE-make} -f conftest.make 2>/dev/null` in
  *@@@%%%=?*=@@@%%%*)
    eval ac_cv_prog_make_${ac_make}_set=yes;;
  *)
    eval ac_cv_prog_make_${ac_make}_set=no;;
esac
rm -f conftest.make
fi
if eval test \$ac_cv_prog_make_${ac_make}_set = yes; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }
  SET_MAKE=
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
  SET_MAKE="MAKE=${MAKE-make}"
fi

if test "`cd $srcdir && pwd`" != "`pwd`"; then
  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output
  # is not polluted with repeated "-I."
  am__isrc=' -I$(srcdir)'
  # test to see if srcdir already configured
  if test -f $srcdir/config.status; then
    as_fn_error $? "source directory already configured; run \"make distclean\" there first" "$LINENO" 5
  fi
fi

# test whether we have cygpath
if test -z "$CYGPATH_W"; then
  if (cygpath --version) >/dev/null 2>/dev/null; then
    CYGPATH_W='cygpath -w'
  else
    CYGPATH_W=echo
  fi
fi


# Define the identity of the package.
 PACKAGE='rtems-c-src-tests-sptests'
 VERSION='5.1.0'


# Some tools Automake needs.

ACLOCAL=${ACLOCAL-"${am_missing_run}aclocal-${am__api_version}"}


AUTOCONF=${AUTOCONF-"${am_missing_run}autoconf"}


AUTOMAKE=${AUTOMAKE-"${am_missing_run}automake-${am__api_version}"}


AUTOHEADER=${AUTOHEADER-"${am_missing_run}autoheader"}


MAKEINFO=${MAKEINFO-"${am_missing_run}makeinfo"}

# For better backward compatibility.  To be removed once Automake 1.9.x
# dies out for good.  For more background, see:
# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>
# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>
mkdir_p='$(MKDIR_P)'

# We need awk for the "check" target.  The system "awk" is bad on
# some platforms.
# Always define AMTAR for backward compatibility.  Yes, it's still used
# in the wild :-(  We should find a proper way to deprecate it ...
AMTAR='$${TAR-tar}'

am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'






{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to enable maintainer-specific portions of Makefiles" >&5
$as_echo_n "checking whether to enable maintainer-specific portions of Makefiles... " >&6; }
    @%:@ Check whether --enable-maintainer-mode was given.
if test "${enable_maintainer_mode+set}" = set; then :
  enableval=$enable_maintainer_mode; USE_MAINTAINER_MODE=$enableval
else
  USE_MAINTAINER_MODE=no
fi

  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $USE_MAINTAINER_MODE" >&5
$as_echo "$USE_MAINTAINER_MODE" >&6; }
   if test $USE_MAINTAINER_MODE = yes; then
  MAINTAINER_MODE_TRUE=
  MAINTAINER_MODE_FALSE='#'
else
  MAINTAINER_MODE_TRUE='#'
  MAINTAINER_MODE_FALSE=
fi

  MAINT=$MAINTAINER_MODE_TRUE
  



@%:@ Check whether --enable-cxx was given.
if test "${enable_cxx+set}" = set; then :
  enableval=$enable_cxx; case "${enable_cxx}" in
  yes) RTEMS_HAS_CPLUSPLUS=yes ;;
  no) RTEMS_HAS_CPLUSPLUS=no   ;;
  *)  as_fn_error $? "bad value ${enableval} for enable-cxx option" "$LINENO" 5 ;;
esac
else
  RTEMS_HAS_CPLUSPLUS=yes
fi






{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for RTEMS_BSP" >&5
$as_echo_n "checking for RTEMS_BSP... " >&6; }
if ${rtems_cv_RTEMS_BSP+:} false; then :
  $as_echo_n "(cached) " >&6
else
    test -n "${RTEMS_BSP}" && rtems_cv_RTEMS_BSP="$RTEMS_BSP";

fi
if test -z "$rtems_cv_RTEMS_BSP"; then
  as_fn_error $? "Missing RTEMS_BSP" "$LINENO" 5
fi
RTEMS_BSP="$rtems_cv_RTEMS_BSP"
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: ${RTEMS_BSP}" >&5
$as_echo "${RTEMS_BSP}" >&6; }


PROJECT_INCLUDE="\$(PROJECT_ROOT)/lib/include"

PROJECT_LIB="\$(PROJECT_ROOT)/lib"

PROJECT_RELEASE="\$(PROJECT_ROOT)"




BIN2C=rtems-bin2c



DEPDIR="${am__leading_dot}deps"

ac_config_commands="$ac_config_commands depfiles"


am_make=${MAKE-make}
cat > confinc << 'END'
am__doit:
	@echo this is the am__doit target
.PHONY: am__doit
END
# If we don't find an include directive, just comment out the code.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for style of include used by $am_make" >&5
$as_echo_n "checking for style of include used by $am_make... " >&6; }
am__include="#"
am__quote=
_am_result=none
# First try GNU make style include.
echo "include confinc" > confmf
# Ignore all kinds of additional output from 'make'.
case `$am_make -s -f confmf 2> /dev/null` in #(
*the\ am__doit\ target*)
  am__include=include
  am__quote=
  _am_result=GNU
  ;;
esac
# Now try BSD make style include.
if test "$am__include" = "#"; then
   echo '.include "confinc"' > confmf
   case `$am_make -s -f confmf 2> /dev/null` in #(
   *the\ am__doit\ target*)
     am__include=.include
     am__quote="\""
     _am_result=BSD
     ;;
   esac
fi


{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $_am_result" >&5
$as_echo "$_am_result" >&6; }
rm -f confinc confmf

@%:@ Check whether --enable-dependency-tracking was given.
if test "${enable_dependency_tracking+set}" = set; then :
  enableval=$enable_dependency_tracking; 
fi

if test "x$enable_dependency_tracking" != xno; then
  am_depcomp="$ac_aux_dir/depcomp"
  AMDEPBACKSLASH='\'
  am__nodep='_no'
fi
 if test "x$enable_dependency_tracking" != xno; then
  AMDEP_TRUE=
  AMDEP_FALSE='#'
else
  AMDEP_TRUE='#'
  AMDEP_FALSE=
fi





case "$host" in
*-*-rtems*) ac_cv_exeext=.exe;;
esac


  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}gcc", so it can be a program name with args.
set dummy ${rtems_tool_prefix}gcc; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="${rtems_tool_prefix}gcc"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
$as_echo "$CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi



test -z "$CC" && \
  as_fn_error $? "no acceptable cc found in \$PATH" "$LINENO" 5
ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu
if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}gcc", so it can be a program name with args.
set dummy ${ac_tool_prefix}gcc; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="${ac_tool_prefix}gcc"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
$as_echo "$CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_prog_CC"; then
  ac_ct_CC=$CC
  # Extract the first word of "gcc", so it can be a program name with args.
set dummy gcc; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_CC"; then
  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CC="gcc"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_CC=$ac_cv_prog_ac_ct_CC
if test -n "$ac_ct_CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
$as_echo "$ac_ct_CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_ct_CC" = x; then
    CC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    CC=$ac_ct_CC
  fi
else
  CC="$ac_cv_prog_CC"
fi

if test -z "$CC"; then
          if test -n "$ac_tool_prefix"; then
    # Extract the first word of "${ac_tool_prefix}cc", so it can be a program name with args.
set dummy ${ac_tool_prefix}cc; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="${ac_tool_prefix}cc"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
$as_echo "$CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  fi
fi
if test -z "$CC"; then
  # Extract the first word of "cc", so it can be a program name with args.
set dummy cc; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
  ac_prog_rejected=no
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    if test "$as_dir/$ac_word$ac_exec_ext" = "/usr/ucb/cc"; then
       ac_prog_rejected=yes
       continue
     fi
    ac_cv_prog_CC="cc"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

if test $ac_prog_rejected = yes; then
  # We found a bogon in the path, so make sure we never use it.
  set dummy $ac_cv_prog_CC
  shift
  if test $@%:@ != 0; then
    # We chose a different compiler from the bogus one.
    # However, it has the same basename, so the bogon will be chosen
    # first if we set CC to just the basename; use the full file name.
    shift
    ac_cv_prog_CC="$as_dir/$ac_word${1+' '}$@"
  fi
fi
fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
$as_echo "$CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$CC"; then
  if test -n "$ac_tool_prefix"; then
  for ac_prog in cl.exe
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
$as_echo "$CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


    test -n "$CC" && break
  done
fi
if test -z "$CC"; then
  ac_ct_CC=$CC
  for ac_prog in cl.exe
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_CC"; then
  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CC="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_CC=$ac_cv_prog_ac_ct_CC
if test -n "$ac_ct_CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
$as_echo "$ac_ct_CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$ac_ct_CC" && break
done

  if test "x$ac_ct_CC" = x; then
    CC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    CC=$ac_ct_CC
  fi
fi

fi


test -z "$CC" && { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "no acceptable C compiler found in \$PATH
See \`config.log' for more details" "$LINENO" 5; }

# Provide some information about the compiler.
$as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler version" >&5
set X $ac_compile
ac_compiler=$2
for ac_option in --version -v -V -qversion; do
  { { ac_try="$ac_compiler $ac_option >&5"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    sed '10a\
... rest of stderr output deleted ...
         10q' conftest.err >conftest.er1
    cat conftest.er1 >&5
  fi
  rm -f conftest.er1 conftest.err
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
done

cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
ac_clean_files_save=$ac_clean_files
ac_clean_files="$ac_clean_files a.out a.out.dSYM a.exe b.out"
# Try to create an executable without -o first, disregard a.out.
# It will help us diagnose broken compilers, and finding out an intuition
# of exeext.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the C compiler works" >&5
$as_echo_n "checking whether the C compiler works... " >&6; }
ac_link_default=`$as_echo "$ac_link" | sed 's/ -o *conftest[^ ]*//'`

# The possible output files:
ac_files="a.out conftest.exe conftest a.exe a_out.exe b.out conftest.*"

ac_rmfiles=
for ac_file in $ac_files
do
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
    * ) ac_rmfiles="$ac_rmfiles $ac_file";;
  esac
done
rm -f $ac_rmfiles

if { { ac_try="$ac_link_default"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link_default") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; then :
  # Autoconf-2.13 could set the ac_cv_exeext variable to `no'.
# So ignore a value of `no', otherwise this would lead to `EXEEXT = no'
# in a Makefile.  We should not override ac_cv_exeext if it was cached,
# so that the user can short-circuit this test for compilers unknown to
# Autoconf.
for ac_file in $ac_files ''
do
  test -f "$ac_file" || continue
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj )
	;;
    [ab].out )
	# We found the default executable, but exeext='' is most
	# certainly right.
	break;;
    *.* )
	if test "${ac_cv_exeext+set}" = set && test "$ac_cv_exeext" != no;
	then :; else
	   ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
	fi
	# We set ac_cv_exeext here because the later test for it is not
	# safe: cross compilers may not add the suffix if given an `-o'
	# argument, so we may need to know it at that point already.
	# Even if this section looks crufty: it has the advantage of
	# actually working.
	break;;
    * )
	break;;
  esac
done
test "$ac_cv_exeext" = no && ac_cv_exeext=

else
  ac_file=''
fi
if test -z "$ac_file"; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
$as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error 77 "C compiler cannot create executables
See \`config.log' for more details" "$LINENO" 5; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler default output file name" >&5
$as_echo_n "checking for C compiler default output file name... " >&6; }
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_file" >&5
$as_echo "$ac_file" >&6; }
ac_exeext=$ac_cv_exeext

rm -f -r a.out a.out.dSYM a.exe conftest$ac_cv_exeext b.out
ac_clean_files=$ac_clean_files_save
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of executables" >&5
$as_echo_n "checking for suffix of executables... " >&6; }
if { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; then :
  # If both `conftest.exe' and `conftest' are `present' (well, observable)
# catch `conftest.exe'.  For instance with Cygwin, `ls conftest' will
# work properly (i.e., refer to `conftest.exe'), while it won't with
# `rm'.
for ac_file in conftest.exe conftest conftest.*; do
  test -f "$ac_file" || continue
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
    *.* ) ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
	  break;;
    * ) break;;
  esac
done
else
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot compute suffix of executables: cannot compile and link
See \`config.log' for more details" "$LINENO" 5; }
fi
rm -f conftest conftest$ac_cv_exeext
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_exeext" >&5
$as_echo "$ac_cv_exeext" >&6; }

rm -f conftest.$ac_ext
EXEEXT=$ac_cv_exeext
ac_exeext=$EXEEXT
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@include <stdio.h>
int
main ()
{
FILE *f = fopen ("conftest.out", "w");
 return ferror (f) || fclose (f) != 0;

  ;
  return 0;
}
_ACEOF
ac_clean_files="$ac_clean_files conftest.out"
# Check that the compiler produces executables we can run.  If not, either
# the compiler is broken, or we cross compile.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are cross compiling" >&5
$as_echo_n "checking whether we are cross compiling... " >&6; }
if test "$cross_compiling" != yes; then
  { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
  if { ac_try='./conftest$ac_cv_exeext'
  { { case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_try") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; }; then
    cross_compiling=no
  else
    if test "$cross_compiling" = maybe; then
	cross_compiling=yes
    else
	{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run C compiled programs.
If you meant to cross compile, use \`--host'.
See \`config.log' for more details" "$LINENO" 5; }
    fi
  fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $cross_compiling" >&5
$as_echo "$cross_compiling" >&6; }

rm -f conftest.$ac_ext conftest$ac_cv_exeext conftest.out
ac_clean_files=$ac_clean_files_save
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of object files" >&5
$as_echo_n "checking for suffix of object files... " >&6; }
if ${ac_cv_objext+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.o conftest.obj
if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; then :
  for ac_file in conftest.o conftest.obj conftest.*; do
  test -f "$ac_file" || continue;
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM ) ;;
    *) ac_cv_objext=`expr "$ac_file" : '.*\.\(.*\)'`
       break;;
  esac
done
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot compute suffix of object files: cannot compile
See \`config.log' for more details" "$LINENO" 5; }
fi
rm -f conftest.$ac_cv_objext conftest.$ac_ext
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_objext" >&5
$as_echo "$ac_cv_objext" >&6; }
OBJEXT=$ac_cv_objext
ac_objext=$OBJEXT
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler" >&5
$as_echo_n "checking whether we are using the GNU C compiler... " >&6; }
if ${ac_cv_c_compiler_gnu+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  ac_compiler_gnu=yes
else
  ac_compiler_gnu=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
ac_cv_c_compiler_gnu=$ac_compiler_gnu

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu" >&5
$as_echo "$ac_cv_c_compiler_gnu" >&6; }
if test $ac_compiler_gnu = yes; then
  GCC=yes
else
  GCC=
fi
ac_test_CFLAGS=${CFLAGS+set}
ac_save_CFLAGS=$CFLAGS
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g" >&5
$as_echo_n "checking whether $CC accepts -g... " >&6; }
if ${ac_cv_prog_cc_g+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_save_c_werror_flag=$ac_c_werror_flag
   ac_c_werror_flag=yes
   ac_cv_prog_cc_g=no
   CFLAGS="-g"
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  ac_cv_prog_cc_g=yes
else
  CFLAGS=""
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  
else
  ac_c_werror_flag=$ac_save_c_werror_flag
	 CFLAGS="-g"
	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  ac_cv_prog_cc_g=yes
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
   ac_c_werror_flag=$ac_save_c_werror_flag
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g" >&5
$as_echo "$ac_cv_prog_cc_g" >&6; }
if test "$ac_test_CFLAGS" = set; then
  CFLAGS=$ac_save_CFLAGS
elif test $ac_cv_prog_cc_g = yes; then
  if test "$GCC" = yes; then
    CFLAGS="-g -O2"
  else
    CFLAGS="-g"
  fi
else
  if test "$GCC" = yes; then
    CFLAGS="-O2"
  else
    CFLAGS=
  fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89" >&5
$as_echo_n "checking for $CC option to accept ISO C89... " >&6; }
if ${ac_cv_prog_cc_c89+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_cv_prog_cc_c89=no
ac_save_CC=$CC
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <stdarg.h>
#include <stdio.h>
struct stat;
/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
struct buf { int x; };
FILE * (*rcsopen) (struct buf *, struct stat *, int);
static char *e (p, i)
     char **p;
     int i;
{
  return p[i];
}
static char *f (char * (*g) (char **, int), char **p, ...)
{
  char *s;
  va_list v;
  va_start (v,p);
  s = g (p, va_arg (v,int));
  va_end (v);
  return s;
}

/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
   function prototypes and stuff, but not '\xHH' hex character constants.
   These don't provoke an error unfortunately, instead are silently treated
   as 'x'.  The following induces an error, until -std is added to get
   proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
   array size at least.  It's necessary to write '\x00'==0 to get something
   that's true only with -std.  */
int osf4_cc_array ['\x00' == 0 ? 1 : -1];

/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
   inside strings and character constants.  */
#define FOO(x) 'x'
int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];

int test (int i, double x);
struct s1 {int (*f) (int a);};
struct s2 {int (*f) (double a);};
int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
int argc;
char **argv;
int
main ()
{
return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
  ;
  return 0;
}
_ACEOF
for ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \
	-Ae "-Aa -D_HPUX_SOURCE" "-Xc -D__EXTENSIONS__"
do
  CC="$ac_save_CC $ac_arg"
  if ac_fn_c_try_compile "$LINENO"; then :
  ac_cv_prog_cc_c89=$ac_arg
fi
rm -f core conftest.err conftest.$ac_objext
  test "x$ac_cv_prog_cc_c89" != "xno" && break
done
rm -f conftest.$ac_ext
CC=$ac_save_CC

fi
# AC_CACHE_VAL
case "x$ac_cv_prog_cc_c89" in
  x)
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: none needed" >&5
$as_echo "none needed" >&6; } ;;
  xno)
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsupported" >&5
$as_echo "unsupported" >&6; } ;;
  *)
    CC="$CC $ac_cv_prog_cc_c89"
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89" >&5
$as_echo "$ac_cv_prog_cc_c89" >&6; } ;;
esac
if test "x$ac_cv_prog_cc_c89" != xno; then :
  
fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

depcc="$CC"   am_compiler_list=

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc" >&5
$as_echo_n "checking dependency style of $depcc... " >&6; }
if ${am_cv_CC_dependencies_compiler_type+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  # We make a subdir and do the tests there.  Otherwise we can end up
  # making bogus files that we don't know about and never remove.  For
  # instance it was reported that on HP-UX the gcc test will end up
  # making a dummy file named 'D' -- because '-MD' means "put the output
  # in D".
  rm -rf conftest.dir
  mkdir conftest.dir
  # Copy depcomp to subdir because otherwise we won't find it if we're
  # using a relative directory.
  cp "$am_depcomp" conftest.dir
  cd conftest.dir
  # We will build objects and dependencies in a subdirectory because
  # it helps to detect inapplicable dependency modes.  For instance
  # both Tru64's cc and ICC support -MD to output dependencies as a
  # side effect of compilation, but ICC will put the dependencies in
  # the current directory while Tru64 will put them in the object
  # directory.
  mkdir sub

  am_cv_CC_dependencies_compiler_type=none
  if test "$am_compiler_list" = ""; then
     am_compiler_list=`sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < ./depcomp`
  fi
  am__universal=false
  case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac

  for depmode in $am_compiler_list; do
    # Setup a source with many dependencies, because some compilers
    # like to wrap large dependency lists on column 80 (with \), and
    # we should not choose a depcomp mode which is confused by this.
    #
    # We need to recreate these files for each test, as the compiler may
    # overwrite some of them when testing with obscure command lines.
    # This happens at least with the AIX C compiler.
    : > sub/conftest.c
    for i in 1 2 3 4 5 6; do
      echo '#include "conftst'$i'.h"' >> sub/conftest.c
      # Using ": > sub/conftst$i.h" creates only sub/conftst1.h with
      # Solaris 10 /bin/sh.
      echo '/* dummy */' > sub/conftst$i.h
    done
    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf

    # We check with '-c' and '-o' for the sake of the "dashmstdout"
    # mode.  It turns out that the SunPro C++ compiler does not properly
    # handle '-M -o', and we need to detect this.  Also, some Intel
    # versions had trouble with output in subdirs.
    am__obj=sub/conftest.${OBJEXT-o}
    am__minus_obj="-o $am__obj"
    case $depmode in
    gcc)
      # This depmode causes a compiler race in universal mode.
      test "$am__universal" = false || continue
      ;;
    nosideeffect)
      # After this tag, mechanisms are not by side-effect, so they'll
      # only be used when explicitly requested.
      if test "x$enable_dependency_tracking" = xyes; then
	continue
      else
	break
      fi
      ;;
    msvc7 | msvc7msys | msvisualcpp | msvcmsys)
      # This compiler won't grok '-c -o', but also, the minuso test has
      # not run yet.  These depmodes are late enough in the game, and
      # so weak that their functioning should not be impacted.
      am__obj=conftest.${OBJEXT-o}
      am__minus_obj=
      ;;
    none) break ;;
    esac
    if depmode=$depmode \
       source=sub/conftest.c object=$am__obj \
       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
         >/dev/null 2>conftest.err &&
       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
      # icc doesn't choke on unknown options, it will just issue warnings
      # or remarks (even with -Werror).  So we grep stderr for any message
      # that says an option was ignored or not supported.
      # When given -MP, icc 7.0 and 7.1 complain thusly:
      #   icc: Command line warning: ignoring option '-M'; no argument required
      # The diagnosis changed in icc 8.0:
      #   icc: Command line remark: option '-MP' not supported
      if (grep 'ignoring option' conftest.err ||
          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
        am_cv_CC_dependencies_compiler_type=$depmode
        break
      fi
    fi
  done

  cd ..
  rm -rf conftest.dir
else
  am_cv_CC_dependencies_compiler_type=none
fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $am_cv_CC_dependencies_compiler_type" >&5
$as_echo "$am_cv_CC_dependencies_compiler_type" >&6; }
CCDEPMODE=depmode=$am_cv_CC_dependencies_compiler_type

 if 
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CC_dependencies_compiler_type" = gcc3; then
  am__fastdepCC_TRUE=
  am__fastdepCC_FALSE='#'
else
  am__fastdepCC_TRUE='#'
  am__fastdepCC_FALSE=
fi


ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to run the C preprocessor" >&5
$as_echo_n "checking how to run the C preprocessor... " >&6; }
# On Suns, sometimes $CPP names a directory.
if test -n "$CPP" && test -d "$CPP"; then
  CPP=
fi
if test -z "$CPP"; then
  if ${ac_cv_prog_CPP+:} false; then :
  $as_echo_n "(cached) " >&6
else
      # Double quotes because CPP needs to be expanded
    for CPP in "$CC -E" "$CC -E -traditional-cpp" "/lib/cpp"
    do
      ac_preproc_ok=false
for ac_c_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
  # <limits.h> exists even on freestanding compilers.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@ifdef __STDC__
@%:@ include <limits.h>
@%:@else
@%:@ include <assert.h>
@%:@endif
		     Syntax error
_ACEOF
if ac_fn_c_try_cpp "$LINENO"; then :
  
else
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.i conftest.$ac_ext

  # OK, works on sane cases.  Now check whether nonexistent headers
  # can be detected and how.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@include <ac_nonexistent.h>
_ACEOF
if ac_fn_c_try_cpp "$LINENO"; then :
  # Broken: success on invalid input.
continue
else
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.i conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.i conftest.err conftest.$ac_ext
if $ac_preproc_ok; then :
  break
fi

    done
    ac_cv_prog_CPP=$CPP
  
fi
  CPP=$ac_cv_prog_CPP
else
  ac_cv_prog_CPP=$CPP
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $CPP" >&5
$as_echo "$CPP" >&6; }
ac_preproc_ok=false
for ac_c_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
  # <limits.h> exists even on freestanding compilers.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@ifdef __STDC__
@%:@ include <limits.h>
@%:@else
@%:@ include <assert.h>
@%:@endif
		     Syntax error
_ACEOF
if ac_fn_c_try_cpp "$LINENO"; then :
  
else
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.i conftest.$ac_ext

  # OK, works on sane cases.  Now check whether nonexistent headers
  # can be detected and how.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@include <ac_nonexistent.h>
_ACEOF
if ac_fn_c_try_cpp "$LINENO"; then :
  # Broken: success on invalid input.
continue
else
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.i conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.i conftest.err conftest.$ac_ext
if $ac_preproc_ok; then :
  
else
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "C preprocessor \"$CPP\" fails sanity check
See \`config.log' for more details" "$LINENO" 5; }
fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu




{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -specs" >&5
$as_echo_n "checking whether $CC accepts -specs... " >&6; }
if ${rtems_cv_gcc_specs+:} false; then :
  $as_echo_n "(cached) " >&6
else
  
rtems_cv_gcc_specs=no
if test x"$GCC" = x"yes"; then
  touch confspec
  echo 'void f(){}' >conftest.c
  if test -z "`${CC} -specs confspec -c conftest.c 2>&1`";then
    rtems_cv_gcc_specs=yes
  fi
fi
rm -f confspec conftest*

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $rtems_cv_gcc_specs" >&5
$as_echo "$rtems_cv_gcc_specs" >&6; }

if test x"$GCC" = xyes; then :
  
GCCSPECS="-B\$(RTEMS_SOURCE_ROOT)/bsps/\$(RTEMS_CPU)/\$(RTEMS_BSP_FAMILY)/start"
if test x"$rtems_cv_gcc_specs" = xyes; then :
  
GCCSPECS="${GCCSPECS} -specs bsp_specs"
fi
GCCSPECS="${GCCSPECS} -qrtems"
fi






# Was CFLAGS set?
rtems_cv_CFLAGS_set="${CFLAGS+set}"

RTEMS_INCLUDE_CPUKIT="-I${RTEMS_SOURCE_ROOT}/cpukit/include"
RTEMS_INCLUDE_CPUKIT_ARCH="-I${RTEMS_SOURCE_ROOT}/cpukit/score/cpu/\$(RTEMS_CPU)/include"

RTEMS_CPUKIT_INCLUDE="${RTEMS_INCLUDE_CPUKIT} ${RTEMS_INCLUDE_CPUKIT_ARCH}"
RTEMS_BUILD_INCLUDE="-I\$(top_builddir) -I${RTEMS_BUILD_ROOT}/include"

RTEMS_INCLUDE="${RTEMS_BUILD_INCLUDE} ${RTEMS_CPUKIT_INCLUDE}"

RTEMS_CPPFLAGS="${RTEMS_INCLUDE}"






RTEMS_BSP_CPPFLAGS="-I${RTEMS_BUILD_ROOT}/lib/libbsp/\$(RTEMS_CPU)/\$(RTEMS_BSP_FAMILY)/include \
-I${RTEMS_SOURCE_ROOT}/bsps/include \
-I${RTEMS_SOURCE_ROOT}/bsps/\$(RTEMS_CPU)/include \
-I${RTEMS_SOURCE_ROOT}/bsps/\$(RTEMS_CPU)/\$(RTEMS_BSP_FAMILY)/include"






{ $as_echo "$as_me:${as_lineno-$LINENO}: checking BSP linkcmds" >&5
$as_echo_n "checking BSP linkcmds... " >&6; }

RTEMS_BSP_ARCH_PATH="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}"
RTEMS_BSP_ARCH_LINKCMDS_PATH="${RTEMS_BSP_ARCH_PATH}/shared/start"
RTEMS_BSP_LIBBSP_PATH="${RTEMS_BUILD_ROOT}/lib/libbsp/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}"










sav_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I${RTEMS_BUILD_ROOT}/include"
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for RTEMS_SMP" >&5
$as_echo_n "checking for RTEMS_SMP... " >&6; }
if ${rtems_cv_RTEMS_SMP+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <rtems/score/cpuopts.h>
#ifndef RTEMS_SMP
choke me
#endif
    
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  rtems_cv_RTEMS_SMP=yes
else
  rtems_cv_RTEMS_SMP=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $rtems_cv_RTEMS_SMP" >&5
$as_echo "$rtems_cv_RTEMS_SMP" >&6; }
CPPFLAGS="$sav_CPPFLAGS"


# If CXXFLAGS is not set, default to CFLAGS
if test x"$rtems_cv_HAS_SMP" = x"yes" ; then
  CXXFLAGS=${CXXFLAGS-${CFLAGS} -std=gnu++11}
else
  CXXFLAGS=${CXXFLAGS-${CFLAGS}}
fi

CXXFLAGS=`echo ${CXXFLAGS} | sed \
  -e s/-Wmissing-prototypes// \
  -e s/-Wimplicit-function-declaration// \
  -e s/-Wstrict-prototypes// \
  -e s/-Wnested-externs//`


  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}g++", so it can be a program name with args.
set dummy ${rtems_tool_prefix}g++; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CXX+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CXX"; then
  ac_cv_prog_CXX="$CXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CXX="${rtems_tool_prefix}g++"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CXX=$ac_cv_prog_CXX
if test -n "$CXX"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXX" >&5
$as_echo "$CXX" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi



if test "$RTEMS_HAS_CPLUSPLUS" = "yes";
then
      if test -z "$CXX";
  then
    RTEMS_HAS_CPLUSPLUS=no
    HAS_CPLUSPLUS=no
    ## Work-around to a bug in automake
     if false; then
  am__fastdepCXX_TRUE=
  am__fastdepCXX_FALSE='#'
else
  am__fastdepCXX_TRUE='#'
  am__fastdepCXX_FALSE=
fi

  else
    ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
if test -z "$CXX"; then
  if test -n "$CCC"; then
    CXX=$CCC
  else
    if test -n "$ac_tool_prefix"; then
  for ac_prog in g++ c++ gpp aCC CC cxx cc++ cl.exe FCC KCC RCC xlC_r xlC
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CXX+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CXX"; then
  ac_cv_prog_CXX="$CXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CXX="$ac_tool_prefix$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CXX=$ac_cv_prog_CXX
if test -n "$CXX"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXX" >&5
$as_echo "$CXX" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


    test -n "$CXX" && break
  done
fi
if test -z "$CXX"; then
  ac_ct_CXX=$CXX
  for ac_prog in g++ c++ gpp aCC CC cxx cc++ cl.exe FCC KCC RCC xlC_r xlC
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_CXX+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_CXX"; then
  ac_cv_prog_ac_ct_CXX="$ac_ct_CXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CXX="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_CXX=$ac_cv_prog_ac_ct_CXX
if test -n "$ac_ct_CXX"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CXX" >&5
$as_echo "$ac_ct_CXX" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$ac_ct_CXX" && break
done

  if test "x$ac_ct_CXX" = x; then
    CXX="g++"
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    CXX=$ac_ct_CXX
  fi
fi

  fi
fi
# Provide some information about the compiler.
$as_echo "$as_me:${as_lineno-$LINENO}: checking for C++ compiler version" >&5
set X $ac_compile
ac_compiler=$2
for ac_option in --version -v -V -qversion; do
  { { ac_try="$ac_compiler $ac_option >&5"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    sed '10a\
... rest of stderr output deleted ...
         10q' conftest.err >conftest.er1
    cat conftest.er1 >&5
  fi
  rm -f conftest.er1 conftest.err
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
done

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C++ compiler" >&5
$as_echo_n "checking whether we are using the GNU C++ compiler... " >&6; }
if ${ac_cv_cxx_compiler_gnu+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_compiler_gnu=yes
else
  ac_compiler_gnu=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
ac_cv_cxx_compiler_gnu=$ac_compiler_gnu

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_cxx_compiler_gnu" >&5
$as_echo "$ac_cv_cxx_compiler_gnu" >&6; }
if test $ac_compiler_gnu = yes; then
  GXX=yes
else
  GXX=
fi
ac_test_CXXFLAGS=${CXXFLAGS+set}
ac_save_CXXFLAGS=$CXXFLAGS
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CXX accepts -g" >&5
$as_echo_n "checking whether $CXX accepts -g... " >&6; }
if ${ac_cv_prog_cxx_g+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_save_cxx_werror_flag=$ac_cxx_werror_flag
   ac_cxx_werror_flag=yes
   ac_cv_prog_cxx_g=no
   CXXFLAGS="-g"
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_cv_prog_cxx_g=yes
else
  CXXFLAGS=""
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  
else
  ac_cxx_werror_flag=$ac_save_cxx_werror_flag
	 CXXFLAGS="-g"
	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_cv_prog_cxx_g=yes
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
   ac_cxx_werror_flag=$ac_save_cxx_werror_flag
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cxx_g" >&5
$as_echo "$ac_cv_prog_cxx_g" >&6; }
if test "$ac_test_CXXFLAGS" = set; then
  CXXFLAGS=$ac_save_CXXFLAGS
elif test $ac_cv_prog_cxx_g = yes; then
  if test "$GXX" = yes; then
    CXXFLAGS="-g -O2"
  else
    CXXFLAGS="-g"
  fi
else
  if test "$GXX" = yes; then
    CXXFLAGS="-O2"
  else
    CXXFLAGS=
  fi
fi
ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

depcc="$CXX"  am_compiler_list=

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc" >&5
$as_echo_n "checking dependency style of $depcc... " >&6; }
if ${am_cv_CXX_dependencies_compiler_type+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  # We make a subdir and do the tests there.  Otherwise we can end up
  # making bogus files that we don't know about and never remove.  For
  # instance it was reported that on HP-UX the gcc test will end up
  # making a dummy file named 'D' -- because '-MD' means "put the output
  # in D".
  rm -rf conftest.dir
  mkdir conftest.dir
  # Copy depcomp to subdir because otherwise we won't find it if we're
  # using a relative directory.
  cp "$am_depcomp" conftest.dir
  cd conftest.dir
  # We will build objects and dependencies in a subdirectory because
  # it helps to detect inapplicable dependency modes.  For instance
  # both Tru64's cc and ICC support -MD to output dependencies as a
  # side effect of compilation, but ICC will put the dependencies in
  # the current directory while Tru64 will put them in the object
  # directory.
  mkdir sub

  am_cv_CXX_dependencies_compiler_type=none
  if test "$am_compiler_list" = ""; then
     am_compiler_list=`sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < ./depcomp`
  fi
  am__universal=false
  case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac

  for depmode in $am_compiler_list; do
    # Setup a source with many dependencies, because some compilers
    # like to wrap large dependency lists on column 80 (with \), and
    # we should not choose a depcomp mode which is confused by this.
    #
    # We need to recreate these files for each test, as the compiler may
    # overwrite some of them when testing with obscure command lines.
    # This happens at least with the AIX C compiler.
    : > sub/conftest.c
    for i in 1 2 3 4 5 6; do
      echo '#include "conftst'$i'.h"' >> sub/conftest.c
      # Using ": > sub/conftst$i.h" creates only sub/conftst1.h with
      # Solaris 10 /bin/sh.
      echo '/* dummy */' > sub/conftst$i.h
    done
    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf

    # We check with '-c' and '-o' for the sake of the "dashmstdout"
    # mode.  It turns out that the SunPro C++ compiler does not properly
    # handle '-M -o', and we need to detect this.  Also, some Intel
    # versions had trouble with output in subdirs.
    am__obj=sub/conftest.${OBJEXT-o}
    am__minus_obj="-o $am__obj"
    case $depmode in
    gcc)
      # This depmode causes a compiler race in universal mode.
      test "$am__universal" = false || continue
      ;;
    nosideeffect)
      # After this tag, mechanisms are not by side-effect, so they'll
      # only be used when explicitly requested.
      if test "x$enable_dependency_tracking" = xyes; then
	continue
      else
	break
      fi
      ;;
    msvc7 | msvc7msys | msvisualcpp | msvcmsys)
      # This compiler won't grok '-c -o', but also, the minuso test has
      # not run yet.  These depmodes are late enough in the game, and
      # so weak that their functioning should not be impacted.
      am__obj=conftest.${OBJEXT-o}
      am__minus_obj=
      ;;
    none) break ;;
    esac
    if depmode=$depmode \
       source=sub/conftest.c object=$am__obj \
       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
         >/dev/null 2>conftest.err &&
       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
      # icc doesn't choke on unknown options, it will just issue warnings
      # or remarks (even with -Werror).  So we grep stderr for any message
      # that says an option was ignored or not supported.
      # When given -MP, icc 7.0 and 7.1 complain thusly:
      #   icc: Command line warning: ignoring option '-M'; no argument required
      # The diagnosis changed in icc 8.0:
      #   icc: Command line remark: option '-MP' not supported
      if (grep 'ignoring option' conftest.err ||
          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
        am_cv_CXX_dependencies_compiler_type=$depmode
        break
      fi
    fi
  done

  cd ..
  rm -rf conftest.dir
else
  am_cv_CXX_dependencies_compiler_type=none
fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $am_cv_CXX_dependencies_compiler_type" >&5
$as_echo "$am_cv_CXX_dependencies_compiler_type" >&6; }
CXXDEPMODE=depmode=$am_cv_CXX_dependencies_compiler_type

 if 
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CXX_dependencies_compiler_type" = gcc3; then
  am__fastdepCXX_TRUE=
  am__fastdepCXX_FALSE='#'
else
  am__fastdepCXX_TRUE='#'
  am__fastdepCXX_FALSE=
fi


    ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to run the C++ preprocessor" >&5
$as_echo_n "checking how to run the C++ preprocessor... " >&6; }
if test -z "$CXXCPP"; then
  if ${ac_cv_prog_CXXCPP+:} false; then :
  $as_echo_n "(cached) " >&6
else
      # Double quotes because CXXCPP needs to be expanded
    for CXXCPP in "$CXX -E" "/lib/cpp"
    do
      ac_preproc_ok=false
for ac_cxx_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
  # <limits.h> exists even on freestanding compilers.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@ifdef __STDC__
@%:@ include <limits.h>
@%:@else
@%:@ include <assert.h>
@%:@endif
		     Syntax error
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  
else
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.i conftest.$ac_ext

  # OK, works on sane cases.  Now check whether nonexistent headers
  # can be detected and how.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@include <ac_nonexistent.h>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  # Broken: success on invalid input.
continue
else
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.i conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.i conftest.err conftest.$ac_ext
if $ac_preproc_ok; then :
  break
fi

    done
    ac_cv_prog_CXXCPP=$CXXCPP
  
fi
  CXXCPP=$ac_cv_prog_CXXCPP
else
  ac_cv_prog_CXXCPP=$CXXCPP
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXXCPP" >&5
$as_echo "$CXXCPP" >&6; }
ac_preproc_ok=false
for ac_cxx_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
  # <limits.h> exists even on freestanding compilers.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@ifdef __STDC__
@%:@ include <limits.h>
@%:@else
@%:@ include <assert.h>
@%:@endif
		     Syntax error
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  
else
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.i conftest.$ac_ext

  # OK, works on sane cases.  Now check whether nonexistent headers
  # can be detected and how.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
@%:@include <ac_nonexistent.h>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  # Broken: success on invalid input.
continue
else
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.i conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.i conftest.err conftest.$ac_ext
if $ac_preproc_ok; then :
  
else
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "C++ preprocessor \"$CXXCPP\" fails sanity check
See \`config.log' for more details" "$LINENO" 5; }
fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

    if test "$ac_cv_prog_cc_cross" != "$ac_cv_prog_cxx_cross"; then
      as_fn_error $? "***
       Inconsistency in compiler configuration:
       Target C compiler and target C++ compiler
       must both either be cross compilers or native compilers" "$LINENO" 5
    fi
  fi
else
  ## Work-around to a bug in automake
   if false; then
  am__fastdepCXX_TRUE=
  am__fastdepCXX_FALSE='#'
else
  am__fastdepCXX_TRUE='#'
  am__fastdepCXX_FALSE=
fi

fi



  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}ar", so it can be a program name with args.
set dummy ${rtems_tool_prefix}ar; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_AR+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$AR"; then
  ac_cv_prog_AR="$AR" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_AR="${rtems_tool_prefix}ar"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_AR" && ac_cv_prog_AR="no"
fi
fi
AR=$ac_cv_prog_AR
if test -n "$AR"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $AR" >&5
$as_echo "$AR" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi



  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}as", so it can be a program name with args.
set dummy ${rtems_tool_prefix}as; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_AS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$AS"; then
  ac_cv_prog_AS="$AS" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_AS="${rtems_tool_prefix}as"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_AS" && ac_cv_prog_AS="no"
fi
fi
AS=$ac_cv_prog_AS
if test -n "$AS"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $AS" >&5
$as_echo "$AS" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi



  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}ld", so it can be a program name with args.
set dummy ${rtems_tool_prefix}ld; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_LD+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$LD"; then
  ac_cv_prog_LD="$LD" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_LD="${rtems_tool_prefix}ld"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_LD" && ac_cv_prog_LD="no"
fi
fi
LD=$ac_cv_prog_LD
if test -n "$LD"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $LD" >&5
$as_echo "$LD" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi



  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}nm", so it can be a program name with args.
set dummy ${rtems_tool_prefix}nm; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_NM+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$NM"; then
  ac_cv_prog_NM="$NM" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_NM="${rtems_tool_prefix}nm"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_NM" && ac_cv_prog_NM="no"
fi
fi
NM=$ac_cv_prog_NM
if test -n "$NM"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $NM" >&5
$as_echo "$NM" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi




  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}ranlib", so it can be a program name with args.
set dummy ${rtems_tool_prefix}ranlib; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_RANLIB+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$RANLIB"; then
  ac_cv_prog_RANLIB="$RANLIB" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_RANLIB="${rtems_tool_prefix}ranlib"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_RANLIB" && ac_cv_prog_RANLIB=":"
fi
fi
RANLIB=$ac_cv_prog_RANLIB
if test -n "$RANLIB"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $RANLIB" >&5
$as_echo "$RANLIB" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi




  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}objcopy", so it can be a program name with args.
set dummy ${rtems_tool_prefix}objcopy; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_OBJCOPY+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$OBJCOPY"; then
  ac_cv_prog_OBJCOPY="$OBJCOPY" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_OBJCOPY="${rtems_tool_prefix}objcopy"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_OBJCOPY" && ac_cv_prog_OBJCOPY="no"
fi
fi
OBJCOPY=$ac_cv_prog_OBJCOPY
if test -n "$OBJCOPY"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OBJCOPY" >&5
$as_echo "$OBJCOPY" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi



  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}size", so it can be a program name with args.
set dummy ${rtems_tool_prefix}size; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_SIZE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$SIZE"; then
  ac_cv_prog_SIZE="$SIZE" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_SIZE="${rtems_tool_prefix}size"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_SIZE" && ac_cv_prog_SIZE="no"
fi
fi
SIZE=$ac_cv_prog_SIZE
if test -n "$SIZE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $SIZE" >&5
$as_echo "$SIZE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi



  
  if test "x$build_alias" != "x$host_alias"; then :
  rtems_tool_prefix=${ac_tool_prefix}
fi
  # Extract the first word of "${rtems_tool_prefix}strip", so it can be a program name with args.
set dummy ${rtems_tool_prefix}strip; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_STRIP+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$STRIP"; then
  ac_cv_prog_STRIP="$STRIP" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_STRIP="${rtems_tool_prefix}strip"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  test -z "$ac_cv_prog_STRIP" && ac_cv_prog_STRIP=":"
fi
fi
STRIP=$ac_cv_prog_STRIP
if test -n "$STRIP"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $STRIP" >&5
$as_echo "$STRIP" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi






  
  for i in ${rtems_rootdir}make/custom/$RTEMS_BSP.cfg;
  do
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $i" >&5
$as_echo_n "checking for $i... " >&6; }
    if test -r $i; then :
  
      BSP_FOUND="$i"
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }
      break;
    
else
  
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
    
fi
  done

  if test -z "$BSP_FOUND"; then :
  
    as_fn_error $? "missing $RTEMS_BSP.cfg" "$LINENO" 5
  
fi

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to build rtems++" >&5
$as_echo_n "checking whether to build rtems++... " >&6; }
if ${rtems_cv_HAS_CPLUSPLUS+:} false; then :
  $as_echo_n "(cached) " >&6
else
   if test "$RTEMS_HAS_CPLUSPLUS" = "yes"; then
      if test -n "$CXX"; then
        rtems_cv_HAS_CPLUSPLUS="yes"
      else
        rtems_cv_HAS_CPLUSPLUS="no"
      fi
    else
      rtems_cv_HAS_CPLUSPLUS="no"
    fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $rtems_cv_HAS_CPLUSPLUS" >&5
$as_echo "$rtems_cv_HAS_CPLUSPLUS" >&6; }
HAS_CPLUSPLUS="$rtems_cv_HAS_CPLUSPLUS";


 if test $HAS_CPLUSPLUS = "yes"; then
  HAS_CPLUSPLUS_TRUE=
  HAS_CPLUSPLUS_FALSE='#'
else
  HAS_CPLUSPLUS_TRUE='#'
  HAS_CPLUSPLUS_FALSE=
fi


# Some tests should not be built/run in SMP configurations


sav_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I${RTEMS_BUILD_ROOT}/include"
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for RTEMS_SMP" >&5
$as_echo_n "checking for RTEMS_SMP... " >&6; }
if ${rtems_cv_RTEMS_SMP+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <rtems/score/cpuopts.h>
#ifndef RTEMS_SMP
choke me
#endif
    
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  rtems_cv_RTEMS_SMP=yes
else
  rtems_cv_RTEMS_SMP=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $rtems_cv_RTEMS_SMP" >&5
$as_echo "$rtems_cv_RTEMS_SMP" >&6; }
CPPFLAGS="$sav_CPPFLAGS"

 if test "$rtems_cv_RTEMS_SMP" != "yes"; then
  NO_SMP_TRUE=
  NO_SMP_FALSE='#'
else
  NO_SMP_TRUE='#'
  NO_SMP_FALSE=
fi

 if test "$rtems_cv_RTEMS_SMP" = "yes"; then
  HAS_SMP_TRUE=
  HAS_SMP_FALSE='#'
else
  HAS_SMP_TRUE='#'
  HAS_SMP_FALSE=
fi


# BSP Test configuration

 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp01`
 else
  check_result=sp01
 fi
 if test "sp01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp01_TRUE=
  TEST_sp01_FALSE='#'
else
  TEST_sp01_TRUE='#'
  TEST_sp01_FALSE=
fi

 TEST_FLAGS_sp01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp02`
 else
  check_result=sp02
 fi
 if test "sp02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp02_TRUE=
  TEST_sp02_FALSE='#'
else
  TEST_sp02_TRUE='#'
  TEST_sp02_FALSE=
fi

 TEST_FLAGS_sp02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp03`
 else
  check_result=sp03
 fi
 if test "sp03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp03_TRUE=
  TEST_sp03_FALSE='#'
else
  TEST_sp03_TRUE='#'
  TEST_sp03_FALSE=
fi

 TEST_FLAGS_sp03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp04`
 else
  check_result=sp04
 fi
 if test "sp04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp04_TRUE=
  TEST_sp04_FALSE='#'
else
  TEST_sp04_TRUE='#'
  TEST_sp04_FALSE=
fi

 TEST_FLAGS_sp04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp05 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp05 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp05`
 else
  check_result=sp05
 fi
 if test "sp05" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp05`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp05_TRUE=
  TEST_sp05_FALSE='#'
else
  TEST_sp05_TRUE='#'
  TEST_sp05_FALSE=
fi

 TEST_FLAGS_sp05=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp06 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp06 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp06`
 else
  check_result=sp06
 fi
 if test "sp06" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp06`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp06_TRUE=
  TEST_sp06_FALSE='#'
else
  TEST_sp06_TRUE='#'
  TEST_sp06_FALSE=
fi

 TEST_FLAGS_sp06=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp07 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp07 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp07`
 else
  check_result=sp07
 fi
 if test "sp07" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp07`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp07_TRUE=
  TEST_sp07_FALSE='#'
else
  TEST_sp07_TRUE='#'
  TEST_sp07_FALSE=
fi

 TEST_FLAGS_sp07=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp08 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp08 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp08`
 else
  check_result=sp08
 fi
 if test "sp08" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp08`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp08_TRUE=
  TEST_sp08_FALSE='#'
else
  TEST_sp08_TRUE='#'
  TEST_sp08_FALSE=
fi

 TEST_FLAGS_sp08=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp11 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp11 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp11`
 else
  check_result=sp11
 fi
 if test "sp11" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp11`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp11_TRUE=
  TEST_sp11_FALSE='#'
else
  TEST_sp11_TRUE='#'
  TEST_sp11_FALSE=
fi

 TEST_FLAGS_sp11=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp12 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp12 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp12`
 else
  check_result=sp12
 fi
 if test "sp12" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp12`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp12_TRUE=
  TEST_sp12_FALSE='#'
else
  TEST_sp12_TRUE='#'
  TEST_sp12_FALSE=
fi

 TEST_FLAGS_sp12=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp13 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp13 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp13`
 else
  check_result=sp13
 fi
 if test "sp13" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp13`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp13_TRUE=
  TEST_sp13_FALSE='#'
else
  TEST_sp13_TRUE='#'
  TEST_sp13_FALSE=
fi

 TEST_FLAGS_sp13=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp14 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp14 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp14`
 else
  check_result=sp14
 fi
 if test "sp14" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp14`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp14_TRUE=
  TEST_sp14_FALSE='#'
else
  TEST_sp14_TRUE='#'
  TEST_sp14_FALSE=
fi

 TEST_FLAGS_sp14=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp15 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp15 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp15`
 else
  check_result=sp15
 fi
 if test "sp15" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp15`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp15_TRUE=
  TEST_sp15_FALSE='#'
else
  TEST_sp15_TRUE='#'
  TEST_sp15_FALSE=
fi

 TEST_FLAGS_sp15=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp16 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp16 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp16`
 else
  check_result=sp16
 fi
 if test "sp16" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp16`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp16_TRUE=
  TEST_sp16_FALSE='#'
else
  TEST_sp16_TRUE='#'
  TEST_sp16_FALSE=
fi

 TEST_FLAGS_sp16=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp17 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp17 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp17`
 else
  check_result=sp17
 fi
 if test "sp17" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp17`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp17_TRUE=
  TEST_sp17_FALSE='#'
else
  TEST_sp17_TRUE='#'
  TEST_sp17_FALSE=
fi

 TEST_FLAGS_sp17=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp18 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp18 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp18`
 else
  check_result=sp18
 fi
 if test "sp18" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp18`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp18_TRUE=
  TEST_sp18_FALSE='#'
else
  TEST_sp18_TRUE='#'
  TEST_sp18_FALSE=
fi

 TEST_FLAGS_sp18=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp19 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp19 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp19`
 else
  check_result=sp19
 fi
 if test "sp19" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp19`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp19_TRUE=
  TEST_sp19_FALSE='#'
else
  TEST_sp19_TRUE='#'
  TEST_sp19_FALSE=
fi

 TEST_FLAGS_sp19=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp20 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp20 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp20`
 else
  check_result=sp20
 fi
 if test "sp20" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp20`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp20_TRUE=
  TEST_sp20_FALSE='#'
else
  TEST_sp20_TRUE='#'
  TEST_sp20_FALSE=
fi

 TEST_FLAGS_sp20=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp2038 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp2038 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp2038`
 else
  check_result=sp2038
 fi
 if test "sp2038" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp2038`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp2038_TRUE=
  TEST_sp2038_FALSE='#'
else
  TEST_sp2038_TRUE='#'
  TEST_sp2038_FALSE=
fi

 TEST_FLAGS_sp2038=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp21 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp21 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp21`
 else
  check_result=sp21
 fi
 if test "sp21" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp21`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp21_TRUE=
  TEST_sp21_FALSE='#'
else
  TEST_sp21_TRUE='#'
  TEST_sp21_FALSE=
fi

 TEST_FLAGS_sp21=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp22 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp22 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp22`
 else
  check_result=sp22
 fi
 if test "sp22" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp22`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp22_TRUE=
  TEST_sp22_FALSE='#'
else
  TEST_sp22_TRUE='#'
  TEST_sp22_FALSE=
fi

 TEST_FLAGS_sp22=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp23 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp23 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp23`
 else
  check_result=sp23
 fi
 if test "sp23" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp23`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp23_TRUE=
  TEST_sp23_FALSE='#'
else
  TEST_sp23_TRUE='#'
  TEST_sp23_FALSE=
fi

 TEST_FLAGS_sp23=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp24 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp24 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp24`
 else
  check_result=sp24
 fi
 if test "sp24" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp24`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp24_TRUE=
  TEST_sp24_FALSE='#'
else
  TEST_sp24_TRUE='#'
  TEST_sp24_FALSE=
fi

 TEST_FLAGS_sp24=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp25 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp25 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp25`
 else
  check_result=sp25
 fi
 if test "sp25" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp25`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp25_TRUE=
  TEST_sp25_FALSE='#'
else
  TEST_sp25_TRUE='#'
  TEST_sp25_FALSE=
fi

 TEST_FLAGS_sp25=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp26 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp26 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp26`
 else
  check_result=sp26
 fi
 if test "sp26" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp26`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp26_TRUE=
  TEST_sp26_FALSE='#'
else
  TEST_sp26_TRUE='#'
  TEST_sp26_FALSE=
fi

 TEST_FLAGS_sp26=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp27 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp27 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp27`
 else
  check_result=sp27
 fi
 if test "sp27" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp27`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp27_TRUE=
  TEST_sp27_FALSE='#'
else
  TEST_sp27_TRUE='#'
  TEST_sp27_FALSE=
fi

 TEST_FLAGS_sp27=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp27a test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp27a test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp27a`
 else
  check_result=sp27a
 fi
 if test "sp27a" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp27a`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp27a_TRUE=
  TEST_sp27a_FALSE='#'
else
  TEST_sp27a_TRUE='#'
  TEST_sp27a_FALSE=
fi

 TEST_FLAGS_sp27a=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp29 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp29 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp29`
 else
  check_result=sp29
 fi
 if test "sp29" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp29`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp29_TRUE=
  TEST_sp29_FALSE='#'
else
  TEST_sp29_TRUE='#'
  TEST_sp29_FALSE=
fi

 TEST_FLAGS_sp29=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp30 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp30 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp30`
 else
  check_result=sp30
 fi
 if test "sp30" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp30`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp30_TRUE=
  TEST_sp30_FALSE='#'
else
  TEST_sp30_TRUE='#'
  TEST_sp30_FALSE=
fi

 TEST_FLAGS_sp30=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp31 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp31 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp31`
 else
  check_result=sp31
 fi
 if test "sp31" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp31`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp31_TRUE=
  TEST_sp31_FALSE='#'
else
  TEST_sp31_TRUE='#'
  TEST_sp31_FALSE=
fi

 TEST_FLAGS_sp31=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp32 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp32 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp32`
 else
  check_result=sp32
 fi
 if test "sp32" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp32`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp32_TRUE=
  TEST_sp32_FALSE='#'
else
  TEST_sp32_TRUE='#'
  TEST_sp32_FALSE=
fi

 TEST_FLAGS_sp32=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp33 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp33 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp33`
 else
  check_result=sp33
 fi
 if test "sp33" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp33`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp33_TRUE=
  TEST_sp33_FALSE='#'
else
  TEST_sp33_TRUE='#'
  TEST_sp33_FALSE=
fi

 TEST_FLAGS_sp33=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp34 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp34 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp34`
 else
  check_result=sp34
 fi
 if test "sp34" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp34`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp34_TRUE=
  TEST_sp34_FALSE='#'
else
  TEST_sp34_TRUE='#'
  TEST_sp34_FALSE=
fi

 TEST_FLAGS_sp34=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp35 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp35 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp35`
 else
  check_result=sp35
 fi
 if test "sp35" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp35`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp35_TRUE=
  TEST_sp35_FALSE='#'
else
  TEST_sp35_TRUE='#'
  TEST_sp35_FALSE=
fi

 TEST_FLAGS_sp35=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp37 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp37 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp37`
 else
  check_result=sp37
 fi
 if test "sp37" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp37`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp37_TRUE=
  TEST_sp37_FALSE='#'
else
  TEST_sp37_TRUE='#'
  TEST_sp37_FALSE=
fi

 TEST_FLAGS_sp37=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp38 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp38 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp38`
 else
  check_result=sp38
 fi
 if test "sp38" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp38`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp38_TRUE=
  TEST_sp38_FALSE='#'
else
  TEST_sp38_TRUE='#'
  TEST_sp38_FALSE=
fi

 TEST_FLAGS_sp38=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp40 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp40 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp40`
 else
  check_result=sp40
 fi
 if test "sp40" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp40`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp40_TRUE=
  TEST_sp40_FALSE='#'
else
  TEST_sp40_TRUE='#'
  TEST_sp40_FALSE=
fi

 TEST_FLAGS_sp40=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp41 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp41 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp41`
 else
  check_result=sp41
 fi
 if test "sp41" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp41`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp41_TRUE=
  TEST_sp41_FALSE='#'
else
  TEST_sp41_TRUE='#'
  TEST_sp41_FALSE=
fi

 TEST_FLAGS_sp41=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp42 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp42 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp42`
 else
  check_result=sp42
 fi
 if test "sp42" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp42`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp42_TRUE=
  TEST_sp42_FALSE='#'
else
  TEST_sp42_TRUE='#'
  TEST_sp42_FALSE=
fi

 TEST_FLAGS_sp42=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp43 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp43 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp43`
 else
  check_result=sp43
 fi
 if test "sp43" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp43`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp43_TRUE=
  TEST_sp43_FALSE='#'
else
  TEST_sp43_TRUE='#'
  TEST_sp43_FALSE=
fi

 TEST_FLAGS_sp43=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp44 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp44 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp44`
 else
  check_result=sp44
 fi
 if test "sp44" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp44`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp44_TRUE=
  TEST_sp44_FALSE='#'
else
  TEST_sp44_TRUE='#'
  TEST_sp44_FALSE=
fi

 TEST_FLAGS_sp44=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp45 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp45 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp45`
 else
  check_result=sp45
 fi
 if test "sp45" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp45`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp45_TRUE=
  TEST_sp45_FALSE='#'
else
  TEST_sp45_TRUE='#'
  TEST_sp45_FALSE=
fi

 TEST_FLAGS_sp45=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp46 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp46 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp46`
 else
  check_result=sp46
 fi
 if test "sp46" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp46`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp46_TRUE=
  TEST_sp46_FALSE='#'
else
  TEST_sp46_TRUE='#'
  TEST_sp46_FALSE=
fi

 TEST_FLAGS_sp46=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp47 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp47 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp47`
 else
  check_result=sp47
 fi
 if test "sp47" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp47`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp47_TRUE=
  TEST_sp47_FALSE='#'
else
  TEST_sp47_TRUE='#'
  TEST_sp47_FALSE=
fi

 TEST_FLAGS_sp47=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp48 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp48 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp48`
 else
  check_result=sp48
 fi
 if test "sp48" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp48`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp48_TRUE=
  TEST_sp48_FALSE='#'
else
  TEST_sp48_TRUE='#'
  TEST_sp48_FALSE=
fi

 TEST_FLAGS_sp48=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp49 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp49 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp49`
 else
  check_result=sp49
 fi
 if test "sp49" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp49`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp49_TRUE=
  TEST_sp49_FALSE='#'
else
  TEST_sp49_TRUE='#'
  TEST_sp49_FALSE=
fi

 TEST_FLAGS_sp49=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp50 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp50 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp50`
 else
  check_result=sp50
 fi
 if test "sp50" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp50`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp50_TRUE=
  TEST_sp50_FALSE='#'
else
  TEST_sp50_TRUE='#'
  TEST_sp50_FALSE=
fi

 TEST_FLAGS_sp50=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp51 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp51 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp51`
 else
  check_result=sp51
 fi
 if test "sp51" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp51`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp51_TRUE=
  TEST_sp51_FALSE='#'
else
  TEST_sp51_TRUE='#'
  TEST_sp51_FALSE=
fi

 TEST_FLAGS_sp51=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp52 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp52 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp52`
 else
  check_result=sp52
 fi
 if test "sp52" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp52`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp52_TRUE=
  TEST_sp52_FALSE='#'
else
  TEST_sp52_TRUE='#'
  TEST_sp52_FALSE=
fi

 TEST_FLAGS_sp52=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp53 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp53 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp53`
 else
  check_result=sp53
 fi
 if test "sp53" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp53`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp53_TRUE=
  TEST_sp53_FALSE='#'
else
  TEST_sp53_TRUE='#'
  TEST_sp53_FALSE=
fi

 TEST_FLAGS_sp53=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp54 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp54 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp54`
 else
  check_result=sp54
 fi
 if test "sp54" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp54`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp54_TRUE=
  TEST_sp54_FALSE='#'
else
  TEST_sp54_TRUE='#'
  TEST_sp54_FALSE=
fi

 TEST_FLAGS_sp54=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp55 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp55 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp55`
 else
  check_result=sp55
 fi
 if test "sp55" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp55`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp55_TRUE=
  TEST_sp55_FALSE='#'
else
  TEST_sp55_TRUE='#'
  TEST_sp55_FALSE=
fi

 TEST_FLAGS_sp55=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp56 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp56 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp56`
 else
  check_result=sp56
 fi
 if test "sp56" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp56`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp56_TRUE=
  TEST_sp56_FALSE='#'
else
  TEST_sp56_TRUE='#'
  TEST_sp56_FALSE=
fi

 TEST_FLAGS_sp56=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp57 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp57 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp57`
 else
  check_result=sp57
 fi
 if test "sp57" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp57`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp57_TRUE=
  TEST_sp57_FALSE='#'
else
  TEST_sp57_TRUE='#'
  TEST_sp57_FALSE=
fi

 TEST_FLAGS_sp57=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp58 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp58 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp58`
 else
  check_result=sp58
 fi
 if test "sp58" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp58`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp58_TRUE=
  TEST_sp58_FALSE='#'
else
  TEST_sp58_TRUE='#'
  TEST_sp58_FALSE=
fi

 TEST_FLAGS_sp58=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp59 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp59 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp59`
 else
  check_result=sp59
 fi
 if test "sp59" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp59`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp59_TRUE=
  TEST_sp59_FALSE='#'
else
  TEST_sp59_TRUE='#'
  TEST_sp59_FALSE=
fi

 TEST_FLAGS_sp59=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp60 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp60 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp60`
 else
  check_result=sp60
 fi
 if test "sp60" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp60`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp60_TRUE=
  TEST_sp60_FALSE='#'
else
  TEST_sp60_TRUE='#'
  TEST_sp60_FALSE=
fi

 TEST_FLAGS_sp60=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp62 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp62 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp62`
 else
  check_result=sp62
 fi
 if test "sp62" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp62`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp62_TRUE=
  TEST_sp62_FALSE='#'
else
  TEST_sp62_TRUE='#'
  TEST_sp62_FALSE=
fi

 TEST_FLAGS_sp62=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp63 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp63 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp63`
 else
  check_result=sp63
 fi
 if test "sp63" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp63`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp63_TRUE=
  TEST_sp63_FALSE='#'
else
  TEST_sp63_TRUE='#'
  TEST_sp63_FALSE=
fi

 TEST_FLAGS_sp63=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp64 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp64 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp64`
 else
  check_result=sp64
 fi
 if test "sp64" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp64`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp64_TRUE=
  TEST_sp64_FALSE='#'
else
  TEST_sp64_TRUE='#'
  TEST_sp64_FALSE=
fi

 TEST_FLAGS_sp64=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp65 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp65 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp65`
 else
  check_result=sp65
 fi
 if test "sp65" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp65`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp65_TRUE=
  TEST_sp65_FALSE='#'
else
  TEST_sp65_TRUE='#'
  TEST_sp65_FALSE=
fi

 TEST_FLAGS_sp65=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp66 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp66 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp66`
 else
  check_result=sp66
 fi
 if test "sp66" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp66`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp66_TRUE=
  TEST_sp66_FALSE='#'
else
  TEST_sp66_TRUE='#'
  TEST_sp66_FALSE=
fi

 TEST_FLAGS_sp66=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp67 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp67 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp67`
 else
  check_result=sp67
 fi
 if test "sp67" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp67`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp67_TRUE=
  TEST_sp67_FALSE='#'
else
  TEST_sp67_TRUE='#'
  TEST_sp67_FALSE=
fi

 TEST_FLAGS_sp67=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp68 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp68 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp68`
 else
  check_result=sp68
 fi
 if test "sp68" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp68`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp68_TRUE=
  TEST_sp68_FALSE='#'
else
  TEST_sp68_TRUE='#'
  TEST_sp68_FALSE=
fi

 TEST_FLAGS_sp68=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp69 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp69 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp69`
 else
  check_result=sp69
 fi
 if test "sp69" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp69`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp69_TRUE=
  TEST_sp69_FALSE='#'
else
  TEST_sp69_TRUE='#'
  TEST_sp69_FALSE=
fi

 TEST_FLAGS_sp69=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp70 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp70 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp70`
 else
  check_result=sp70
 fi
 if test "sp70" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp70`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp70_TRUE=
  TEST_sp70_FALSE='#'
else
  TEST_sp70_TRUE='#'
  TEST_sp70_FALSE=
fi

 TEST_FLAGS_sp70=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp71 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp71 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp71`
 else
  check_result=sp71
 fi
 if test "sp71" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp71`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp71_TRUE=
  TEST_sp71_FALSE='#'
else
  TEST_sp71_TRUE='#'
  TEST_sp71_FALSE=
fi

 TEST_FLAGS_sp71=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp72 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp72 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp72`
 else
  check_result=sp72
 fi
 if test "sp72" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp72`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp72_TRUE=
  TEST_sp72_FALSE='#'
else
  TEST_sp72_TRUE='#'
  TEST_sp72_FALSE=
fi

 TEST_FLAGS_sp72=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp73 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp73 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp73`
 else
  check_result=sp73
 fi
 if test "sp73" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp73`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp73_TRUE=
  TEST_sp73_FALSE='#'
else
  TEST_sp73_TRUE='#'
  TEST_sp73_FALSE=
fi

 TEST_FLAGS_sp73=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp74 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp74 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp74`
 else
  check_result=sp74
 fi
 if test "sp74" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp74`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp74_TRUE=
  TEST_sp74_FALSE='#'
else
  TEST_sp74_TRUE='#'
  TEST_sp74_FALSE=
fi

 TEST_FLAGS_sp74=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp75 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp75 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp75`
 else
  check_result=sp75
 fi
 if test "sp75" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp75`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp75_TRUE=
  TEST_sp75_FALSE='#'
else
  TEST_sp75_TRUE='#'
  TEST_sp75_FALSE=
fi

 TEST_FLAGS_sp75=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp76 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp76 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp76`
 else
  check_result=sp76
 fi
 if test "sp76" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp76`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp76_TRUE=
  TEST_sp76_FALSE='#'
else
  TEST_sp76_TRUE='#'
  TEST_sp76_FALSE=
fi

 TEST_FLAGS_sp76=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sp77 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sp77 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sp77`
 else
  check_result=sp77
 fi
 if test "sp77" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sp77`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sp77_TRUE=
  TEST_sp77_FALSE='#'
else
  TEST_sp77_TRUE='#'
  TEST_sp77_FALSE=
fi

 TEST_FLAGS_sp77=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spassoc01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spassoc01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spassoc01`
 else
  check_result=spassoc01
 fi
 if test "spassoc01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spassoc01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spassoc01_TRUE=
  TEST_spassoc01_FALSE='#'
else
  TEST_spassoc01_TRUE='#'
  TEST_spassoc01_FALSE=
fi

 TEST_FLAGS_spassoc01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spatomic01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spatomic01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spatomic01`
 else
  check_result=spatomic01
 fi
 if test "spatomic01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spatomic01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spatomic01_TRUE=
  TEST_spatomic01_FALSE='#'
else
  TEST_spatomic01_TRUE='#'
  TEST_spatomic01_FALSE=
fi

 TEST_FLAGS_spatomic01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcache01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcache01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcache01`
 else
  check_result=spcache01
 fi
 if test "spcache01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcache01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcache01_TRUE=
  TEST_spcache01_FALSE='#'
else
  TEST_spcache01_TRUE='#'
  TEST_spcache01_FALSE=
fi

 TEST_FLAGS_spcache01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcbssched01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcbssched01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcbssched01`
 else
  check_result=spcbssched01
 fi
 if test "spcbssched01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcbssched01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcbssched01_TRUE=
  TEST_spcbssched01_FALSE='#'
else
  TEST_spcbssched01_TRUE='#'
  TEST_spcbssched01_FALSE=
fi

 TEST_FLAGS_spcbssched01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcbssched02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcbssched02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcbssched02`
 else
  check_result=spcbssched02
 fi
 if test "spcbssched02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcbssched02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcbssched02_TRUE=
  TEST_spcbssched02_FALSE='#'
else
  TEST_spcbssched02_TRUE='#'
  TEST_spcbssched02_FALSE=
fi

 TEST_FLAGS_spcbssched02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcbssched03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcbssched03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcbssched03`
 else
  check_result=spcbssched03
 fi
 if test "spcbssched03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcbssched03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcbssched03_TRUE=
  TEST_spcbssched03_FALSE='#'
else
  TEST_spcbssched03_TRUE='#'
  TEST_spcbssched03_FALSE=
fi

 TEST_FLAGS_spcbssched03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spchain test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spchain test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spchain`
 else
  check_result=spchain
 fi
 if test "spchain" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spchain`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spchain_TRUE=
  TEST_spchain_FALSE='#'
else
  TEST_spchain_TRUE='#'
  TEST_spchain_FALSE=
fi

 TEST_FLAGS_spchain=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spclock_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spclock_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spclock_err01`
 else
  check_result=spclock_err01
 fi
 if test "spclock_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spclock_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spclock_err01_TRUE=
  TEST_spclock_err01_FALSE='#'
else
  TEST_spclock_err01_TRUE='#'
  TEST_spclock_err01_FALSE=
fi

 TEST_FLAGS_spclock_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spclock_err02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spclock_err02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spclock_err02`
 else
  check_result=spclock_err02
 fi
 if test "spclock_err02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spclock_err02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spclock_err02_TRUE=
  TEST_spclock_err02_FALSE='#'
else
  TEST_spclock_err02_TRUE='#'
  TEST_spclock_err02_FALSE=
fi

 TEST_FLAGS_spclock_err02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spclock_todhook01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spclock_todhook01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spclock_todhook01`
 else
  check_result=spclock_todhook01
 fi
 if test "spclock_todhook01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spclock_todhook01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spclock_todhook01_TRUE=
  TEST_spclock_todhook01_FALSE='#'
else
  TEST_spclock_todhook01_TRUE='#'
  TEST_spclock_todhook01_FALSE=
fi

 TEST_FLAGS_spclock_todhook01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spconfig01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spconfig01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spconfig01`
 else
  check_result=spconfig01
 fi
 if test "spconfig01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spconfig01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spconfig01_TRUE=
  TEST_spconfig01_FALSE='#'
else
  TEST_spconfig01_TRUE='#'
  TEST_spconfig01_FALSE=
fi

 TEST_FLAGS_spconfig01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spconfig02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spconfig02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spconfig02`
 else
  check_result=spconfig02
 fi
 if test "spconfig02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spconfig02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spconfig02_TRUE=
  TEST_spconfig02_FALSE='#'
else
  TEST_spconfig02_TRUE='#'
  TEST_spconfig02_FALSE=
fi

 TEST_FLAGS_spconfig02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spconsole01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spconsole01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spconsole01`
 else
  check_result=spconsole01
 fi
 if test "spconsole01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spconsole01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spconsole01_TRUE=
  TEST_spconsole01_FALSE='#'
else
  TEST_spconsole01_TRUE='#'
  TEST_spconsole01_FALSE=
fi

 TEST_FLAGS_spconsole01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcontext01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcontext01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcontext01`
 else
  check_result=spcontext01
 fi
 if test "spcontext01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcontext01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcontext01_TRUE=
  TEST_spcontext01_FALSE='#'
else
  TEST_spcontext01_TRUE='#'
  TEST_spcontext01_FALSE=
fi

 TEST_FLAGS_spcontext01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcoverage test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcoverage test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcoverage`
 else
  check_result=spcoverage
 fi
 if test "spcoverage" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcoverage`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcoverage_TRUE=
  TEST_spcoverage_FALSE='#'
else
  TEST_spcoverage_TRUE='#'
  TEST_spcoverage_FALSE=
fi

 TEST_FLAGS_spcoverage=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcpucounter01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcpucounter01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcpucounter01`
 else
  check_result=spcpucounter01
 fi
 if test "spcpucounter01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcpucounter01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcpucounter01_TRUE=
  TEST_spcpucounter01_FALSE='#'
else
  TEST_spcpucounter01_TRUE='#'
  TEST_spcpucounter01_FALSE=
fi

 TEST_FLAGS_spcpucounter01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcpuset01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcpuset01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcpuset01`
 else
  check_result=spcpuset01
 fi
 if test "spcpuset01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcpuset01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcpuset01_TRUE=
  TEST_spcpuset01_FALSE='#'
else
  TEST_spcpuset01_TRUE='#'
  TEST_spcpuset01_FALSE=
fi

 TEST_FLAGS_spcpuset01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spcxx01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spcxx01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spcxx01`
 else
  check_result=spcxx01
 fi
 if test "spcxx01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spcxx01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spcxx01_TRUE=
  TEST_spcxx01_FALSE='#'
else
  TEST_spcxx01_TRUE='#'
  TEST_spcxx01_FALSE=
fi

 TEST_FLAGS_spcxx01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spedfsched01`
 else
  check_result=spedfsched01
 fi
 if test "spedfsched01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spedfsched01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spedfsched01_TRUE=
  TEST_spedfsched01_FALSE='#'
else
  TEST_spedfsched01_TRUE='#'
  TEST_spedfsched01_FALSE=
fi

 TEST_FLAGS_spedfsched01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spedfsched02`
 else
  check_result=spedfsched02
 fi
 if test "spedfsched02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spedfsched02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spedfsched02_TRUE=
  TEST_spedfsched02_FALSE='#'
else
  TEST_spedfsched02_TRUE='#'
  TEST_spedfsched02_FALSE=
fi

 TEST_FLAGS_spedfsched02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spedfsched03`
 else
  check_result=spedfsched03
 fi
 if test "spedfsched03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spedfsched03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spedfsched03_TRUE=
  TEST_spedfsched03_FALSE='#'
else
  TEST_spedfsched03_TRUE='#'
  TEST_spedfsched03_FALSE=
fi

 TEST_FLAGS_spedfsched03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spedfsched04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spedfsched04`
 else
  check_result=spedfsched04
 fi
 if test "spedfsched04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spedfsched04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spedfsched04_TRUE=
  TEST_spedfsched04_FALSE='#'
else
  TEST_spedfsched04_TRUE='#'
  TEST_spedfsched04_FALSE=
fi

 TEST_FLAGS_spedfsched04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sperror01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sperror01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sperror01`
 else
  check_result=sperror01
 fi
 if test "sperror01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sperror01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sperror01_TRUE=
  TEST_sperror01_FALSE='#'
else
  TEST_sperror01_TRUE='#'
  TEST_sperror01_FALSE=
fi

 TEST_FLAGS_sperror01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sperror02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sperror02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sperror02`
 else
  check_result=sperror02
 fi
 if test "sperror02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sperror02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sperror02_TRUE=
  TEST_sperror02_FALSE='#'
else
  TEST_sperror02_TRUE='#'
  TEST_sperror02_FALSE=
fi

 TEST_FLAGS_sperror02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sperror03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sperror03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sperror03`
 else
  check_result=sperror03
 fi
 if test "sperror03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sperror03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sperror03_TRUE=
  TEST_sperror03_FALSE='#'
else
  TEST_sperror03_TRUE='#'
  TEST_sperror03_FALSE=
fi

 TEST_FLAGS_sperror03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spevent_err03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spevent_err03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spevent_err03`
 else
  check_result=spevent_err03
 fi
 if test "spevent_err03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spevent_err03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spevent_err03_TRUE=
  TEST_spevent_err03_FALSE='#'
else
  TEST_spevent_err03_TRUE='#'
  TEST_spevent_err03_FALSE=
fi

 TEST_FLAGS_spevent_err03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} speventsystem01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} speventsystem01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes speventsystem01`
 else
  check_result=speventsystem01
 fi
 if test "speventsystem01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes speventsystem01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_speventsystem01_TRUE=
  TEST_speventsystem01_FALSE='#'
else
  TEST_speventsystem01_TRUE='#'
  TEST_speventsystem01_FALSE=
fi

 TEST_FLAGS_speventsystem01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} speventtransient01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} speventtransient01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes speventtransient01`
 else
  check_result=speventtransient01
 fi
 if test "speventtransient01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes speventtransient01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_speventtransient01_TRUE=
  TEST_speventtransient01_FALSE='#'
else
  TEST_speventtransient01_TRUE='#'
  TEST_speventtransient01_FALSE=
fi

 TEST_FLAGS_speventtransient01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spextensions01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spextensions01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spextensions01`
 else
  check_result=spextensions01
 fi
 if test "spextensions01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spextensions01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spextensions01_TRUE=
  TEST_spextensions01_FALSE='#'
else
  TEST_spextensions01_TRUE='#'
  TEST_spextensions01_FALSE=
fi

 TEST_FLAGS_spextensions01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal01`
 else
  check_result=spfatal01
 fi
 if test "spfatal01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal01_TRUE=
  TEST_spfatal01_FALSE='#'
else
  TEST_spfatal01_TRUE='#'
  TEST_spfatal01_FALSE=
fi

 TEST_FLAGS_spfatal01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal02`
 else
  check_result=spfatal02
 fi
 if test "spfatal02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal02_TRUE=
  TEST_spfatal02_FALSE='#'
else
  TEST_spfatal02_TRUE='#'
  TEST_spfatal02_FALSE=
fi

 TEST_FLAGS_spfatal02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal03`
 else
  check_result=spfatal03
 fi
 if test "spfatal03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal03_TRUE=
  TEST_spfatal03_FALSE='#'
else
  TEST_spfatal03_TRUE='#'
  TEST_spfatal03_FALSE=
fi

 TEST_FLAGS_spfatal03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal04`
 else
  check_result=spfatal04
 fi
 if test "spfatal04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal04_TRUE=
  TEST_spfatal04_FALSE='#'
else
  TEST_spfatal04_TRUE='#'
  TEST_spfatal04_FALSE=
fi

 TEST_FLAGS_spfatal04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal05 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal05 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal05`
 else
  check_result=spfatal05
 fi
 if test "spfatal05" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal05`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal05_TRUE=
  TEST_spfatal05_FALSE='#'
else
  TEST_spfatal05_TRUE='#'
  TEST_spfatal05_FALSE=
fi

 TEST_FLAGS_spfatal05=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal06 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal06 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal06`
 else
  check_result=spfatal06
 fi
 if test "spfatal06" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal06`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal06_TRUE=
  TEST_spfatal06_FALSE='#'
else
  TEST_spfatal06_TRUE='#'
  TEST_spfatal06_FALSE=
fi

 TEST_FLAGS_spfatal06=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal09 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal09 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal09`
 else
  check_result=spfatal09
 fi
 if test "spfatal09" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal09`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal09_TRUE=
  TEST_spfatal09_FALSE='#'
else
  TEST_spfatal09_TRUE='#'
  TEST_spfatal09_FALSE=
fi

 TEST_FLAGS_spfatal09=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal10 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal10 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal10`
 else
  check_result=spfatal10
 fi
 if test "spfatal10" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal10`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal10_TRUE=
  TEST_spfatal10_FALSE='#'
else
  TEST_spfatal10_TRUE='#'
  TEST_spfatal10_FALSE=
fi

 TEST_FLAGS_spfatal10=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal11 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal11 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal11`
 else
  check_result=spfatal11
 fi
 if test "spfatal11" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal11`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal11_TRUE=
  TEST_spfatal11_FALSE='#'
else
  TEST_spfatal11_TRUE='#'
  TEST_spfatal11_FALSE=
fi

 TEST_FLAGS_spfatal11=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal12 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal12 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal12`
 else
  check_result=spfatal12
 fi
 if test "spfatal12" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal12`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal12_TRUE=
  TEST_spfatal12_FALSE='#'
else
  TEST_spfatal12_TRUE='#'
  TEST_spfatal12_FALSE=
fi

 TEST_FLAGS_spfatal12=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal14 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal14 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal14`
 else
  check_result=spfatal14
 fi
 if test "spfatal14" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal14`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal14_TRUE=
  TEST_spfatal14_FALSE='#'
else
  TEST_spfatal14_TRUE='#'
  TEST_spfatal14_FALSE=
fi

 TEST_FLAGS_spfatal14=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal15 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal15 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal15`
 else
  check_result=spfatal15
 fi
 if test "spfatal15" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal15`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal15_TRUE=
  TEST_spfatal15_FALSE='#'
else
  TEST_spfatal15_TRUE='#'
  TEST_spfatal15_FALSE=
fi

 TEST_FLAGS_spfatal15=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal16 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal16 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal16`
 else
  check_result=spfatal16
 fi
 if test "spfatal16" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal16`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal16_TRUE=
  TEST_spfatal16_FALSE='#'
else
  TEST_spfatal16_TRUE='#'
  TEST_spfatal16_FALSE=
fi

 TEST_FLAGS_spfatal16=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal24 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal24 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal24`
 else
  check_result=spfatal24
 fi
 if test "spfatal24" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal24`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal24_TRUE=
  TEST_spfatal24_FALSE='#'
else
  TEST_spfatal24_TRUE='#'
  TEST_spfatal24_FALSE=
fi

 TEST_FLAGS_spfatal24=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal25 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal25 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal25`
 else
  check_result=spfatal25
 fi
 if test "spfatal25" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal25`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal25_TRUE=
  TEST_spfatal25_FALSE='#'
else
  TEST_spfatal25_TRUE='#'
  TEST_spfatal25_FALSE=
fi

 TEST_FLAGS_spfatal25=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal26 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal26 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal26`
 else
  check_result=spfatal26
 fi
 if test "spfatal26" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal26`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal26_TRUE=
  TEST_spfatal26_FALSE='#'
else
  TEST_spfatal26_TRUE='#'
  TEST_spfatal26_FALSE=
fi

 TEST_FLAGS_spfatal26=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal28 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal28 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal28`
 else
  check_result=spfatal28
 fi
 if test "spfatal28" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal28`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal28_TRUE=
  TEST_spfatal28_FALSE='#'
else
  TEST_spfatal28_TRUE='#'
  TEST_spfatal28_FALSE=
fi

 TEST_FLAGS_spfatal28=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal29 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal29 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal29`
 else
  check_result=spfatal29
 fi
 if test "spfatal29" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal29`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal29_TRUE=
  TEST_spfatal29_FALSE='#'
else
  TEST_spfatal29_TRUE='#'
  TEST_spfatal29_FALSE=
fi

 TEST_FLAGS_spfatal29=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal30 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal30 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal30`
 else
  check_result=spfatal30
 fi
 if test "spfatal30" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal30`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal30_TRUE=
  TEST_spfatal30_FALSE='#'
else
  TEST_spfatal30_TRUE='#'
  TEST_spfatal30_FALSE=
fi

 TEST_FLAGS_spfatal30=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal31 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal31 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal31`
 else
  check_result=spfatal31
 fi
 if test "spfatal31" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal31`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal31_TRUE=
  TEST_spfatal31_FALSE='#'
else
  TEST_spfatal31_TRUE='#'
  TEST_spfatal31_FALSE=
fi

 TEST_FLAGS_spfatal31=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal32 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfatal32 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfatal32`
 else
  check_result=spfatal32
 fi
 if test "spfatal32" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfatal32`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfatal32_TRUE=
  TEST_spfatal32_FALSE='#'
else
  TEST_spfatal32_TRUE='#'
  TEST_spfatal32_FALSE=
fi

 TEST_FLAGS_spfatal32=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfifo01`
 else
  check_result=spfifo01
 fi
 if test "spfifo01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfifo01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfifo01_TRUE=
  TEST_spfifo01_FALSE='#'
else
  TEST_spfifo01_TRUE='#'
  TEST_spfifo01_FALSE=
fi

 TEST_FLAGS_spfifo01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfifo02`
 else
  check_result=spfifo02
 fi
 if test "spfifo02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfifo02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfifo02_TRUE=
  TEST_spfifo02_FALSE='#'
else
  TEST_spfifo02_TRUE='#'
  TEST_spfifo02_FALSE=
fi

 TEST_FLAGS_spfifo02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfifo03`
 else
  check_result=spfifo03
 fi
 if test "spfifo03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfifo03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfifo03_TRUE=
  TEST_spfifo03_FALSE='#'
else
  TEST_spfifo03_TRUE='#'
  TEST_spfifo03_FALSE=
fi

 TEST_FLAGS_spfifo03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfifo04`
 else
  check_result=spfifo04
 fi
 if test "spfifo04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfifo04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfifo04_TRUE=
  TEST_spfifo04_FALSE='#'
else
  TEST_spfifo04_TRUE='#'
  TEST_spfifo04_FALSE=
fi

 TEST_FLAGS_spfifo04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo05 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfifo05 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfifo05`
 else
  check_result=spfifo05
 fi
 if test "spfifo05" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfifo05`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfifo05_TRUE=
  TEST_spfifo05_FALSE='#'
else
  TEST_spfifo05_TRUE='#'
  TEST_spfifo05_FALSE=
fi

 TEST_FLAGS_spfifo05=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spfreechain01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spfreechain01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spfreechain01`
 else
  check_result=spfreechain01
 fi
 if test "spfreechain01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spfreechain01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spfreechain01_TRUE=
  TEST_spfreechain01_FALSE='#'
else
  TEST_spfreechain01_TRUE='#'
  TEST_spfreechain01_FALSE=
fi

 TEST_FLAGS_spfreechain01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spglobalcon01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spglobalcon01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spglobalcon01`
 else
  check_result=spglobalcon01
 fi
 if test "spglobalcon01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spglobalcon01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spglobalcon01_TRUE=
  TEST_spglobalcon01_FALSE='#'
else
  TEST_spglobalcon01_TRUE='#'
  TEST_spglobalcon01_FALSE=
fi

 TEST_FLAGS_spglobalcon01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spglobalcon02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spglobalcon02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spglobalcon02`
 else
  check_result=spglobalcon02
 fi
 if test "spglobalcon02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spglobalcon02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spglobalcon02_TRUE=
  TEST_spglobalcon02_FALSE='#'
else
  TEST_spglobalcon02_TRUE='#'
  TEST_spglobalcon02_FALSE=
fi

 TEST_FLAGS_spglobalcon02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spheapprot test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spheapprot test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spheapprot`
 else
  check_result=spheapprot
 fi
 if test "spheapprot" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spheapprot`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spheapprot_TRUE=
  TEST_spheapprot_FALSE='#'
else
  TEST_spheapprot_TRUE='#'
  TEST_spheapprot_FALSE=
fi

 TEST_FLAGS_spheapprot=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spinternalerror01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spinternalerror01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spinternalerror01`
 else
  check_result=spinternalerror01
 fi
 if test "spinternalerror01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spinternalerror01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spinternalerror01_TRUE=
  TEST_spinternalerror01_FALSE='#'
else
  TEST_spinternalerror01_TRUE='#'
  TEST_spinternalerror01_FALSE=
fi

 TEST_FLAGS_spinternalerror01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spinternalerror02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spinternalerror02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spinternalerror02`
 else
  check_result=spinternalerror02
 fi
 if test "spinternalerror02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spinternalerror02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spinternalerror02_TRUE=
  TEST_spinternalerror02_FALSE='#'
else
  TEST_spinternalerror02_TRUE='#'
  TEST_spinternalerror02_FALSE=
fi

 TEST_FLAGS_spinternalerror02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintr_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintr_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintr_err01`
 else
  check_result=spintr_err01
 fi
 if test "spintr_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintr_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintr_err01_TRUE=
  TEST_spintr_err01_FALSE='#'
else
  TEST_spintr_err01_TRUE='#'
  TEST_spintr_err01_FALSE=
fi

 TEST_FLAGS_spintr_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical01`
 else
  check_result=spintrcritical01
 fi
 if test "spintrcritical01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical01_TRUE=
  TEST_spintrcritical01_FALSE='#'
else
  TEST_spintrcritical01_TRUE='#'
  TEST_spintrcritical01_FALSE=
fi

 TEST_FLAGS_spintrcritical01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical02`
 else
  check_result=spintrcritical02
 fi
 if test "spintrcritical02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical02_TRUE=
  TEST_spintrcritical02_FALSE='#'
else
  TEST_spintrcritical02_TRUE='#'
  TEST_spintrcritical02_FALSE=
fi

 TEST_FLAGS_spintrcritical02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical03`
 else
  check_result=spintrcritical03
 fi
 if test "spintrcritical03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical03_TRUE=
  TEST_spintrcritical03_FALSE='#'
else
  TEST_spintrcritical03_TRUE='#'
  TEST_spintrcritical03_FALSE=
fi

 TEST_FLAGS_spintrcritical03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical04`
 else
  check_result=spintrcritical04
 fi
 if test "spintrcritical04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical04_TRUE=
  TEST_spintrcritical04_FALSE='#'
else
  TEST_spintrcritical04_TRUE='#'
  TEST_spintrcritical04_FALSE=
fi

 TEST_FLAGS_spintrcritical04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical05 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical05 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical05`
 else
  check_result=spintrcritical05
 fi
 if test "spintrcritical05" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical05`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical05_TRUE=
  TEST_spintrcritical05_FALSE='#'
else
  TEST_spintrcritical05_TRUE='#'
  TEST_spintrcritical05_FALSE=
fi

 TEST_FLAGS_spintrcritical05=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical06 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical06 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical06`
 else
  check_result=spintrcritical06
 fi
 if test "spintrcritical06" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical06`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical06_TRUE=
  TEST_spintrcritical06_FALSE='#'
else
  TEST_spintrcritical06_TRUE='#'
  TEST_spintrcritical06_FALSE=
fi

 TEST_FLAGS_spintrcritical06=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical07 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical07 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical07`
 else
  check_result=spintrcritical07
 fi
 if test "spintrcritical07" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical07`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical07_TRUE=
  TEST_spintrcritical07_FALSE='#'
else
  TEST_spintrcritical07_TRUE='#'
  TEST_spintrcritical07_FALSE=
fi

 TEST_FLAGS_spintrcritical07=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical08 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical08 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical08`
 else
  check_result=spintrcritical08
 fi
 if test "spintrcritical08" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical08`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical08_TRUE=
  TEST_spintrcritical08_FALSE='#'
else
  TEST_spintrcritical08_TRUE='#'
  TEST_spintrcritical08_FALSE=
fi

 TEST_FLAGS_spintrcritical08=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical09 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical09 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical09`
 else
  check_result=spintrcritical09
 fi
 if test "spintrcritical09" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical09`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical09_TRUE=
  TEST_spintrcritical09_FALSE='#'
else
  TEST_spintrcritical09_TRUE='#'
  TEST_spintrcritical09_FALSE=
fi

 TEST_FLAGS_spintrcritical09=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical10 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical10 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical10`
 else
  check_result=spintrcritical10
 fi
 if test "spintrcritical10" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical10`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical10_TRUE=
  TEST_spintrcritical10_FALSE='#'
else
  TEST_spintrcritical10_TRUE='#'
  TEST_spintrcritical10_FALSE=
fi

 TEST_FLAGS_spintrcritical10=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical11 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical11 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical11`
 else
  check_result=spintrcritical11
 fi
 if test "spintrcritical11" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical11`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical11_TRUE=
  TEST_spintrcritical11_FALSE='#'
else
  TEST_spintrcritical11_TRUE='#'
  TEST_spintrcritical11_FALSE=
fi

 TEST_FLAGS_spintrcritical11=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical12 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical12 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical12`
 else
  check_result=spintrcritical12
 fi
 if test "spintrcritical12" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical12`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical12_TRUE=
  TEST_spintrcritical12_FALSE='#'
else
  TEST_spintrcritical12_TRUE='#'
  TEST_spintrcritical12_FALSE=
fi

 TEST_FLAGS_spintrcritical12=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical13 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical13 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical13`
 else
  check_result=spintrcritical13
 fi
 if test "spintrcritical13" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical13`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical13_TRUE=
  TEST_spintrcritical13_FALSE='#'
else
  TEST_spintrcritical13_TRUE='#'
  TEST_spintrcritical13_FALSE=
fi

 TEST_FLAGS_spintrcritical13=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical14 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical14 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical14`
 else
  check_result=spintrcritical14
 fi
 if test "spintrcritical14" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical14`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical14_TRUE=
  TEST_spintrcritical14_FALSE='#'
else
  TEST_spintrcritical14_TRUE='#'
  TEST_spintrcritical14_FALSE=
fi

 TEST_FLAGS_spintrcritical14=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical15 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical15 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical15`
 else
  check_result=spintrcritical15
 fi
 if test "spintrcritical15" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical15`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical15_TRUE=
  TEST_spintrcritical15_FALSE='#'
else
  TEST_spintrcritical15_TRUE='#'
  TEST_spintrcritical15_FALSE=
fi

 TEST_FLAGS_spintrcritical15=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical16 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical16 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical16`
 else
  check_result=spintrcritical16
 fi
 if test "spintrcritical16" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical16`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical16_TRUE=
  TEST_spintrcritical16_FALSE='#'
else
  TEST_spintrcritical16_TRUE='#'
  TEST_spintrcritical16_FALSE=
fi

 TEST_FLAGS_spintrcritical16=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical18 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical18 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical18`
 else
  check_result=spintrcritical18
 fi
 if test "spintrcritical18" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical18`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical18_TRUE=
  TEST_spintrcritical18_FALSE='#'
else
  TEST_spintrcritical18_TRUE='#'
  TEST_spintrcritical18_FALSE=
fi

 TEST_FLAGS_spintrcritical18=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical20 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical20 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical20`
 else
  check_result=spintrcritical20
 fi
 if test "spintrcritical20" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical20`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical20_TRUE=
  TEST_spintrcritical20_FALSE='#'
else
  TEST_spintrcritical20_TRUE='#'
  TEST_spintrcritical20_FALSE=
fi

 TEST_FLAGS_spintrcritical20=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical21 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical21 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical21`
 else
  check_result=spintrcritical21
 fi
 if test "spintrcritical21" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical21`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical21_TRUE=
  TEST_spintrcritical21_FALSE='#'
else
  TEST_spintrcritical21_TRUE='#'
  TEST_spintrcritical21_FALSE=
fi

 TEST_FLAGS_spintrcritical21=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical22 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical22 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical22`
 else
  check_result=spintrcritical22
 fi
 if test "spintrcritical22" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical22`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical22_TRUE=
  TEST_spintrcritical22_FALSE='#'
else
  TEST_spintrcritical22_TRUE='#'
  TEST_spintrcritical22_FALSE=
fi

 TEST_FLAGS_spintrcritical22=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical23 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical23 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical23`
 else
  check_result=spintrcritical23
 fi
 if test "spintrcritical23" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical23`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical23_TRUE=
  TEST_spintrcritical23_FALSE='#'
else
  TEST_spintrcritical23_TRUE='#'
  TEST_spintrcritical23_FALSE=
fi

 TEST_FLAGS_spintrcritical23=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical24 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spintrcritical24 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spintrcritical24`
 else
  check_result=spintrcritical24
 fi
 if test "spintrcritical24" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spintrcritical24`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spintrcritical24_TRUE=
  TEST_spintrcritical24_FALSE='#'
else
  TEST_spintrcritical24_TRUE='#'
  TEST_spintrcritical24_FALSE=
fi

 TEST_FLAGS_spintrcritical24=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} splinkersets01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} splinkersets01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes splinkersets01`
 else
  check_result=splinkersets01
 fi
 if test "splinkersets01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes splinkersets01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_splinkersets01_TRUE=
  TEST_splinkersets01_FALSE='#'
else
  TEST_splinkersets01_TRUE='#'
  TEST_splinkersets01_FALSE=
fi

 TEST_FLAGS_splinkersets01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spmkdir test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spmkdir test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spmkdir`
 else
  check_result=spmkdir
 fi
 if test "spmkdir" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spmkdir`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spmkdir_TRUE=
  TEST_spmkdir_FALSE='#'
else
  TEST_spmkdir_TRUE='#'
  TEST_spmkdir_FALSE=
fi

 TEST_FLAGS_spmkdir=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spmisc01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spmisc01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spmisc01`
 else
  check_result=spmisc01
 fi
 if test "spmisc01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spmisc01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spmisc01_TRUE=
  TEST_spmisc01_FALSE='#'
else
  TEST_spmisc01_TRUE='#'
  TEST_spmisc01_FALSE=
fi

 TEST_FLAGS_spmisc01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spmountmgr01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spmountmgr01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spmountmgr01`
 else
  check_result=spmountmgr01
 fi
 if test "spmountmgr01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spmountmgr01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spmountmgr01_TRUE=
  TEST_spmountmgr01_FALSE='#'
else
  TEST_spmountmgr01_TRUE='#'
  TEST_spmountmgr01_FALSE=
fi

 TEST_FLAGS_spmountmgr01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spmrsp01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spmrsp01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spmrsp01`
 else
  check_result=spmrsp01
 fi
 if test "spmrsp01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spmrsp01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spmrsp01_TRUE=
  TEST_spmrsp01_FALSE='#'
else
  TEST_spmrsp01_TRUE='#'
  TEST_spmrsp01_FALSE=
fi

 TEST_FLAGS_spmrsp01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spmsgq_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spmsgq_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spmsgq_err01`
 else
  check_result=spmsgq_err01
 fi
 if test "spmsgq_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spmsgq_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spmsgq_err01_TRUE=
  TEST_spmsgq_err01_FALSE='#'
else
  TEST_spmsgq_err01_TRUE='#'
  TEST_spmsgq_err01_FALSE=
fi

 TEST_FLAGS_spmsgq_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spmsgq_err02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spmsgq_err02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spmsgq_err02`
 else
  check_result=spmsgq_err02
 fi
 if test "spmsgq_err02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spmsgq_err02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spmsgq_err02_TRUE=
  TEST_spmsgq_err02_FALSE='#'
else
  TEST_spmsgq_err02_TRUE='#'
  TEST_spmsgq_err02_FALSE=
fi

 TEST_FLAGS_spmsgq_err02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spmutex01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spmutex01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spmutex01`
 else
  check_result=spmutex01
 fi
 if test "spmutex01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spmutex01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spmutex01_TRUE=
  TEST_spmutex01_FALSE='#'
else
  TEST_spmutex01_TRUE='#'
  TEST_spmutex01_FALSE=
fi

 TEST_FLAGS_spmutex01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spnsext01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spnsext01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spnsext01`
 else
  check_result=spnsext01
 fi
 if test "spnsext01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spnsext01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spnsext01_TRUE=
  TEST_spnsext01_FALSE='#'
else
  TEST_spnsext01_TRUE='#'
  TEST_spnsext01_FALSE=
fi

 TEST_FLAGS_spnsext01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spobjgetnext test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spobjgetnext test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spobjgetnext`
 else
  check_result=spobjgetnext
 fi
 if test "spobjgetnext" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spobjgetnext`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spobjgetnext_TRUE=
  TEST_spobjgetnext_FALSE='#'
else
  TEST_spobjgetnext_TRUE='#'
  TEST_spobjgetnext_FALSE=
fi

 TEST_FLAGS_spobjgetnext=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sppagesize test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sppagesize test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sppagesize`
 else
  check_result=sppagesize
 fi
 if test "sppagesize" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sppagesize`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sppagesize_TRUE=
  TEST_sppagesize_FALSE='#'
else
  TEST_sppagesize_TRUE='#'
  TEST_sppagesize_FALSE=
fi

 TEST_FLAGS_sppagesize=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sppartition_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sppartition_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sppartition_err01`
 else
  check_result=sppartition_err01
 fi
 if test "sppartition_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sppartition_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sppartition_err01_TRUE=
  TEST_sppartition_err01_FALSE='#'
else
  TEST_sppartition_err01_TRUE='#'
  TEST_sppartition_err01_FALSE=
fi

 TEST_FLAGS_sppartition_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sppercpudata01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sppercpudata01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sppercpudata01`
 else
  check_result=sppercpudata01
 fi
 if test "sppercpudata01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sppercpudata01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sppercpudata01_TRUE=
  TEST_sppercpudata01_FALSE='#'
else
  TEST_sppercpudata01_TRUE='#'
  TEST_sppercpudata01_FALSE=
fi

 TEST_FLAGS_sppercpudata01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spport_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spport_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spport_err01`
 else
  check_result=spport_err01
 fi
 if test "spport_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spport_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spport_err01_TRUE=
  TEST_spport_err01_FALSE='#'
else
  TEST_spport_err01_TRUE='#'
  TEST_spport_err01_FALSE=
fi

 TEST_FLAGS_spport_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spprintk test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spprintk test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spprintk`
 else
  check_result=spprintk
 fi
 if test "spprintk" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spprintk`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spprintk_TRUE=
  TEST_spprintk_FALSE='#'
else
  TEST_spprintk_TRUE='#'
  TEST_spprintk_FALSE=
fi

 TEST_FLAGS_spprintk=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spprivenv01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spprivenv01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spprivenv01`
 else
  check_result=spprivenv01
 fi
 if test "spprivenv01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spprivenv01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spprivenv01_TRUE=
  TEST_spprivenv01_FALSE='#'
else
  TEST_spprivenv01_TRUE='#'
  TEST_spprivenv01_FALSE=
fi

 TEST_FLAGS_spprivenv01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spprofiling01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spprofiling01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spprofiling01`
 else
  check_result=spprofiling01
 fi
 if test "spprofiling01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spprofiling01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spprofiling01_TRUE=
  TEST_spprofiling01_FALSE='#'
else
  TEST_spprofiling01_TRUE='#'
  TEST_spprofiling01_FALSE=
fi

 TEST_FLAGS_spprofiling01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spqreslib test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spqreslib test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spqreslib`
 else
  check_result=spqreslib
 fi
 if test "spqreslib" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spqreslib`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spqreslib_TRUE=
  TEST_spqreslib_FALSE='#'
else
  TEST_spqreslib_TRUE='#'
  TEST_spqreslib_FALSE=
fi

 TEST_FLAGS_spqreslib=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spratemon_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spratemon_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spratemon_err01`
 else
  check_result=spratemon_err01
 fi
 if test "spratemon_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spratemon_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spratemon_err01_TRUE=
  TEST_spratemon_err01_FALSE='#'
else
  TEST_spratemon_err01_TRUE='#'
  TEST_spratemon_err01_FALSE=
fi

 TEST_FLAGS_spratemon_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sprbtree01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sprbtree01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sprbtree01`
 else
  check_result=sprbtree01
 fi
 if test "sprbtree01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sprbtree01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sprbtree01_TRUE=
  TEST_sprbtree01_FALSE='#'
else
  TEST_sprbtree01_TRUE='#'
  TEST_sprbtree01_FALSE=
fi

 TEST_FLAGS_sprbtree01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spregion_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spregion_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spregion_err01`
 else
  check_result=spregion_err01
 fi
 if test "spregion_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spregion_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spregion_err01_TRUE=
  TEST_spregion_err01_FALSE='#'
else
  TEST_spregion_err01_TRUE='#'
  TEST_spregion_err01_FALSE=
fi

 TEST_FLAGS_spregion_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sprmsched01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sprmsched01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sprmsched01`
 else
  check_result=sprmsched01
 fi
 if test "sprmsched01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sprmsched01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sprmsched01_TRUE=
  TEST_sprmsched01_FALSE='#'
else
  TEST_sprmsched01_TRUE='#'
  TEST_sprmsched01_FALSE=
fi

 TEST_FLAGS_sprmsched01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sprmsched02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sprmsched02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sprmsched02`
 else
  check_result=sprmsched02
 fi
 if test "sprmsched02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sprmsched02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sprmsched02_TRUE=
  TEST_sprmsched02_FALSE='#'
else
  TEST_sprmsched02_TRUE='#'
  TEST_sprmsched02_FALSE=
fi

 TEST_FLAGS_sprmsched02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spscheduler01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spscheduler01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spscheduler01`
 else
  check_result=spscheduler01
 fi
 if test "spscheduler01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spscheduler01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spscheduler01_TRUE=
  TEST_spscheduler01_FALSE='#'
else
  TEST_spscheduler01_TRUE='#'
  TEST_spscheduler01_FALSE=
fi

 TEST_FLAGS_spscheduler01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsem01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsem01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsem01`
 else
  check_result=spsem01
 fi
 if test "spsem01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsem01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsem01_TRUE=
  TEST_spsem01_FALSE='#'
else
  TEST_spsem01_TRUE='#'
  TEST_spsem01_FALSE=
fi

 TEST_FLAGS_spsem01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsem02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsem02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsem02`
 else
  check_result=spsem02
 fi
 if test "spsem02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsem02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsem02_TRUE=
  TEST_spsem02_FALSE='#'
else
  TEST_spsem02_TRUE='#'
  TEST_spsem02_FALSE=
fi

 TEST_FLAGS_spsem02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsem03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsem03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsem03`
 else
  check_result=spsem03
 fi
 if test "spsem03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsem03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsem03_TRUE=
  TEST_spsem03_FALSE='#'
else
  TEST_spsem03_TRUE='#'
  TEST_spsem03_FALSE=
fi

 TEST_FLAGS_spsem03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsem_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsem_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsem_err01`
 else
  check_result=spsem_err01
 fi
 if test "spsem_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsem_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsem_err01_TRUE=
  TEST_spsem_err01_FALSE='#'
else
  TEST_spsem_err01_TRUE='#'
  TEST_spsem_err01_FALSE=
fi

 TEST_FLAGS_spsem_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsem_err02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsem_err02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsem_err02`
 else
  check_result=spsem_err02
 fi
 if test "spsem_err02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsem_err02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsem_err02_TRUE=
  TEST_spsem_err02_FALSE='#'
else
  TEST_spsem_err02_TRUE='#'
  TEST_spsem_err02_FALSE=
fi

 TEST_FLAGS_spsem_err02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsignal_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsignal_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsignal_err01`
 else
  check_result=spsignal_err01
 fi
 if test "spsignal_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsignal_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsignal_err01_TRUE=
  TEST_spsignal_err01_FALSE='#'
else
  TEST_spsignal_err01_TRUE='#'
  TEST_spsignal_err01_FALSE=
fi

 TEST_FLAGS_spsignal_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsimplesched01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsimplesched01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsimplesched01`
 else
  check_result=spsimplesched01
 fi
 if test "spsimplesched01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsimplesched01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsimplesched01_TRUE=
  TEST_spsimplesched01_FALSE='#'
else
  TEST_spsimplesched01_TRUE='#'
  TEST_spsimplesched01_FALSE=
fi

 TEST_FLAGS_spsimplesched01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsimplesched02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsimplesched02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsimplesched02`
 else
  check_result=spsimplesched02
 fi
 if test "spsimplesched02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsimplesched02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsimplesched02_TRUE=
  TEST_spsimplesched02_FALSE='#'
else
  TEST_spsimplesched02_TRUE='#'
  TEST_spsimplesched02_FALSE=
fi

 TEST_FLAGS_spsimplesched02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsimplesched03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsimplesched03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsimplesched03`
 else
  check_result=spsimplesched03
 fi
 if test "spsimplesched03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsimplesched03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsimplesched03_TRUE=
  TEST_spsimplesched03_FALSE='#'
else
  TEST_spsimplesched03_TRUE='#'
  TEST_spsimplesched03_FALSE=
fi

 TEST_FLAGS_spsimplesched03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsize test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsize test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsize`
 else
  check_result=spsize
 fi
 if test "spsize" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsize`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsize_TRUE=
  TEST_spsize_FALSE='#'
else
  TEST_spsize_TRUE='#'
  TEST_spsize_FALSE=
fi

 TEST_FLAGS_spsize=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spstdthreads01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spstdthreads01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spstdthreads01`
 else
  check_result=spstdthreads01
 fi
 if test "spstdthreads01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spstdthreads01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spstdthreads01_TRUE=
  TEST_spstdthreads01_FALSE='#'
else
  TEST_spstdthreads01_TRUE='#'
  TEST_spstdthreads01_FALSE=
fi

 TEST_FLAGS_spstdthreads01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spstkalloc test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spstkalloc test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spstkalloc`
 else
  check_result=spstkalloc
 fi
 if test "spstkalloc" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spstkalloc`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spstkalloc_TRUE=
  TEST_spstkalloc_FALSE='#'
else
  TEST_spstkalloc_TRUE='#'
  TEST_spstkalloc_FALSE=
fi

 TEST_FLAGS_spstkalloc=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spstkalloc02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spstkalloc02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spstkalloc02`
 else
  check_result=spstkalloc02
 fi
 if test "spstkalloc02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spstkalloc02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spstkalloc02_TRUE=
  TEST_spstkalloc02_FALSE='#'
else
  TEST_spstkalloc02_TRUE='#'
  TEST_spstkalloc02_FALSE=
fi

 TEST_FLAGS_spstkalloc02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsysinit01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsysinit01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsysinit01`
 else
  check_result=spsysinit01
 fi
 if test "spsysinit01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsysinit01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsysinit01_TRUE=
  TEST_spsysinit01_FALSE='#'
else
  TEST_spsysinit01_TRUE='#'
  TEST_spsysinit01_FALSE=
fi

 TEST_FLAGS_spsysinit01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spsyslock01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spsyslock01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spsyslock01`
 else
  check_result=spsyslock01
 fi
 if test "spsyslock01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spsyslock01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spsyslock01_TRUE=
  TEST_spsyslock01_FALSE='#'
else
  TEST_spsyslock01_TRUE='#'
  TEST_spsyslock01_FALSE=
fi

 TEST_FLAGS_spsyslock01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptask_err01`
 else
  check_result=sptask_err01
 fi
 if test "sptask_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptask_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptask_err01_TRUE=
  TEST_sptask_err01_FALSE='#'
else
  TEST_sptask_err01_TRUE='#'
  TEST_sptask_err01_FALSE=
fi

 TEST_FLAGS_sptask_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptask_err02`
 else
  check_result=sptask_err02
 fi
 if test "sptask_err02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptask_err02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptask_err02_TRUE=
  TEST_sptask_err02_FALSE='#'
else
  TEST_sptask_err02_TRUE='#'
  TEST_sptask_err02_FALSE=
fi

 TEST_FLAGS_sptask_err02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptask_err03`
 else
  check_result=sptask_err03
 fi
 if test "sptask_err03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptask_err03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptask_err03_TRUE=
  TEST_sptask_err03_FALSE='#'
else
  TEST_sptask_err03_TRUE='#'
  TEST_sptask_err03_FALSE=
fi

 TEST_FLAGS_sptask_err03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptask_err04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptask_err04`
 else
  check_result=sptask_err04
 fi
 if test "sptask_err04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptask_err04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptask_err04_TRUE=
  TEST_sptask_err04_FALSE='#'
else
  TEST_sptask_err04_TRUE='#'
  TEST_sptask_err04_FALSE=
fi

 TEST_FLAGS_sptask_err04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptasknopreempt01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptasknopreempt01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptasknopreempt01`
 else
  check_result=sptasknopreempt01
 fi
 if test "sptasknopreempt01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptasknopreempt01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptasknopreempt01_TRUE=
  TEST_sptasknopreempt01_FALSE='#'
else
  TEST_sptasknopreempt01_TRUE='#'
  TEST_sptasknopreempt01_FALSE=
fi

 TEST_FLAGS_sptasknopreempt01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spthread01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spthread01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spthread01`
 else
  check_result=spthread01
 fi
 if test "spthread01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spthread01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spthread01_TRUE=
  TEST_spthread01_FALSE='#'
else
  TEST_spthread01_TRUE='#'
  TEST_spthread01_FALSE=
fi

 TEST_FLAGS_spthread01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spthreadlife01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spthreadlife01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spthreadlife01`
 else
  check_result=spthreadlife01
 fi
 if test "spthreadlife01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spthreadlife01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spthreadlife01_TRUE=
  TEST_spthreadlife01_FALSE='#'
else
  TEST_spthreadlife01_TRUE='#'
  TEST_spthreadlife01_FALSE=
fi

 TEST_FLAGS_spthreadlife01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spthreadq01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spthreadq01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spthreadq01`
 else
  check_result=spthreadq01
 fi
 if test "spthreadq01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spthreadq01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spthreadq01_TRUE=
  TEST_spthreadq01_FALSE='#'
else
  TEST_spthreadq01_TRUE='#'
  TEST_spthreadq01_FALSE=
fi

 TEST_FLAGS_spthreadq01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimecounter01`
 else
  check_result=sptimecounter01
 fi
 if test "sptimecounter01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimecounter01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimecounter01_TRUE=
  TEST_sptimecounter01_FALSE='#'
else
  TEST_sptimecounter01_TRUE='#'
  TEST_sptimecounter01_FALSE=
fi

 TEST_FLAGS_sptimecounter01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimecounter02`
 else
  check_result=sptimecounter02
 fi
 if test "sptimecounter02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimecounter02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimecounter02_TRUE=
  TEST_sptimecounter02_FALSE='#'
else
  TEST_sptimecounter02_TRUE='#'
  TEST_sptimecounter02_FALSE=
fi

 TEST_FLAGS_sptimecounter02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimecounter03`
 else
  check_result=sptimecounter03
 fi
 if test "sptimecounter03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimecounter03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimecounter03_TRUE=
  TEST_sptimecounter03_FALSE='#'
else
  TEST_sptimecounter03_TRUE='#'
  TEST_sptimecounter03_FALSE=
fi

 TEST_FLAGS_sptimecounter03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimecounter04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimecounter04`
 else
  check_result=sptimecounter04
 fi
 if test "sptimecounter04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimecounter04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimecounter04_TRUE=
  TEST_sptimecounter04_FALSE='#'
else
  TEST_sptimecounter04_TRUE='#'
  TEST_sptimecounter04_FALSE=
fi

 TEST_FLAGS_sptimecounter04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimer_err01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimer_err01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimer_err01`
 else
  check_result=sptimer_err01
 fi
 if test "sptimer_err01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimer_err01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimer_err01_TRUE=
  TEST_sptimer_err01_FALSE='#'
else
  TEST_sptimer_err01_TRUE='#'
  TEST_sptimer_err01_FALSE=
fi

 TEST_FLAGS_sptimer_err01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimer_err02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimer_err02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimer_err02`
 else
  check_result=sptimer_err02
 fi
 if test "sptimer_err02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimer_err02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimer_err02_TRUE=
  TEST_sptimer_err02_FALSE='#'
else
  TEST_sptimer_err02_TRUE='#'
  TEST_sptimer_err02_FALSE=
fi

 TEST_FLAGS_sptimer_err02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimerserver01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimerserver01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimerserver01`
 else
  check_result=sptimerserver01
 fi
 if test "sptimerserver01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimerserver01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimerserver01_TRUE=
  TEST_sptimerserver01_FALSE='#'
else
  TEST_sptimerserver01_TRUE='#'
  TEST_sptimerserver01_FALSE=
fi

 TEST_FLAGS_sptimerserver01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptimespec01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptimespec01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptimespec01`
 else
  check_result=sptimespec01
 fi
 if test "sptimespec01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptimespec01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptimespec01_TRUE=
  TEST_sptimespec01_FALSE='#'
else
  TEST_sptimespec01_TRUE='#'
  TEST_sptimespec01_FALSE=
fi

 TEST_FLAGS_sptimespec01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptls01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptls01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptls01`
 else
  check_result=sptls01
 fi
 if test "sptls01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptls01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptls01_TRUE=
  TEST_sptls01_FALSE='#'
else
  TEST_sptls01_TRUE='#'
  TEST_sptls01_FALSE=
fi

 TEST_FLAGS_sptls01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptls02 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptls02 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptls02`
 else
  check_result=sptls02
 fi
 if test "sptls02" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptls02`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptls02_TRUE=
  TEST_sptls02_FALSE='#'
else
  TEST_sptls02_TRUE='#'
  TEST_sptls02_FALSE=
fi

 TEST_FLAGS_sptls02=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptls03 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptls03 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptls03`
 else
  check_result=sptls03
 fi
 if test "sptls03" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptls03`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptls03_TRUE=
  TEST_sptls03_FALSE='#'
else
  TEST_sptls03_TRUE='#'
  TEST_sptls03_FALSE=
fi

 TEST_FLAGS_sptls03=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} sptls04 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} sptls04 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes sptls04`
 else
  check_result=sptls04
 fi
 if test "sptls04" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes sptls04`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_sptls04_TRUE=
  TEST_sptls04_FALSE='#'
else
  TEST_sptls04_TRUE='#'
  TEST_sptls04_FALSE=
fi

 TEST_FLAGS_sptls04=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spversion01 test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spversion01 test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spversion01`
 else
  check_result=spversion01
 fi
 if test "spversion01" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spversion01`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spversion01_TRUE=
  TEST_spversion01_FALSE='#'
else
  TEST_spversion01_TRUE='#'
  TEST_spversion01_FALSE=
fi

 TEST_FLAGS_spversion01=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spwatchdog test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spwatchdog test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spwatchdog`
 else
  check_result=spwatchdog
 fi
 if test "spwatchdog" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spwatchdog`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spwatchdog_TRUE=
  TEST_spwatchdog_FALSE='#'
else
  TEST_spwatchdog_TRUE='#'
  TEST_spwatchdog_FALSE=
fi

 TEST_FLAGS_spwatchdog=$test_CFLAGS



 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking ${RTEMS_CPU}/${RTEMS_BSP} spwkspace test" >&5
$as_echo_n "checking ${RTEMS_CPU}/${RTEMS_BSP} spwkspace test... " >&6; }
 tcheck="${RTEMS_SOURCE_ROOT}/testsuites/rtems-test-check"
 tdata="${RTEMS_BSP}-testsuite.tcfg"
 tincludes="${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}:${RTEMS_SOURCE_ROOT}/bsps/${RTEMS_CPU}/${RTEMS_BSP_FAMILY}/config:${RTEMS_SOURCE_ROOT}/testsuites"
 if test -f $tcheck; then
  check_result=`$tcheck exclude ${RTEMS_BSP} $tdata $tincludes spwkspace`
 else
  check_result=spwkspace
 fi
 if test "spwkspace" = "$check_result"; then
  if test -f $tcheck; then
   test_CFLAGS=`$tcheck cflags ${RTEMS_BSP} $tdata $tincludes spwkspace`
  fi
  if test -z "$test_CFLAGS"; then
   result_msg="PASS"
  else
   result_msg="$test_CFLAGS"
  fi
 else
   result_msg="EXCLUDED"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $result_msg" >&5
$as_echo "$result_msg" >&6; }
  if test "$result_msg" != "EXCLUDED"; then
  TEST_spwkspace_TRUE=
  TEST_spwkspace_FALSE='#'
else
  TEST_spwkspace_TRUE='#'
  TEST_spwkspace_FALSE=
fi

 TEST_FLAGS_spwkspace=$test_CFLAGS



ac_config_files="$ac_config_files Makefile"

cat >confcache <<\_ACEOF
# This file is a shell script that caches the results of configure
# tests run on this system so they can be shared between configure
# scripts and configure runs, see configure's option --config-cache.
# It is not useful on other systems.  If it contains results you don't
# want to keep, you may remove or edit it.
#
# config.status only pays attention to the cache file if you give it
# the --recheck option to rerun configure.
#
# `ac_cv_env_foo' variables (set or unset) will be overridden when
# loading this file, other *unset* `ac_cv_foo' will be assigned the
# following values.

_ACEOF

# The following way of writing the cache mishandles newlines in values,
# but we know of no workaround that is simple, portable, and efficient.
# So, we kill variables containing newlines.
# Ultrix sh set writes to stderr and can't be redirected directly,
# and sets the high bit in the cache file unless we assign to the vars.
(
  for ac_var in `(set) 2>&1 | sed -n 's/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'`; do
    eval ac_val=\$$ac_var
    case $ac_val in #(
    *${as_nl}*)
      case $ac_var in #(
      *_cv_*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline" >&5
$as_echo "$as_me: WARNING: cache variable $ac_var contains a newline" >&2;} ;;
      esac
      case $ac_var in #(
      _ | IFS | as_nl) ;; #(
      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(
      *) { eval $ac_var=; unset $ac_var;} ;;
      esac ;;
    esac
  done

  (set) 2>&1 |
    case $as_nl`(ac_space=' '; set) 2>&1` in #(
    *${as_nl}ac_space=\ *)
      # `set' does not quote correctly, so add quotes: double-quote
      # substitution turns \\\\ into \\, and sed turns \\ into \.
      sed -n \
	"s/'/'\\\\''/g;
	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\\2'/p"
      ;; #(
    *)
      # `set' quotes correctly as required by POSIX, so do not add quotes.
      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
      ;;
    esac |
    sort
) |
  sed '
     /^ac_cv_env_/b end
     t clear
     :clear
     s/^\([^=]*\)=\(.*[{}].*\)$/test "${\1+set}" = set || &/
     t end
     s/^\([^=]*\)=\(.*\)$/\1=${\1=\2}/
     :end' >>confcache
if diff "$cache_file" confcache >/dev/null 2>&1; then :; else
  if test -w "$cache_file"; then
    if test "x$cache_file" != "x/dev/null"; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: updating cache $cache_file" >&5
$as_echo "$as_me: updating cache $cache_file" >&6;}
      if test ! -f "$cache_file" || test -h "$cache_file"; then
	cat confcache >"$cache_file"
      else
        case $cache_file in #(
        */* | ?:*)
	  mv -f confcache "$cache_file"$$ &&
	  mv -f "$cache_file"$$ "$cache_file" ;; #(
        *)
	  mv -f confcache "$cache_file" ;;
	esac
      fi
    fi
  else
    { $as_echo "$as_me:${as_lineno-$LINENO}: not updating unwritable cache $cache_file" >&5
$as_echo "$as_me: not updating unwritable cache $cache_file" >&6;}
  fi
fi
rm -f confcache

test "x$prefix" = xNONE && prefix=$ac_default_prefix
# Let make expand exec_prefix.
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

DEFS=-DHAVE_CONFIG_H

ac_libobjs=
ac_ltlibobjs=
U=
for ac_i in : $LIB@&t@OBJS; do test "x$ac_i" = x: && continue
  # 1. Remove the extension, and $U if already installed.
  ac_script='s/\$U\././;s/\.o$//;s/\.obj$//'
  ac_i=`$as_echo "$ac_i" | sed "$ac_script"`
  # 2. Prepend LIBOBJDIR.  When used with automake>=1.10 LIBOBJDIR
  #    will be set to the directory where LIBOBJS objects are built.
  as_fn_append ac_libobjs " \${LIBOBJDIR}$ac_i\$U.$ac_objext"
  as_fn_append ac_ltlibobjs " \${LIBOBJDIR}$ac_i"'$U.lo'
done
LIB@&t@OBJS=$ac_libobjs

LTLIBOBJS=$ac_ltlibobjs


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking that generated files are newer than configure" >&5
$as_echo_n "checking that generated files are newer than configure... " >&6; }
   if test -n "$am_sleep_pid"; then
     # Hide warnings about reused PIDs.
     wait $am_sleep_pid 2>/dev/null
   fi
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: done" >&5
$as_echo "done" >&6; }
 if test -n "$EXEEXT"; then
  am__EXEEXT_TRUE=
  am__EXEEXT_FALSE='#'
else
  am__EXEEXT_TRUE='#'
  am__EXEEXT_FALSE=
fi

if test -z "${MAINTAINER_MODE_TRUE}" && test -z "${MAINTAINER_MODE_FALSE}"; then
  as_fn_error $? "conditional \"MAINTAINER_MODE\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${AMDEP_TRUE}" && test -z "${AMDEP_FALSE}"; then
  as_fn_error $? "conditional \"AMDEP\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${am__fastdepCC_TRUE}" && test -z "${am__fastdepCC_FALSE}"; then
  as_fn_error $? "conditional \"am__fastdepCC\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${am__fastdepCXX_TRUE}" && test -z "${am__fastdepCXX_FALSE}"; then
  as_fn_error $? "conditional \"am__fastdepCXX\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${am__fastdepCXX_TRUE}" && test -z "${am__fastdepCXX_FALSE}"; then
  as_fn_error $? "conditional \"am__fastdepCXX\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${am__fastdepCXX_TRUE}" && test -z "${am__fastdepCXX_FALSE}"; then
  as_fn_error $? "conditional \"am__fastdepCXX\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${HAS_CPLUSPLUS_TRUE}" && test -z "${HAS_CPLUSPLUS_FALSE}"; then
  as_fn_error $? "conditional \"HAS_CPLUSPLUS\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${NO_SMP_TRUE}" && test -z "${NO_SMP_FALSE}"; then
  as_fn_error $? "conditional \"NO_SMP\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${HAS_SMP_TRUE}" && test -z "${HAS_SMP_FALSE}"; then
  as_fn_error $? "conditional \"HAS_SMP\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp01_TRUE}" && test -z "${TEST_sp01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp02_TRUE}" && test -z "${TEST_sp02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp03_TRUE}" && test -z "${TEST_sp03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp04_TRUE}" && test -z "${TEST_sp04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp05_TRUE}" && test -z "${TEST_sp05_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp05\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp06_TRUE}" && test -z "${TEST_sp06_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp06\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp07_TRUE}" && test -z "${TEST_sp07_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp07\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp08_TRUE}" && test -z "${TEST_sp08_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp08\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp11_TRUE}" && test -z "${TEST_sp11_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp11\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp12_TRUE}" && test -z "${TEST_sp12_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp12\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp13_TRUE}" && test -z "${TEST_sp13_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp13\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp14_TRUE}" && test -z "${TEST_sp14_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp14\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp15_TRUE}" && test -z "${TEST_sp15_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp15\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp16_TRUE}" && test -z "${TEST_sp16_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp16\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp17_TRUE}" && test -z "${TEST_sp17_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp17\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp18_TRUE}" && test -z "${TEST_sp18_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp18\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp19_TRUE}" && test -z "${TEST_sp19_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp19\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp20_TRUE}" && test -z "${TEST_sp20_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp20\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp2038_TRUE}" && test -z "${TEST_sp2038_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp2038\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp21_TRUE}" && test -z "${TEST_sp21_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp21\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp22_TRUE}" && test -z "${TEST_sp22_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp22\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp23_TRUE}" && test -z "${TEST_sp23_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp23\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp24_TRUE}" && test -z "${TEST_sp24_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp24\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp25_TRUE}" && test -z "${TEST_sp25_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp25\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp26_TRUE}" && test -z "${TEST_sp26_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp26\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp27_TRUE}" && test -z "${TEST_sp27_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp27\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp27a_TRUE}" && test -z "${TEST_sp27a_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp27a\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp29_TRUE}" && test -z "${TEST_sp29_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp29\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp30_TRUE}" && test -z "${TEST_sp30_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp30\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp31_TRUE}" && test -z "${TEST_sp31_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp31\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp32_TRUE}" && test -z "${TEST_sp32_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp32\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp33_TRUE}" && test -z "${TEST_sp33_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp33\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp34_TRUE}" && test -z "${TEST_sp34_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp34\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp35_TRUE}" && test -z "${TEST_sp35_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp35\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp37_TRUE}" && test -z "${TEST_sp37_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp37\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp38_TRUE}" && test -z "${TEST_sp38_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp38\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp40_TRUE}" && test -z "${TEST_sp40_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp40\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp41_TRUE}" && test -z "${TEST_sp41_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp41\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp42_TRUE}" && test -z "${TEST_sp42_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp42\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp43_TRUE}" && test -z "${TEST_sp43_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp43\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp44_TRUE}" && test -z "${TEST_sp44_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp44\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp45_TRUE}" && test -z "${TEST_sp45_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp45\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp46_TRUE}" && test -z "${TEST_sp46_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp46\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp47_TRUE}" && test -z "${TEST_sp47_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp47\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp48_TRUE}" && test -z "${TEST_sp48_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp48\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp49_TRUE}" && test -z "${TEST_sp49_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp49\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp50_TRUE}" && test -z "${TEST_sp50_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp50\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp51_TRUE}" && test -z "${TEST_sp51_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp51\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp52_TRUE}" && test -z "${TEST_sp52_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp52\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp53_TRUE}" && test -z "${TEST_sp53_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp53\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp54_TRUE}" && test -z "${TEST_sp54_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp54\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp55_TRUE}" && test -z "${TEST_sp55_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp55\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp56_TRUE}" && test -z "${TEST_sp56_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp56\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp57_TRUE}" && test -z "${TEST_sp57_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp57\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp58_TRUE}" && test -z "${TEST_sp58_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp58\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp59_TRUE}" && test -z "${TEST_sp59_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp59\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp60_TRUE}" && test -z "${TEST_sp60_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp60\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp62_TRUE}" && test -z "${TEST_sp62_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp62\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp63_TRUE}" && test -z "${TEST_sp63_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp63\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp64_TRUE}" && test -z "${TEST_sp64_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp64\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp65_TRUE}" && test -z "${TEST_sp65_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp65\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp66_TRUE}" && test -z "${TEST_sp66_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp66\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp67_TRUE}" && test -z "${TEST_sp67_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp67\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp68_TRUE}" && test -z "${TEST_sp68_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp68\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp69_TRUE}" && test -z "${TEST_sp69_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp69\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp70_TRUE}" && test -z "${TEST_sp70_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp70\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp71_TRUE}" && test -z "${TEST_sp71_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp71\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp72_TRUE}" && test -z "${TEST_sp72_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp72\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp73_TRUE}" && test -z "${TEST_sp73_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp73\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp74_TRUE}" && test -z "${TEST_sp74_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp74\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp75_TRUE}" && test -z "${TEST_sp75_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp75\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp76_TRUE}" && test -z "${TEST_sp76_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp76\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sp77_TRUE}" && test -z "${TEST_sp77_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sp77\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spassoc01_TRUE}" && test -z "${TEST_spassoc01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spassoc01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spatomic01_TRUE}" && test -z "${TEST_spatomic01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spatomic01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcache01_TRUE}" && test -z "${TEST_spcache01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcache01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcbssched01_TRUE}" && test -z "${TEST_spcbssched01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcbssched01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcbssched02_TRUE}" && test -z "${TEST_spcbssched02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcbssched02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcbssched03_TRUE}" && test -z "${TEST_spcbssched03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcbssched03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spchain_TRUE}" && test -z "${TEST_spchain_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spchain\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spclock_err01_TRUE}" && test -z "${TEST_spclock_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spclock_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spclock_err02_TRUE}" && test -z "${TEST_spclock_err02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spclock_err02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spclock_todhook01_TRUE}" && test -z "${TEST_spclock_todhook01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spclock_todhook01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spconfig01_TRUE}" && test -z "${TEST_spconfig01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spconfig01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spconfig02_TRUE}" && test -z "${TEST_spconfig02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spconfig02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spconsole01_TRUE}" && test -z "${TEST_spconsole01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spconsole01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcontext01_TRUE}" && test -z "${TEST_spcontext01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcontext01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcoverage_TRUE}" && test -z "${TEST_spcoverage_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcoverage\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcpucounter01_TRUE}" && test -z "${TEST_spcpucounter01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcpucounter01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcpuset01_TRUE}" && test -z "${TEST_spcpuset01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcpuset01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spcxx01_TRUE}" && test -z "${TEST_spcxx01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spcxx01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spedfsched01_TRUE}" && test -z "${TEST_spedfsched01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spedfsched01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spedfsched02_TRUE}" && test -z "${TEST_spedfsched02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spedfsched02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spedfsched03_TRUE}" && test -z "${TEST_spedfsched03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spedfsched03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spedfsched04_TRUE}" && test -z "${TEST_spedfsched04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spedfsched04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sperror01_TRUE}" && test -z "${TEST_sperror01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sperror01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sperror02_TRUE}" && test -z "${TEST_sperror02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sperror02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sperror03_TRUE}" && test -z "${TEST_sperror03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sperror03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spevent_err03_TRUE}" && test -z "${TEST_spevent_err03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spevent_err03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_speventsystem01_TRUE}" && test -z "${TEST_speventsystem01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_speventsystem01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_speventtransient01_TRUE}" && test -z "${TEST_speventtransient01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_speventtransient01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spextensions01_TRUE}" && test -z "${TEST_spextensions01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spextensions01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal01_TRUE}" && test -z "${TEST_spfatal01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal02_TRUE}" && test -z "${TEST_spfatal02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal03_TRUE}" && test -z "${TEST_spfatal03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal04_TRUE}" && test -z "${TEST_spfatal04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal05_TRUE}" && test -z "${TEST_spfatal05_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal05\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal06_TRUE}" && test -z "${TEST_spfatal06_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal06\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal09_TRUE}" && test -z "${TEST_spfatal09_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal09\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal10_TRUE}" && test -z "${TEST_spfatal10_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal10\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal11_TRUE}" && test -z "${TEST_spfatal11_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal11\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal12_TRUE}" && test -z "${TEST_spfatal12_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal12\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal14_TRUE}" && test -z "${TEST_spfatal14_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal14\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal15_TRUE}" && test -z "${TEST_spfatal15_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal15\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal16_TRUE}" && test -z "${TEST_spfatal16_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal16\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal24_TRUE}" && test -z "${TEST_spfatal24_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal24\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal25_TRUE}" && test -z "${TEST_spfatal25_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal25\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal26_TRUE}" && test -z "${TEST_spfatal26_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal26\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal28_TRUE}" && test -z "${TEST_spfatal28_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal28\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal29_TRUE}" && test -z "${TEST_spfatal29_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal29\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal30_TRUE}" && test -z "${TEST_spfatal30_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal30\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal31_TRUE}" && test -z "${TEST_spfatal31_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal31\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfatal32_TRUE}" && test -z "${TEST_spfatal32_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfatal32\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfifo01_TRUE}" && test -z "${TEST_spfifo01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfifo01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfifo02_TRUE}" && test -z "${TEST_spfifo02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfifo02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfifo03_TRUE}" && test -z "${TEST_spfifo03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfifo03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfifo04_TRUE}" && test -z "${TEST_spfifo04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfifo04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfifo05_TRUE}" && test -z "${TEST_spfifo05_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfifo05\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spfreechain01_TRUE}" && test -z "${TEST_spfreechain01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spfreechain01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spglobalcon01_TRUE}" && test -z "${TEST_spglobalcon01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spglobalcon01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spglobalcon02_TRUE}" && test -z "${TEST_spglobalcon02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spglobalcon02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spheapprot_TRUE}" && test -z "${TEST_spheapprot_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spheapprot\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spinternalerror01_TRUE}" && test -z "${TEST_spinternalerror01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spinternalerror01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spinternalerror02_TRUE}" && test -z "${TEST_spinternalerror02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spinternalerror02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintr_err01_TRUE}" && test -z "${TEST_spintr_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintr_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical01_TRUE}" && test -z "${TEST_spintrcritical01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical02_TRUE}" && test -z "${TEST_spintrcritical02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical03_TRUE}" && test -z "${TEST_spintrcritical03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical04_TRUE}" && test -z "${TEST_spintrcritical04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical05_TRUE}" && test -z "${TEST_spintrcritical05_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical05\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical06_TRUE}" && test -z "${TEST_spintrcritical06_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical06\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical07_TRUE}" && test -z "${TEST_spintrcritical07_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical07\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical08_TRUE}" && test -z "${TEST_spintrcritical08_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical08\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical09_TRUE}" && test -z "${TEST_spintrcritical09_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical09\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical10_TRUE}" && test -z "${TEST_spintrcritical10_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical10\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical11_TRUE}" && test -z "${TEST_spintrcritical11_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical11\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical12_TRUE}" && test -z "${TEST_spintrcritical12_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical12\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical13_TRUE}" && test -z "${TEST_spintrcritical13_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical13\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical14_TRUE}" && test -z "${TEST_spintrcritical14_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical14\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical15_TRUE}" && test -z "${TEST_spintrcritical15_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical15\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical16_TRUE}" && test -z "${TEST_spintrcritical16_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical16\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical18_TRUE}" && test -z "${TEST_spintrcritical18_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical18\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical20_TRUE}" && test -z "${TEST_spintrcritical20_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical20\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical21_TRUE}" && test -z "${TEST_spintrcritical21_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical21\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical22_TRUE}" && test -z "${TEST_spintrcritical22_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical22\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical23_TRUE}" && test -z "${TEST_spintrcritical23_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical23\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spintrcritical24_TRUE}" && test -z "${TEST_spintrcritical24_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spintrcritical24\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_splinkersets01_TRUE}" && test -z "${TEST_splinkersets01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_splinkersets01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spmkdir_TRUE}" && test -z "${TEST_spmkdir_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spmkdir\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spmisc01_TRUE}" && test -z "${TEST_spmisc01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spmisc01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spmountmgr01_TRUE}" && test -z "${TEST_spmountmgr01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spmountmgr01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spmrsp01_TRUE}" && test -z "${TEST_spmrsp01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spmrsp01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spmsgq_err01_TRUE}" && test -z "${TEST_spmsgq_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spmsgq_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spmsgq_err02_TRUE}" && test -z "${TEST_spmsgq_err02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spmsgq_err02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spmutex01_TRUE}" && test -z "${TEST_spmutex01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spmutex01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spnsext01_TRUE}" && test -z "${TEST_spnsext01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spnsext01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spobjgetnext_TRUE}" && test -z "${TEST_spobjgetnext_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spobjgetnext\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sppagesize_TRUE}" && test -z "${TEST_sppagesize_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sppagesize\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sppartition_err01_TRUE}" && test -z "${TEST_sppartition_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sppartition_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sppercpudata01_TRUE}" && test -z "${TEST_sppercpudata01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sppercpudata01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spport_err01_TRUE}" && test -z "${TEST_spport_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spport_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spprintk_TRUE}" && test -z "${TEST_spprintk_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spprintk\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spprivenv01_TRUE}" && test -z "${TEST_spprivenv01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spprivenv01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spprofiling01_TRUE}" && test -z "${TEST_spprofiling01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spprofiling01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spqreslib_TRUE}" && test -z "${TEST_spqreslib_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spqreslib\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spratemon_err01_TRUE}" && test -z "${TEST_spratemon_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spratemon_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sprbtree01_TRUE}" && test -z "${TEST_sprbtree01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sprbtree01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spregion_err01_TRUE}" && test -z "${TEST_spregion_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spregion_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sprmsched01_TRUE}" && test -z "${TEST_sprmsched01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sprmsched01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sprmsched02_TRUE}" && test -z "${TEST_sprmsched02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sprmsched02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spscheduler01_TRUE}" && test -z "${TEST_spscheduler01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spscheduler01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsem01_TRUE}" && test -z "${TEST_spsem01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsem01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsem02_TRUE}" && test -z "${TEST_spsem02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsem02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsem03_TRUE}" && test -z "${TEST_spsem03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsem03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsem_err01_TRUE}" && test -z "${TEST_spsem_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsem_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsem_err02_TRUE}" && test -z "${TEST_spsem_err02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsem_err02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsignal_err01_TRUE}" && test -z "${TEST_spsignal_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsignal_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsimplesched01_TRUE}" && test -z "${TEST_spsimplesched01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsimplesched01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsimplesched02_TRUE}" && test -z "${TEST_spsimplesched02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsimplesched02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsimplesched03_TRUE}" && test -z "${TEST_spsimplesched03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsimplesched03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsize_TRUE}" && test -z "${TEST_spsize_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsize\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spstdthreads01_TRUE}" && test -z "${TEST_spstdthreads01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spstdthreads01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spstkalloc_TRUE}" && test -z "${TEST_spstkalloc_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spstkalloc\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spstkalloc02_TRUE}" && test -z "${TEST_spstkalloc02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spstkalloc02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsysinit01_TRUE}" && test -z "${TEST_spsysinit01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsysinit01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spsyslock01_TRUE}" && test -z "${TEST_spsyslock01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spsyslock01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptask_err01_TRUE}" && test -z "${TEST_sptask_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptask_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptask_err02_TRUE}" && test -z "${TEST_sptask_err02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptask_err02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptask_err03_TRUE}" && test -z "${TEST_sptask_err03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptask_err03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptask_err04_TRUE}" && test -z "${TEST_sptask_err04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptask_err04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptasknopreempt01_TRUE}" && test -z "${TEST_sptasknopreempt01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptasknopreempt01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spthread01_TRUE}" && test -z "${TEST_spthread01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spthread01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spthreadlife01_TRUE}" && test -z "${TEST_spthreadlife01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spthreadlife01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spthreadq01_TRUE}" && test -z "${TEST_spthreadq01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spthreadq01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimecounter01_TRUE}" && test -z "${TEST_sptimecounter01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimecounter01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimecounter02_TRUE}" && test -z "${TEST_sptimecounter02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimecounter02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimecounter03_TRUE}" && test -z "${TEST_sptimecounter03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimecounter03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimecounter04_TRUE}" && test -z "${TEST_sptimecounter04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimecounter04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimer_err01_TRUE}" && test -z "${TEST_sptimer_err01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimer_err01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimer_err02_TRUE}" && test -z "${TEST_sptimer_err02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimer_err02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimerserver01_TRUE}" && test -z "${TEST_sptimerserver01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimerserver01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptimespec01_TRUE}" && test -z "${TEST_sptimespec01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptimespec01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptls01_TRUE}" && test -z "${TEST_sptls01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptls01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptls02_TRUE}" && test -z "${TEST_sptls02_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptls02\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptls03_TRUE}" && test -z "${TEST_sptls03_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptls03\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_sptls04_TRUE}" && test -z "${TEST_sptls04_FALSE}"; then
  as_fn_error $? "conditional \"TEST_sptls04\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spversion01_TRUE}" && test -z "${TEST_spversion01_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spversion01\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spwatchdog_TRUE}" && test -z "${TEST_spwatchdog_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spwatchdog\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi
if test -z "${TEST_spwkspace_TRUE}" && test -z "${TEST_spwkspace_FALSE}"; then
  as_fn_error $? "conditional \"TEST_spwkspace\" was never defined.
Usually this means the macro was only invoked conditionally." "$LINENO" 5
fi

: "${CONFIG_STATUS=./config.status}"
ac_write_fail=0
ac_clean_files_save=$ac_clean_files
ac_clean_files="$ac_clean_files $CONFIG_STATUS"
{ $as_echo "$as_me:${as_lineno-$LINENO}: creating $CONFIG_STATUS" >&5
$as_echo "$as_me: creating $CONFIG_STATUS" >&6;}
as_write_fail=0
cat >$CONFIG_STATUS <<_ASEOF || as_write_fail=1
#! $SHELL
# Generated by $as_me.
# Run this file to recreate the current configuration.
# Compiler output produced by configure, useful for debugging
# configure, is in config.log if it exists.

debug=false
ac_cs_recheck=false
ac_cs_silent=false

SHELL=\${CONFIG_SHELL-$SHELL}
export SHELL
_ASEOF
cat >>$CONFIG_STATUS <<\_ASEOF || as_write_fail=1
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in @%:@(
  *posix*) :
    set -o posix ;; @%:@(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in @%:@(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in @%:@((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH


@%:@ as_fn_error STATUS ERROR [LINENO LOG_FD]
@%:@ ----------------------------------------
@%:@ Output "`basename @S|@0`: error: ERROR" to stderr. If LINENO and LOG_FD are
@%:@ provided, also output the error to LOG_FD, referencing LINENO. Then exit the
@%:@ script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} @%:@ as_fn_error


@%:@ as_fn_set_status STATUS
@%:@ -----------------------
@%:@ Set @S|@? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} @%:@ as_fn_set_status

@%:@ as_fn_exit STATUS
@%:@ -----------------
@%:@ Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} @%:@ as_fn_exit

@%:@ as_fn_unset VAR
@%:@ ---------------
@%:@ Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset
@%:@ as_fn_append VAR VALUE
@%:@ ----------------------
@%:@ Append the text in VALUE to the end of the definition contained in VAR. Take
@%:@ advantage of any shell optimizations that allow amortized linear growth over
@%:@ repeated appends, instead of the typical quadratic growth present in naive
@%:@ implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

@%:@ as_fn_arith ARG...
@%:@ ------------------
@%:@ Perform arithmetic evaluation on the ARGs, and store the result in the
@%:@ global @S|@as_val. Take advantage of shells that can avoid forks. The arguments
@%:@ must be portable across @S|@(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in @%:@(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null


@%:@ as_fn_mkdir_p
@%:@ -------------
@%:@ Create "@S|@as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} @%:@ as_fn_mkdir_p
if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi


@%:@ as_fn_executable_p FILE
@%:@ -----------------------
@%:@ Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} @%:@ as_fn_executable_p
as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


exec 6>&1
## ----------------------------------- ##
## Main body of $CONFIG_STATUS script. ##
## ----------------------------------- ##
_ASEOF
test $as_write_fail = 0 && chmod +x $CONFIG_STATUS || ac_write_fail=1

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
# Save the log message, to keep $0 and so on meaningful, and to
# report actual input values of CONFIG_FILES etc. instead of their
# values after options handling.
ac_log="
This file was extended by rtems-c-src-tests-sptests $as_me 5.1.0, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = $CONFIG_FILES
  CONFIG_HEADERS  = $CONFIG_HEADERS
  CONFIG_LINKS    = $CONFIG_LINKS
  CONFIG_COMMANDS = $CONFIG_COMMANDS
  $ $0 $@

on `(hostname || uname -n) 2>/dev/null | sed 1q`
"

_ACEOF

case $ac_config_files in *"
"*) set x $ac_config_files; shift; ac_config_files=$*;;
esac

case $ac_config_headers in *"
"*) set x $ac_config_headers; shift; ac_config_headers=$*;;
esac


cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
# Files that config.status was made for.
config_files="$ac_config_files"
config_headers="$ac_config_headers"
config_commands="$ac_config_commands"

_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
ac_cs_usage="\
\`$as_me' instantiates files and other configuration actions
from templates according to the current configuration.  Unless the files
and actions are specified as TAGs, all are instantiated by default.

Usage: $0 [OPTION]... [TAG]...

  -h, --help       print this help, then exit
  -V, --version    print version number and configuration settings, then exit
      --config     print configuration, then exit
  -q, --quiet, --silent
                   do not print progress messages
  -d, --debug      don't remove temporary files
      --recheck    update $as_me by reconfiguring in the same conditions
      --file=FILE[:TEMPLATE] 
                   instantiate the configuration file FILE
      --header=FILE[:TEMPLATE] 
                   instantiate the configuration header FILE

Configuration files:
$config_files

Configuration headers:
$config_headers

Configuration commands:
$config_commands

Report bugs to <https://devel.rtems.org/newticket>."

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
ac_cs_version="\\
rtems-c-src-tests-sptests config.status 5.1.0
configured by $0, generated by GNU Autoconf 2.69,
  with options \\"\$ac_cs_config\\"

Copyright (C) 2012 Free Software Foundation, Inc.
This config.status script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it."

ac_pwd='$ac_pwd'
srcdir='$srcdir'
INSTALL='$INSTALL'
MKDIR_P='$MKDIR_P'
AWK='$AWK'
test -n "\$AWK" || AWK=awk
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
# The default lists apply if the user does not specify any file.
ac_need_defaults=:
while test $# != 0
do
  case $1 in
  --*=?*)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=`expr "X$1" : 'X[^=]*=\(.*\)'`
    ac_shift=:
    ;;
  --*=)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=
    ac_shift=:
    ;;
  *)
    ac_option=$1
    ac_optarg=$2
    ac_shift=shift
    ;;
  esac

  case $ac_option in
  # Handling of the options.
  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
    ac_cs_recheck=: ;;
  --version | --versio | --versi | --vers | --ver | --ve | --v | -V )
    $as_echo "$ac_cs_version"; exit ;;
  --config | --confi | --conf | --con | --co | --c )
    $as_echo "$ac_cs_config"; exit ;;
  --debug | --debu | --deb | --de | --d | -d )
    debug=: ;;
  --file | --fil | --fi | --f )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    '') as_fn_error $? "missing file argument" ;;
    esac
    as_fn_append CONFIG_FILES " '$ac_optarg'"
    ac_need_defaults=false;;
  --header | --heade | --head | --hea )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    esac
    as_fn_append CONFIG_HEADERS " '$ac_optarg'"
    ac_need_defaults=false;;
  --he | --h)
    # Conflict between --help and --header
    as_fn_error $? "ambiguous option: \`$1'
Try \`$0 --help' for more information.";;
  --help | --hel | -h )
    $as_echo "$ac_cs_usage"; exit ;;
  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil | --si | --s)
    ac_cs_silent=: ;;

  # This is an error.
  -*) as_fn_error $? "unrecognized option: \`$1'
Try \`$0 --help' for more information." ;;

  *) as_fn_append ac_config_targets " $1"
     ac_need_defaults=false ;;

  esac
  shift
done

ac_configure_extra_args=

if $ac_cs_silent; then
  exec 6>/dev/null
  ac_configure_extra_args="$ac_configure_extra_args --silent"
fi

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
if \$ac_cs_recheck; then
  set X $SHELL '$0' $ac_configure_args \$ac_configure_extra_args --no-create --no-recursion
  shift
  \$as_echo "running CONFIG_SHELL=$SHELL \$*" >&6
  CONFIG_SHELL='$SHELL'
  export CONFIG_SHELL
  exec "\$@"
fi

_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
exec 5>>config.log
{
  echo
  sed 'h;s/./-/g;s/^.../@%:@@%:@ /;s/...$/ @%:@@%:@/;p;x;p;x' <<_ASBOX
@%:@@%:@ Running $as_me. @%:@@%:@
_ASBOX
  $as_echo "$ac_log"
} >&5

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
#
# INIT-COMMANDS
#
AMDEP_TRUE="$AMDEP_TRUE" ac_aux_dir="$ac_aux_dir"

_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1

# Handling of arguments.
for ac_config_target in $ac_config_targets
do
  case $ac_config_target in
    "config.h") CONFIG_HEADERS="$CONFIG_HEADERS config.h" ;;
    "depfiles") CONFIG_COMMANDS="$CONFIG_COMMANDS depfiles" ;;
    "Makefile") CONFIG_FILES="$CONFIG_FILES Makefile" ;;

  *) as_fn_error $? "invalid argument: \`$ac_config_target'" "$LINENO" 5;;
  esac
done


# If the user did not use the arguments to specify the items to instantiate,
# then the envvar interface is used.  Set only those that are not.
# We use the long form for the default assignment because of an extremely
# bizarre bug on SunOS 4.1.3.
if $ac_need_defaults; then
  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
  test "${CONFIG_HEADERS+set}" = set || CONFIG_HEADERS=$config_headers
  test "${CONFIG_COMMANDS+set}" = set || CONFIG_COMMANDS=$config_commands
fi

# Have a temporary directory for convenience.  Make it in the build tree
# simply because there is no reason against having it here, and in addition,
# creating and moving files from /tmp can sometimes cause problems.
# Hook for its removal unless debugging.
# Note that there is a small window in which the directory will not be cleaned:
# after its creation but before its name has been assigned to `$tmp'.
$debug ||
{
  tmp= ac_tmp=
  trap 'exit_status=$?
  : "${ac_tmp:=$tmp}"
  { test ! -d "$ac_tmp" || rm -fr "$ac_tmp"; } && exit $exit_status
' 0
  trap 'as_fn_exit 1' 1 2 13 15
}
# Create a (secure) tmp directory for tmp files.

{
  tmp=`(umask 077 && mktemp -d "./confXXXXXX") 2>/dev/null` &&
  test -d "$tmp"
}  ||
{
  tmp=./conf$$-$RANDOM
  (umask 077 && mkdir "$tmp")
} || as_fn_error $? "cannot create a temporary directory in ." "$LINENO" 5
ac_tmp=$tmp

# Set up the scripts for CONFIG_FILES section.
# No need to generate them if there are no CONFIG_FILES.
# This happens for instance with `./config.status config.h'.
if test -n "$CONFIG_FILES"; then


ac_cr=`echo X | tr X '\015'`
# On cygwin, bash can eat \r inside `` if the user requested igncr.
# But we know of no other shell where ac_cr would be empty at this
# point, so we can use a bashism as a fallback.
if test "x$ac_cr" = x; then
  eval ac_cr=\$\'\\r\'
fi
ac_cs_awk_cr=`$AWK 'BEGIN { print "a\rb" }' </dev/null 2>/dev/null`
if test "$ac_cs_awk_cr" = "a${ac_cr}b"; then
  ac_cs_awk_cr='\\r'
else
  ac_cs_awk_cr=$ac_cr
fi

echo 'BEGIN {' >"$ac_tmp/subs1.awk" &&
_ACEOF


{
  echo "cat >conf$$subs.awk <<_ACEOF" &&
  echo "$ac_subst_vars" | sed 's/.*/&!$&$ac_delim/' &&
  echo "_ACEOF"
} >conf$$subs.sh ||
  as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5
ac_delim_num=`echo "$ac_subst_vars" | grep -c '^'`
ac_delim='%!_!# '
for ac_last_try in false false false false false :; do
  . ./conf$$subs.sh ||
    as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5

  ac_delim_n=`sed -n "s/.*$ac_delim\$/X/p" conf$$subs.awk | grep -c X`
  if test $ac_delim_n = $ac_delim_num; then
    break
  elif $ac_last_try; then
    as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5
  else
    ac_delim="$ac_delim!$ac_delim _$ac_delim!! "
  fi
done
rm -f conf$$subs.sh

cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
cat >>"\$ac_tmp/subs1.awk" <<\\_ACAWK &&
_ACEOF
sed -n '
h
s/^/S["/; s/!.*/"]=/
p
g
s/^[^!]*!//
:repl
t repl
s/'"$ac_delim"'$//
t delim
:nl
h
s/\(.\{148\}\)..*/\1/
t more1
s/["\\]/\\&/g; s/^/"/; s/$/\\n"\\/
p
n
b repl
:more1
s/["\\]/\\&/g; s/^/"/; s/$/"\\/
p
g
s/.\{148\}//
t nl
:delim
h
s/\(.\{148\}\)..*/\1/
t more2
s/["\\]/\\&/g; s/^/"/; s/$/"/
p
b
:more2
s/["\\]/\\&/g; s/^/"/; s/$/"\\/
p
g
s/.\{148\}//
t delim
' <conf$$subs.awk | sed '
/^[^""]/{
  N
  s/\n//
}
' >>$CONFIG_STATUS || ac_write_fail=1
rm -f conf$$subs.awk
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
_ACAWK
cat >>"\$ac_tmp/subs1.awk" <<_ACAWK &&
  for (key in S) S_is_set[key] = 1
  FS = ""

}
{
  line = $ 0
  nfields = split(line, field, "@")
  substed = 0
  len = length(field[1])
  for (i = 2; i < nfields; i++) {
    key = field[i]
    keylen = length(key)
    if (S_is_set[key]) {
      value = S[key]
      line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
      len += length(value) + length(field[++i])
      substed = 1
    } else
      len += 1 + keylen
  }

  print line
}

_ACAWK
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
if sed "s/$ac_cr//" < /dev/null > /dev/null 2>&1; then
  sed "s/$ac_cr\$//; s/$ac_cr/$ac_cs_awk_cr/g"
else
  cat
fi < "$ac_tmp/subs1.awk" > "$ac_tmp/subs.awk" \
  || as_fn_error $? "could not setup config files machinery" "$LINENO" 5
_ACEOF

# VPATH may cause trouble with some makes, so we remove sole $(srcdir),
# ${srcdir} and @srcdir@ entries from VPATH if srcdir is ".", strip leading and
# trailing colons and then remove the whole line if VPATH becomes empty
# (actually we leave an empty line to preserve line numbers).
if test "x$srcdir" = x.; then
  ac_vpsub='/^[	 ]*VPATH[	 ]*=[	 ]*/{
h
s///
s/^/:/
s/[	 ]*$/:/
s/:\$(srcdir):/:/g
s/:\${srcdir}:/:/g
s/:@srcdir@:/:/g
s/^:*//
s/:*$//
x
s/\(=[	 ]*\).*/\1/
G
s/\n//
s/^[^=]*=[	 ]*$//
}'
fi

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
fi # test -n "$CONFIG_FILES"

# Set up the scripts for CONFIG_HEADERS section.
# No need to generate them if there are no CONFIG_HEADERS.
# This happens for instance with `./config.status Makefile'.
if test -n "$CONFIG_HEADERS"; then
cat >"$ac_tmp/defines.awk" <<\_ACAWK ||
BEGIN {
_ACEOF

# Transform confdefs.h into an awk script `defines.awk', embedded as
# here-document in config.status, that substitutes the proper values into
# config.h.in to produce config.h.

# Create a delimiter string that does not exist in confdefs.h, to ease
# handling of long lines.
ac_delim='%!_!# '
for ac_last_try in false false :; do
  ac_tt=`sed -n "/$ac_delim/p" confdefs.h`
  if test -z "$ac_tt"; then
    break
  elif $ac_last_try; then
    as_fn_error $? "could not make $CONFIG_HEADERS" "$LINENO" 5
  else
    ac_delim="$ac_delim!$ac_delim _$ac_delim!! "
  fi
done

# For the awk script, D is an array of macro values keyed by name,
# likewise P contains macro parameters if any.  Preserve backslash
# newline sequences.

ac_word_re=[_$as_cr_Letters][_$as_cr_alnum]*
sed -n '
s/.\{148\}/&'"$ac_delim"'/g
t rset
:rset
s/^[	 ]*#[	 ]*define[	 ][	 ]*/ /
t def
d
:def
s/\\$//
t bsnl
s/["\\]/\\&/g
s/^ \('"$ac_word_re"'\)\(([^()]*)\)[	 ]*\(.*\)/P["\1"]="\2"\
D["\1"]=" \3"/p
s/^ \('"$ac_word_re"'\)[	 ]*\(.*\)/D["\1"]=" \2"/p
d
:bsnl
s/["\\]/\\&/g
s/^ \('"$ac_word_re"'\)\(([^()]*)\)[	 ]*\(.*\)/P["\1"]="\2"\
D["\1"]=" \3\\\\\\n"\\/p
t cont
s/^ \('"$ac_word_re"'\)[	 ]*\(.*\)/D["\1"]=" \2\\\\\\n"\\/p
t cont
d
:cont
n
s/.\{148\}/&'"$ac_delim"'/g
t clear
:clear
s/\\$//
t bsnlc
s/["\\]/\\&/g; s/^/"/; s/$/"/p
d
:bsnlc
s/["\\]/\\&/g; s/^/"/; s/$/\\\\\\n"\\/p
b cont
' <confdefs.h | sed '
s/'"$ac_delim"'/"\\\
"/g' >>$CONFIG_STATUS || ac_write_fail=1

cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
  for (key in D) D_is_set[key] = 1
  FS = ""
}
/^[\t ]*#[\t ]*(define|undef)[\t ]+$ac_word_re([\t (]|\$)/ {
  line = \$ 0
  split(line, arg, " ")
  if (arg[1] == "#") {
    defundef = arg[2]
    mac1 = arg[3]
  } else {
    defundef = substr(arg[1], 2)
    mac1 = arg[2]
  }
  split(mac1, mac2, "(") #)
  macro = mac2[1]
  prefix = substr(line, 1, index(line, defundef) - 1)
  if (D_is_set[macro]) {
    # Preserve the white space surrounding the "#".
    print prefix "define", macro P[macro] D[macro]
    next
  } else {
    # Replace #undef with comments.  This is necessary, for example,
    # in the case of _POSIX_SOURCE, which is predefined and required
    # on some systems where configure will not decide to define it.
    if (defundef == "undef") {
      print "/*", prefix defundef, macro, "*/"
      next
    }
  }
}
{ print }
_ACAWK
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
  as_fn_error $? "could not setup config headers machinery" "$LINENO" 5
fi # test -n "$CONFIG_HEADERS"


eval set X "  :F $CONFIG_FILES  :H $CONFIG_HEADERS    :C $CONFIG_COMMANDS"
shift
for ac_tag
do
  case $ac_tag in
  :[FHLC]) ac_mode=$ac_tag; continue;;
  esac
  case $ac_mode$ac_tag in
  :[FHL]*:*);;
  :L* | :C*:*) as_fn_error $? "invalid tag \`$ac_tag'" "$LINENO" 5;;
  :[FH]-) ac_tag=-:-;;
  :[FH]*) ac_tag=$ac_tag:$ac_tag.in;;
  esac
  ac_save_IFS=$IFS
  IFS=:
  set x $ac_tag
  IFS=$ac_save_IFS
  shift
  ac_file=$1
  shift

  case $ac_mode in
  :L) ac_source=$1;;
  :[FH])
    ac_file_inputs=
    for ac_f
    do
      case $ac_f in
      -) ac_f="$ac_tmp/stdin";;
      *) # Look for the file first in the build tree, then in the source tree
	 # (if the path is not absolute).  The absolute path cannot be DOS-style,
	 # because $ac_f cannot contain `:'.
	 test -f "$ac_f" ||
	   case $ac_f in
	   [\\/$]*) false;;
	   *) test -f "$srcdir/$ac_f" && ac_f="$srcdir/$ac_f";;
	   esac ||
	   as_fn_error 1 "cannot find input file: \`$ac_f'" "$LINENO" 5;;
      esac
      case $ac_f in *\'*) ac_f=`$as_echo "$ac_f" | sed "s/'/'\\\\\\\\''/g"`;; esac
      as_fn_append ac_file_inputs " '$ac_f'"
    done

    # Let's still pretend it is `configure' which instantiates (i.e., don't
    # use $as_me), people would be surprised to read:
    #    /* config.h.  Generated by config.status.  */
    configure_input='Generated from '`
	  $as_echo "$*" | sed 's|^[^:]*/||;s|:[^:]*/|, |g'
	`' by configure.'
    if test x"$ac_file" != x-; then
      configure_input="$ac_file.  $configure_input"
      { $as_echo "$as_me:${as_lineno-$LINENO}: creating $ac_file" >&5
$as_echo "$as_me: creating $ac_file" >&6;}
    fi
    # Neutralize special characters interpreted by sed in replacement strings.
    case $configure_input in #(
    *\&* | *\|* | *\\* )
       ac_sed_conf_input=`$as_echo "$configure_input" |
       sed 's/[\\\\&|]/\\\\&/g'`;; #(
    *) ac_sed_conf_input=$configure_input;;
    esac

    case $ac_tag in
    *:-:* | *:-) cat >"$ac_tmp/stdin" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5 ;;
    esac
    ;;
  esac

  ac_dir=`$as_dirname -- "$ac_file" ||
$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$ac_file" : 'X\(//\)[^/]' \| \
	 X"$ac_file" : 'X\(//\)$' \| \
	 X"$ac_file" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$ac_file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  as_dir="$ac_dir"; as_fn_mkdir_p
  ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix


  case $ac_mode in
  :F)
  #
  # CONFIG_FILE
  #

  case $INSTALL in
  [\\/$]* | ?:[\\/]* ) ac_INSTALL=$INSTALL ;;
  *) ac_INSTALL=$ac_top_build_prefix$INSTALL ;;
  esac
  ac_MKDIR_P=$MKDIR_P
  case $MKDIR_P in
  [\\/$]* | ?:[\\/]* ) ;;
  */*) ac_MKDIR_P=$ac_top_build_prefix$MKDIR_P ;;
  esac
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
# If the template does not know about datarootdir, expand it.
# FIXME: This hack should be removed a few years after 2.60.
ac_datarootdir_hack=; ac_datarootdir_seen=
ac_sed_dataroot='
/datarootdir/ {
  p
  q
}
/@datadir@/p
/@docdir@/p
/@infodir@/p
/@localedir@/p
/@mandir@/p'
case `eval "sed -n \"\$ac_sed_dataroot\" $ac_file_inputs"` in
*datarootdir*) ac_datarootdir_seen=yes;;
*@datadir@*|*@docdir@*|*@infodir@*|*@localedir@*|*@mandir@*)
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&5
$as_echo "$as_me: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&2;}
_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
  ac_datarootdir_hack='
  s&@datadir@&$datadir&g
  s&@docdir@&$docdir&g
  s&@infodir@&$infodir&g
  s&@localedir@&$localedir&g
  s&@mandir@&$mandir&g
  s&\\\${datarootdir}&$datarootdir&g' ;;
esac
_ACEOF

# Neutralize VPATH when `$srcdir' = `.'.
# Shell code in configure.ac might set extrasub.
# FIXME: do we really want to maintain this feature?
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
ac_sed_extra="$ac_vpsub
$extrasub
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
:t
/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
s|@configure_input@|$ac_sed_conf_input|;t t
s&@top_builddir@&$ac_top_builddir_sub&;t t
s&@top_build_prefix@&$ac_top_build_prefix&;t t
s&@srcdir@&$ac_srcdir&;t t
s&@abs_srcdir@&$ac_abs_srcdir&;t t
s&@top_srcdir@&$ac_top_srcdir&;t t
s&@abs_top_srcdir@&$ac_abs_top_srcdir&;t t
s&@builddir@&$ac_builddir&;t t
s&@abs_builddir@&$ac_abs_builddir&;t t
s&@abs_top_builddir@&$ac_abs_top_builddir&;t t
s&@INSTALL@&$ac_INSTALL&;t t
s&@MKDIR_P@&$ac_MKDIR_P&;t t
$ac_datarootdir_hack
"
eval sed \"\$ac_sed_extra\" "$ac_file_inputs" | $AWK -f "$ac_tmp/subs.awk" \
  >$ac_tmp/out || as_fn_error $? "could not create $ac_file" "$LINENO" 5

test -z "$ac_datarootdir_hack$ac_datarootdir_seen" &&
  { ac_out=`sed -n '/\${datarootdir}/p' "$ac_tmp/out"`; test -n "$ac_out"; } &&
  { ac_out=`sed -n '/^[	 ]*datarootdir[	 ]*:*=/p' \
      "$ac_tmp/out"`; test -z "$ac_out"; } &&
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&5
$as_echo "$as_me: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&2;}

  rm -f "$ac_tmp/stdin"
  case $ac_file in
  -) cat "$ac_tmp/out" && rm -f "$ac_tmp/out";;
  *) rm -f "$ac_file" && mv "$ac_tmp/out" "$ac_file";;
  esac \
  || as_fn_error $? "could not create $ac_file" "$LINENO" 5
 ;;
  :H)
  #
  # CONFIG_HEADER
  #
  if test x"$ac_file" != x-; then
    {
      $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs"
    } >"$ac_tmp/config.h" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5
    if diff "$ac_file" "$ac_tmp/config.h" >/dev/null 2>&1; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: $ac_file is unchanged" >&5
$as_echo "$as_me: $ac_file is unchanged" >&6;}
    else
      rm -f "$ac_file"
      mv "$ac_tmp/config.h" "$ac_file" \
	|| as_fn_error $? "could not create $ac_file" "$LINENO" 5
    fi
  else
    $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs" \
      || as_fn_error $? "could not create -" "$LINENO" 5
  fi
# Compute "$ac_file"'s index in $config_headers.
_am_arg="$ac_file"
_am_stamp_count=1
for _am_header in $config_headers :; do
  case $_am_header in
    $_am_arg | $_am_arg:* )
      break ;;
    * )
      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
  esac
done
echo "timestamp for $_am_arg" >`$as_dirname -- "$_am_arg" ||
$as_expr X"$_am_arg" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$_am_arg" : 'X\(//\)[^/]' \| \
	 X"$_am_arg" : 'X\(//\)$' \| \
	 X"$_am_arg" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$_am_arg" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`/stamp-h$_am_stamp_count
 ;;
  
  :C)  { $as_echo "$as_me:${as_lineno-$LINENO}: executing $ac_file commands" >&5
$as_echo "$as_me: executing $ac_file commands" >&6;}
 ;;
  esac


  case $ac_file$ac_mode in
    "depfiles":C) test x"$AMDEP_TRUE" != x"" || {
  # Autoconf 2.62 quotes --file arguments for eval, but not when files
  # are listed without --file.  Let's play safe and only enable the eval
  # if we detect the quoting.
  case $CONFIG_FILES in
  *\'*) eval set x "$CONFIG_FILES" ;;
  *)   set x $CONFIG_FILES ;;
  esac
  shift
  for mf
  do
    # Strip MF so we end up with the name of the file.
    mf=`echo "$mf" | sed -e 's/:.*$//'`
    # Check whether this is an Automake generated Makefile or not.
    # We used to match only the files named 'Makefile.in', but
    # some people rename them; so instead we look at the file content.
    # Grep'ing the first line is not enough: some people post-process
    # each Makefile.in and add a new line on top of each file to say so.
    # Grep'ing the whole file is not good either: AIX grep has a line
    # limit of 2048, but all sed's we know have understand at least 4000.
    if sed -n 's,^#.*generated by automake.*,X,p' "$mf" | grep X >/dev/null 2>&1; then
      dirpart=`$as_dirname -- "$mf" ||
$as_expr X"$mf" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$mf" : 'X\(//\)[^/]' \| \
	 X"$mf" : 'X\(//\)$' \| \
	 X"$mf" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$mf" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
    else
      continue
    fi
    # Extract the definition of DEPDIR, am__include, and am__quote
    # from the Makefile without running 'make'.
    DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
    test -z "$DEPDIR" && continue
    am__include=`sed -n 's/^am__include = //p' < "$mf"`
    test -z "am__include" && continue
    am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
    # Find all dependency output files, they are included files with
    # $(DEPDIR) in their names.  We invoke sed twice because it is the
    # simplest approach to changing $(DEPDIR) to its actual value in the
    # expansion.
    for file in `sed -n "
      s/^$am__include $am__quote\(.*(DEPDIR).*\)$am__quote"'$/\1/p' <"$mf" | \
	 sed -e 's/\$(DEPDIR)/'"$DEPDIR"'/g'`; do
      # Make sure the directory exists.
      test -f "$dirpart/$file" && continue
      fdir=`$as_dirname -- "$file" ||
$as_expr X"$file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$file" : 'X\(//\)[^/]' \| \
	 X"$file" : 'X\(//\)$' \| \
	 X"$file" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      as_dir=$dirpart/$fdir; as_fn_mkdir_p
      # echo "creating $dirpart/$file"
      echo '# dummy' > "$dirpart/$file"
    done
  done
}
 ;;

  esac
done # for ac_tag


as_fn_exit 0
_ACEOF
ac_clean_files=$ac_clean_files_save

test $ac_write_fail = 0 ||
  as_fn_error $? "write failure creating $CONFIG_STATUS" "$LINENO" 5


# configure is writing to config.log, and then calls config.status.
# config.status does its own redirection, appending to config.log.
# Unfortunately, on DOS this fails, as config.log is still kept open
# by configure, so config.status won't be able to write to it; its
# output is simply discarded.  So we exec the FD to /dev/null,
# effectively closing config.log, so it can be properly (re)opened and
# appended to by config.status.  When coming back to configure, we
# need to make the FD available again.
if test "$no_create" != yes; then
  ac_cs_success=:
  ac_config_status_args=
  test "$silent" = yes &&
    ac_config_status_args="$ac_config_status_args --quiet"
  exec 5>/dev/null
  $SHELL $CONFIG_STATUS $ac_config_status_args || ac_cs_success=false
  exec 5>>config.log
  # Use ||, not &&, to avoid exiting from the if with $? = 1, which
  # would make configure fail if this is the last instruction.
  $ac_cs_success || as_fn_exit 1
fi
if test -n "$ac_unrecognized_opts" && test "$enable_option_checking" != no; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unrecognized options: $ac_unrecognized_opts" >&5
$as_echo "$as_me: WARNING: unrecognized options: $ac_unrecognized_opts" >&2;}
fi

